{"version":3,"file":"material__tree.js","sources":["../../../../../../src/components-examples/material/tree/tree-checklist/tree-checklist-example.ts","../../../../../../src/components-examples/material/tree/tree-checklist/tree-checklist-example.html","../../../../../../src/components-examples/material/tree/tree-dynamic/tree-dynamic-example.ts","../../../../../../src/components-examples/material/tree/tree-dynamic/tree-dynamic-example.html","../../../../../../src/components-examples/material/tree/tree-flat-overview/tree-flat-overview-example.ts","../../../../../../src/components-examples/material/tree/tree-flat-overview/tree-flat-overview-example.html","../../../../../../src/components-examples/material/tree/tree-loadmore/tree-loadmore-example.html","../../../../../../src/components-examples/material/tree/tree-loadmore/tree-loadmore-example.ts","../../../../../../src/components-examples/material/tree/tree-nested-overview/tree-nested-overview-example.ts","../../../../../../src/components-examples/material/tree/tree-nested-overview/tree-nested-overview-example.html","../../../../../../src/components-examples/material/tree/index.ts"],"sourcesContent":["import {SelectionModel} from '@angular/cdk/collections';\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {Component, Injectable} from '@angular/core';\nimport {MatTreeFlatDataSource, MatTreeFlattener} from '@angular/material/tree';\nimport {BehaviorSubject} from 'rxjs';\n\n/**\n * Node for to-do item\n */\nexport class TodoItemNode {\n  children: TodoItemNode[];\n  item: string;\n}\n\n/** Flat to-do item node with expandable and level information */\nexport class TodoItemFlatNode {\n  item: string;\n  level: number;\n  expandable: boolean;\n}\n\n/**\n * The Json object for to-do list data.\n */\nconst TREE_DATA = {\n  Groceries: {\n    'Almond Meal flour': null,\n    'Organic eggs': null,\n    'Protein Powder': null,\n    Fruits: {\n      Apple: null,\n      Berries: ['Blueberry', 'Raspberry'],\n      Orange: null\n    }\n  },\n  Reminders: [\n    'Cook dinner',\n    'Read the Material Design spec',\n    'Upgrade Application to Angular'\n  ]\n};\n\n/**\n * Checklist database, it can build a tree structured Json object.\n * Each node in Json object represents a to-do item or a category.\n * If a node is a category, it has children items and new items can be added under the category.\n */\n@Injectable()\nexport class ChecklistDatabase {\n  dataChange = new BehaviorSubject<TodoItemNode[]>([]);\n\n  get data(): TodoItemNode[] { return this.dataChange.value; }\n\n  constructor() {\n    this.initialize();\n  }\n\n  initialize() {\n    // Build the tree nodes from Json object. The result is a list of `TodoItemNode` with nested\n    //     file node as children.\n    const data = this.buildFileTree(TREE_DATA, 0);\n\n    // Notify the change.\n    this.dataChange.next(data);\n  }\n\n  /**\n   * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n   * The return value is the list of `TodoItemNode`.\n   */\n  buildFileTree(obj: {[key: string]: any}, level: number): TodoItemNode[] {\n    return Object.keys(obj).reduce<TodoItemNode[]>((accumulator, key) => {\n      const value = obj[key];\n      const node = new TodoItemNode();\n      node.item = key;\n\n      if (value != null) {\n        if (typeof value === 'object') {\n          node.children = this.buildFileTree(value, level + 1);\n        } else {\n          node.item = value;\n        }\n      }\n\n      return accumulator.concat(node);\n    }, []);\n  }\n\n  /** Add an item to to-do list */\n  insertItem(parent: TodoItemNode, name: string) {\n    if (parent.children) {\n      parent.children.push({item: name} as TodoItemNode);\n      this.dataChange.next(this.data);\n    }\n  }\n\n  updateItem(node: TodoItemNode, name: string) {\n    node.item = name;\n    this.dataChange.next(this.data);\n  }\n}\n\n/**\n * @title Tree with checkboxes\n */\n@Component({\n  selector: 'tree-checklist-example',\n  templateUrl: 'tree-checklist-example.html',\n  styleUrls: ['tree-checklist-example.css'],\n  providers: [ChecklistDatabase]\n})\nexport class TreeChecklistExample {\n  /** Map from flat node to nested node. This helps us finding the nested node to be modified */\n  flatNodeMap = new Map<TodoItemFlatNode, TodoItemNode>();\n\n  /** Map from nested node to flattened node. This helps us to keep the same object for selection */\n  nestedNodeMap = new Map<TodoItemNode, TodoItemFlatNode>();\n\n  /** A selected parent node to be inserted */\n  selectedParent: TodoItemFlatNode | null = null;\n\n  /** The new item's name */\n  newItemName = '';\n\n  treeControl: FlatTreeControl<TodoItemFlatNode>;\n\n  treeFlattener: MatTreeFlattener<TodoItemNode, TodoItemFlatNode>;\n\n  dataSource: MatTreeFlatDataSource<TodoItemNode, TodoItemFlatNode>;\n\n  /** The selection for checklist */\n  checklistSelection = new SelectionModel<TodoItemFlatNode>(true /* multiple */);\n\n  constructor(private _database: ChecklistDatabase) {\n    this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel,\n      this.isExpandable, this.getChildren);\n    this.treeControl = new FlatTreeControl<TodoItemFlatNode>(this.getLevel, this.isExpandable);\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n    _database.dataChange.subscribe(data => {\n      this.dataSource.data = data;\n    });\n  }\n\n  getLevel = (node: TodoItemFlatNode) => node.level;\n\n  isExpandable = (node: TodoItemFlatNode) => node.expandable;\n\n  getChildren = (node: TodoItemNode): TodoItemNode[] => node.children;\n\n  hasChild = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.expandable;\n\n  hasNoContent = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.item === '';\n\n  /**\n   * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\n   */\n  transformer = (node: TodoItemNode, level: number) => {\n    const existingNode = this.nestedNodeMap.get(node);\n    const flatNode = existingNode && existingNode.item === node.item\n        ? existingNode\n        : new TodoItemFlatNode();\n    flatNode.item = node.item;\n    flatNode.level = level;\n    flatNode.expandable = !!node.children;\n    this.flatNodeMap.set(flatNode, node);\n    this.nestedNodeMap.set(node, flatNode);\n    return flatNode;\n  }\n\n  /** Whether all the descendants of the node are selected. */\n  descendantsAllSelected(node: TodoItemFlatNode): boolean {\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.every(child =>\n      this.checklistSelection.isSelected(child)\n    );\n    return descAllSelected;\n  }\n\n  /** Whether part of the descendants are selected */\n  descendantsPartiallySelected(node: TodoItemFlatNode): boolean {\n    const descendants = this.treeControl.getDescendants(node);\n    const result = descendants.some(child => this.checklistSelection.isSelected(child));\n    return result && !this.descendantsAllSelected(node);\n  }\n\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\n  todoItemSelectionToggle(node: TodoItemFlatNode): void {\n    this.checklistSelection.toggle(node);\n    const descendants = this.treeControl.getDescendants(node);\n    this.checklistSelection.isSelected(node)\n      ? this.checklistSelection.select(...descendants)\n      : this.checklistSelection.deselect(...descendants);\n\n    // Force update for the parent\n    descendants.every(child =>\n      this.checklistSelection.isSelected(child)\n    );\n    this.checkAllParentsSelection(node);\n  }\n\n  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\n  todoLeafItemSelectionToggle(node: TodoItemFlatNode): void {\n    this.checklistSelection.toggle(node);\n    this.checkAllParentsSelection(node);\n  }\n\n  /* Checks all the parents when a leaf node is selected/unselected */\n  checkAllParentsSelection(node: TodoItemFlatNode): void {\n    let parent: TodoItemFlatNode | null = this.getParentNode(node);\n    while (parent) {\n      this.checkRootNodeSelection(parent);\n      parent = this.getParentNode(parent);\n    }\n  }\n\n  /** Check root node checked state and change it accordingly */\n  checkRootNodeSelection(node: TodoItemFlatNode): void {\n    const nodeSelected = this.checklistSelection.isSelected(node);\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.every(child =>\n      this.checklistSelection.isSelected(child)\n    );\n    if (nodeSelected && !descAllSelected) {\n      this.checklistSelection.deselect(node);\n    } else if (!nodeSelected && descAllSelected) {\n      this.checklistSelection.select(node);\n    }\n  }\n\n  /* Get the parent node of a node */\n  getParentNode(node: TodoItemFlatNode): TodoItemFlatNode | null {\n    const currentLevel = this.getLevel(node);\n\n    if (currentLevel < 1) {\n      return null;\n    }\n\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n\n    for (let i = startIndex; i >= 0; i--) {\n      const currentNode = this.treeControl.dataNodes[i];\n\n      if (this.getLevel(currentNode) < currentLevel) {\n        return currentNode;\n      }\n    }\n    return null;\n  }\n\n  /** Select the category so we can insert the new item. */\n  addNewItem(node: TodoItemFlatNode) {\n    const parentNode = this.flatNodeMap.get(node);\n    this._database.insertItem(parentNode!, '');\n    this.treeControl.expand(node);\n  }\n\n  /** Save the node to database */\n  saveNode(node: TodoItemFlatNode, itemValue: string) {\n    const nestedNode = this.flatNodeMap.get(node);\n    this._database.updateItem(nestedNode!, itemValue);\n  }\n}\n","<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodeToggle matTreeNodePadding>\n    <button mat-icon-button disabled></button>\n    <mat-checkbox class=\"checklist-leaf-node\"\n                  [checked]=\"checklistSelection.isSelected(node)\"\n                  (change)=\"todoLeafItemSelectionToggle(node)\">{{node.item}}</mat-checkbox>\n  </mat-tree-node>\n\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasNoContent\" matTreeNodePadding>\n    <button mat-icon-button disabled></button>\n    <mat-form-field>\n      <mat-label>New item...</mat-label>\n      <input matInput #itemValue placeholder=\"Ex. Lettuce\">\n    </mat-form-field>\n    <button mat-button (click)=\"saveNode(node, itemValue.value)\">Save</button>\n  </mat-tree-node>\n\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\n    <button mat-icon-button matTreeNodeToggle\n            [attr.aria-label]=\"'toggle ' + node.filename\">\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    <mat-checkbox [checked]=\"descendantsAllSelected(node)\"\n                  [indeterminate]=\"descendantsPartiallySelected(node)\"\n                  (change)=\"todoItemSelectionToggle(node)\">{{node.item}}</mat-checkbox>\n    <button mat-icon-button (click)=\"addNewItem(node)\"><mat-icon>add</mat-icon></button>\n  </mat-tree-node>\n</mat-tree>\n","import {CollectionViewer, SelectionChange, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {Component, Injectable} from '@angular/core';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n/** Flat node with expandable and level information */\nexport class DynamicFlatNode {\n  constructor(public item: string, public level = 1, public expandable = false,\n              public isLoading = false) {}\n}\n\n/**\n * Database for dynamic data. When expanding a node in the tree, the data source will need to fetch\n * the descendants data from the database.\n */\n@Injectable({providedIn: 'root'})\nexport class DynamicDatabase {\n  dataMap = new Map<string, string[]>([\n    ['Fruits', ['Apple', 'Orange', 'Banana']],\n    ['Vegetables', ['Tomato', 'Potato', 'Onion']],\n    ['Apple', ['Fuji', 'Macintosh']],\n    ['Onion', ['Yellow', 'White', 'Purple']]\n  ]);\n\n  rootLevelNodes: string[] = ['Fruits', 'Vegetables'];\n\n  /** Initial data from database */\n  initialData(): DynamicFlatNode[] {\n    return this.rootLevelNodes.map(name => new DynamicFlatNode(name, 0, true));\n  }\n\n  getChildren(node: string): string[] | undefined {\n    return this.dataMap.get(node);\n  }\n\n  isExpandable(node: string): boolean {\n    return this.dataMap.has(node);\n  }\n}\n/**\n * File database, it can build a tree structured Json object from string.\n * Each node in Json object represents a file or a directory. For a file, it has filename and type.\n * For a directory, it has filename and children (a list of files or directories).\n * The input will be a json object string, and the output is a list of `FileNode` with nested\n * structure.\n */\nexport class DynamicDataSource implements DataSource<DynamicFlatNode> {\n\n  dataChange = new BehaviorSubject<DynamicFlatNode[]>([]);\n\n  get data(): DynamicFlatNode[] { return this.dataChange.value; }\n  set data(value: DynamicFlatNode[]) {\n    this._treeControl.dataNodes = value;\n    this.dataChange.next(value);\n  }\n\n  constructor(private _treeControl: FlatTreeControl<DynamicFlatNode>,\n              private _database: DynamicDatabase) {}\n\n  connect(collectionViewer: CollectionViewer): Observable<DynamicFlatNode[]> {\n    this._treeControl.expansionModel.changed.subscribe(change => {\n      if ((change as SelectionChange<DynamicFlatNode>).added ||\n        (change as SelectionChange<DynamicFlatNode>).removed) {\n        this.handleTreeControl(change as SelectionChange<DynamicFlatNode>);\n      }\n    });\n\n    return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));\n  }\n\n  disconnect(collectionViewer: CollectionViewer): void {}\n\n  /** Handle expand/collapse behaviors */\n  handleTreeControl(change: SelectionChange<DynamicFlatNode>) {\n    if (change.added) {\n      change.added.forEach(node => this.toggleNode(node, true));\n    }\n    if (change.removed) {\n      change.removed.slice().reverse().forEach(node => this.toggleNode(node, false));\n    }\n  }\n\n  /**\n   * Toggle the node, remove from display list\n   */\n  toggleNode(node: DynamicFlatNode, expand: boolean) {\n    const children = this._database.getChildren(node.item);\n    const index = this.data.indexOf(node);\n    if (!children || index < 0) { // If no children, or cannot find the node, no op\n      return;\n    }\n\n    node.isLoading = true;\n\n    setTimeout(() => {\n      if (expand) {\n        const nodes = children.map(name =>\n          new DynamicFlatNode(name, node.level + 1, this._database.isExpandable(name)));\n        this.data.splice(index + 1, 0, ...nodes);\n      } else {\n        let count = 0;\n        for (let i = index + 1; i < this.data.length\n          && this.data[i].level > node.level; i++, count++) {}\n        this.data.splice(index + 1, count);\n      }\n\n      // notify the change\n      this.dataChange.next(this.data);\n      node.isLoading = false;\n    }, 1000);\n  }\n}\n\n/**\n * @title Tree with dynamic data\n */\n@Component({\n  selector: 'tree-dynamic-example',\n  templateUrl: 'tree-dynamic-example.html',\n  styleUrls: ['tree-dynamic-example.css']\n})\nexport class TreeDynamicExample {\n  constructor(database: DynamicDatabase) {\n    this.treeControl = new FlatTreeControl<DynamicFlatNode>(this.getLevel, this.isExpandable);\n    this.dataSource = new DynamicDataSource(this.treeControl, database);\n\n    this.dataSource.data = database.initialData();\n  }\n\n  treeControl: FlatTreeControl<DynamicFlatNode>;\n\n  dataSource: DynamicDataSource;\n\n  getLevel = (node: DynamicFlatNode) => node.level;\n\n  isExpandable = (node: DynamicFlatNode) => node.expandable;\n\n  hasChild = (_: number, _nodeData: DynamicFlatNode) => _nodeData.expandable;\n}\n","<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n    <button mat-icon-button disabled></button>\n    {{node.item}}\n  </mat-tree-node>\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\n    <button mat-icon-button\n            [attr.aria-label]=\"'toggle ' + node.filename\" matTreeNodeToggle>\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.item}}\n    <mat-progress-bar *ngIf=\"node.isLoading\"\n                      mode=\"indeterminate\"\n                      class=\"example-tree-progress-bar\"></mat-progress-bar>\n  </mat-tree-node>\n</mat-tree>\n","import {FlatTreeControl} from '@angular/cdk/tree';\nimport {Component} from '@angular/core';\nimport {MatTreeFlatDataSource, MatTreeFlattener} from '@angular/material/tree';\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optional list of children.\n */\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n\nconst TREE_DATA: FoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [\n      {name: 'Apple'},\n      {name: 'Banana'},\n      {name: 'Fruit loops'},\n    ]\n  }, {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [\n          {name: 'Broccoli'},\n          {name: 'Brussels sprouts'},\n        ]\n      }, {\n        name: 'Orange',\n        children: [\n          {name: 'Pumpkins'},\n          {name: 'Carrots'},\n        ]\n      },\n    ]\n  },\n];\n\n/** Flat node with expandable and level information */\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n}\n\n/**\n * @title Tree with flat nodes\n */\n@Component({\n  selector: 'tree-flat-overview-example',\n  templateUrl: 'tree-flat-overview-example.html',\n  styleUrls: ['tree-flat-overview-example.css'],\n})\nexport class TreeFlatOverviewExample {\n  private _transformer = (node: FoodNode, level: number) => {\n    return {\n      expandable: !!node.children && node.children.length > 0,\n      name: node.name,\n      level: level,\n    };\n  }\n\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n      node => node.level, node => node.expandable);\n\n  treeFlattener = new MatTreeFlattener(\n      this._transformer, node => node.level, node => node.expandable, node => node.children);\n\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n  constructor() {\n    this.dataSource.data = TREE_DATA;\n  }\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n}\n","<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <!-- This is the tree node template for leaf nodes -->\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n    <!-- use a disabled button to provide padding for tree leaf -->\n    <button mat-icon-button disabled></button>\n    {{node.name}}\n  </mat-tree-node>\n  <!-- This is the tree node template for expandable nodes -->\n  <mat-tree-node *matTreeNodeDef=\"let node;when: hasChild\" matTreeNodePadding>\n    <button mat-icon-button matTreeNodeToggle\n            [attr.aria-label]=\"'toggle ' + node.name\">\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.name}}\n  </mat-tree-node>\n</mat-tree>\n","<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <!-- Leaf node -->\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n    <button mat-icon-button disabled></button>\n    {{node.item}}\n  </mat-tree-node>\n\n  <!-- expandable node -->\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\n    <button mat-icon-button\n            [attr.aria-label]=\"'toggle ' + node.filename\"\n            (click)=\"loadChildren(node)\"\n            matTreeNodeToggle>\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.item}}\n  </mat-tree-node>\n\n  <mat-tree-node *matTreeNodeDef=\"let node; when: isLoadMore\">\n    <button mat-button (click)=\"loadMore(node.loadMoreParentItem)\">\n      Load more...\n    </button>\n  </mat-tree-node>\n</mat-tree>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {Component, Injectable} from '@angular/core';\nimport {MatTreeFlatDataSource, MatTreeFlattener} from '@angular/material/tree';\nimport {BehaviorSubject, Observable} from 'rxjs';\n\nconst LOAD_MORE = 'LOAD_MORE';\n\n/** Nested node */\nexport class LoadmoreNode {\n  childrenChange = new BehaviorSubject<LoadmoreNode[]>([]);\n\n  get children(): LoadmoreNode[] {\n    return this.childrenChange.value;\n  }\n\n  constructor(public item: string,\n              public hasChildren = false,\n              public loadMoreParentItem: string | null = null) {}\n}\n\n/** Flat node with expandable and level information */\nexport class LoadmoreFlatNode {\n  constructor(public item: string,\n              public level = 1,\n              public expandable = false,\n              public loadMoreParentItem: string | null = null) {}\n}\n\n/**\n * A database that only load part of the data initially. After user clicks on the `Load more`\n * button, more data will be loaded.\n */\n@Injectable()\nexport class LoadmoreDatabase {\n  batchNumber = 5;\n  dataChange = new BehaviorSubject<LoadmoreNode[]>([]);\n  nodeMap = new Map<string, LoadmoreNode>();\n\n  /** The data */\n  rootLevelNodes: string[] = ['Vegetables', 'Fruits'];\n  dataMap = new Map<string, string[]>([\n    ['Fruits', ['Apple', 'Orange', 'Banana']],\n    ['Vegetables', ['Tomato', 'Potato', 'Onion']],\n    ['Apple', ['Fuji', 'Macintosh']],\n    ['Onion', ['Yellow', 'White', 'Purple', 'Green', 'Shallot', 'Sweet', 'Red', 'Leek']],\n  ]);\n\n  initialize() {\n    const data = this.rootLevelNodes.map(name => this._generateNode(name));\n    this.dataChange.next(data);\n  }\n\n  /** Expand a node whose children are not loaded */\n  loadMore(item: string, onlyFirstTime = false) {\n    if (!this.nodeMap.has(item) || !this.dataMap.has(item)) {\n      return;\n    }\n    const parent = this.nodeMap.get(item)!;\n    const children = this.dataMap.get(item)!;\n    if (onlyFirstTime && parent.children!.length > 0) {\n      return;\n    }\n    const newChildrenNumber = parent.children!.length + this.batchNumber;\n    const nodes = children.slice(0, newChildrenNumber)\n      .map(name => this._generateNode(name));\n    if (newChildrenNumber < children.length) {\n      // Need a new load more node\n      nodes.push(new LoadmoreNode(LOAD_MORE, false, item));\n    }\n\n    parent.childrenChange.next(nodes);\n    this.dataChange.next(this.dataChange.value);\n  }\n\n  private _generateNode(item: string): LoadmoreNode {\n    if (this.nodeMap.has(item)) {\n      return this.nodeMap.get(item)!;\n    }\n    const result = new LoadmoreNode(item, this.dataMap.has(item));\n    this.nodeMap.set(item, result);\n    return result;\n  }\n}\n\n/**\n * @title Tree with partially loaded data\n */\n@Component({\n  selector: 'tree-loadmore-example',\n  templateUrl: 'tree-loadmore-example.html',\n  styleUrls: ['tree-loadmore-example.css'],\n  providers: [LoadmoreDatabase]\n})\nexport class TreeLoadmoreExample {\n  nodeMap = new Map<string, LoadmoreFlatNode>();\n  treeControl: FlatTreeControl<LoadmoreFlatNode>;\n  treeFlattener: MatTreeFlattener<LoadmoreNode, LoadmoreFlatNode>;\n  // Flat tree data source\n  dataSource: MatTreeFlatDataSource<LoadmoreNode, LoadmoreFlatNode>;\n\n  constructor(private _database: LoadmoreDatabase) {\n    this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel,\n      this.isExpandable, this.getChildren);\n\n    this.treeControl = new FlatTreeControl<LoadmoreFlatNode>(this.getLevel, this.isExpandable);\n\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n    _database.dataChange.subscribe(data => {\n      this.dataSource.data = data;\n    });\n\n    _database.initialize();\n  }\n\n  getChildren = (node: LoadmoreNode): Observable<LoadmoreNode[]> => node.childrenChange;\n\n  transformer = (node: LoadmoreNode, level: number) => {\n    const existingNode = this.nodeMap.get(node.item);\n\n    if (existingNode) {\n      return existingNode;\n    }\n\n    const newNode =\n        new LoadmoreFlatNode(node.item, level, node.hasChildren, node.loadMoreParentItem);\n    this.nodeMap.set(node.item, newNode);\n    return newNode;\n  }\n\n  getLevel = (node: LoadmoreFlatNode) => node.level;\n\n  isExpandable = (node: LoadmoreFlatNode) => node.expandable;\n\n  hasChild = (_: number, _nodeData: LoadmoreFlatNode) => _nodeData.expandable;\n\n  isLoadMore = (_: number, _nodeData: LoadmoreFlatNode) => _nodeData.item === LOAD_MORE;\n\n  /** Load more nodes from data source */\n  loadMore(item: string) {\n    this._database.loadMore(item);\n  }\n\n  loadChildren(node: LoadmoreFlatNode) {\n    this._database.loadMore(node.item, true);\n  }\n}\n","import {NestedTreeControl} from '@angular/cdk/tree';\nimport {Component} from '@angular/core';\nimport {MatTreeNestedDataSource} from '@angular/material/tree';\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optional list of children.\n */\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n\nconst TREE_DATA: FoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [\n      {name: 'Apple'},\n      {name: 'Banana'},\n      {name: 'Fruit loops'},\n    ]\n  }, {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [\n          {name: 'Broccoli'},\n          {name: 'Brussels sprouts'},\n        ]\n      }, {\n        name: 'Orange',\n        children: [\n          {name: 'Pumpkins'},\n          {name: 'Carrots'},\n        ]\n      },\n    ]\n  },\n];\n\n/**\n * @title Tree with nested nodes\n */\n@Component({\n  selector: 'tree-nested-overview-example',\n  templateUrl: 'tree-nested-overview-example.html',\n  styleUrls: ['tree-nested-overview-example.css'],\n})\nexport class TreeNestedOverviewExample {\n  treeControl = new NestedTreeControl<FoodNode>(node => node.children);\n  dataSource = new MatTreeNestedDataSource<FoodNode>();\n\n  constructor() {\n    this.dataSource.data = TREE_DATA;\n  }\n\n  hasChild = (_: number, node: FoodNode) => !!node.children && node.children.length > 0;\n}\n","<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\" class=\"example-tree\">\n  <!-- This is the tree node template for leaf nodes -->\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodeToggle>\n    <li class=\"mat-tree-node\">\n      <!-- use a disabled button to provide padding for tree leaf -->\n      <button mat-icon-button disabled></button>\n      {{node.name}}\n    </li>\n  </mat-tree-node>\n  <!-- This is the tree node template for expandable nodes -->\n  <mat-nested-tree-node *matTreeNodeDef=\"let node; when: hasChild\">\n    <li>\n      <div class=\"mat-tree-node\">\n        <button mat-icon-button matTreeNodeToggle\n                [attr.aria-label]=\"'toggle ' + node.name\">\n          <mat-icon class=\"mat-icon-rtl-mirror\">\n            {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n          </mat-icon>\n        </button>\n        {{node.name}}\n      </div>\n      <ul [class.example-tree-invisible]=\"!treeControl.isExpanded(node)\">\n        <ng-container matTreeNodeOutlet></ng-container>\n      </ul>\n    </li>\n  </mat-nested-tree-node>\n</mat-tree>\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatTreeModule} from '@angular/material/tree';\nimport {TreeChecklistExample} from './tree-checklist/tree-checklist-example';\nimport {TreeDynamicExample} from './tree-dynamic/tree-dynamic-example';\nimport {TreeFlatOverviewExample} from './tree-flat-overview/tree-flat-overview-example';\nimport {TreeLoadmoreExample} from './tree-loadmore/tree-loadmore-example';\nimport {TreeNestedOverviewExample} from './tree-nested-overview/tree-nested-overview-example';\n\nexport {\n  TreeChecklistExample,\n  TreeDynamicExample,\n  TreeFlatOverviewExample,\n  TreeLoadmoreExample,\n  TreeNestedOverviewExample,\n};\n\nconst EXAMPLES = [\n  TreeChecklistExample,\n  TreeDynamicExample,\n  TreeFlatOverviewExample,\n  TreeLoadmoreExample,\n  TreeNestedOverviewExample,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatIconModule,\n    MatInputModule,\n    MatProgressBarModule,\n    MatTreeModule,\n  ],\n  declarations: EXAMPLES,\n  exports: EXAMPLES,\n  entryComponents: EXAMPLES,\n})\nexport class TreeExamplesModule {\n}\n"],"names":["i0.ɵɵelementStart","i0.ɵɵelement","i0.ɵɵlistener","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵproperty","i0.ɵɵtextInterpolate","i0.ɵɵattribute","i0.ɵɵtextInterpolate1","i0.ɵɵtemplate","TREE_DATA","i0.ɵɵelementContainer","i0.ɵɵclassProp","FoodNode"],"mappings":"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"}