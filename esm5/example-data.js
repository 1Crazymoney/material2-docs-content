import { __read, __spread } from "tslib";
// The example-module file will be auto-generated. As soon as the
// examples are being compiled, the module file will be generated.
import { EXAMPLE_COMPONENTS } from './example-module';
/**
 * Example data with information about component name, selector, files used in example, and path to
 * examples.
 */
var ExampleData = /** @class */ (function () {
    function ExampleData(example) {
        var _a;
        if (!example || !EXAMPLE_COMPONENTS.hasOwnProperty(example)) {
            return;
        }
        var exampleConfig = EXAMPLE_COMPONENTS[example];
        // TODO(tinayuangao): Do not hard-code extensions
        this.exampleFiles = ['html', 'ts', 'css'].map(function (extension) { return example + "-example." + extension; });
        this.selectorName = this.indexFilename = example + "-example";
        if (exampleConfig.additionalFiles) {
            (_a = this.exampleFiles).push.apply(_a, __spread(exampleConfig.additionalFiles));
        }
        var exampleName = example.replace(/(?:^\w|\b\w)/g, function (letter) { return letter.toUpperCase(); });
        this.description = exampleConfig.title || exampleName.replace(/[\-]+/g, ' ') + ' Example';
        this.componentName = exampleConfig.selectorName ||
            exampleName.replace(/[\-]+/g, '') + 'Example';
    }
    return ExampleData;
}());
export { ExampleData };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhhbXBsZS1kYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMtZXhhbXBsZXMvZXhhbXBsZS1kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxpRUFBaUU7QUFDakUsa0VBQWtFO0FBQ2xFLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBRXBEOzs7R0FHRztBQUNIO0lBb0JFLHFCQUFZLE9BQWU7O1FBQ3pCLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDM0QsT0FBTztTQUNSO1FBRUQsSUFBTSxhQUFhLEdBQUcsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFbEQsaURBQWlEO1FBQ2pELElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLFNBQVMsSUFBSSxPQUFHLE9BQU8saUJBQVksU0FBVyxFQUFqQyxDQUFpQyxDQUFDLENBQUM7UUFDOUYsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsYUFBYSxHQUFNLE9BQU8sYUFBVSxDQUFDO1FBRTlELElBQUksYUFBYSxDQUFDLGVBQWUsRUFBRTtZQUNqQyxDQUFBLEtBQUEsSUFBSSxDQUFDLFlBQVksQ0FBQSxDQUFDLElBQUksb0JBQUksYUFBYSxDQUFDLGVBQWUsR0FBRTtTQUMxRDtRQUVELElBQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLFdBQVcsRUFBRSxFQUFwQixDQUFvQixDQUFDLENBQUM7UUFFckYsSUFBSSxDQUFDLFdBQVcsR0FBRyxhQUFhLENBQUMsS0FBSyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQztRQUMxRixJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQyxZQUFZO1lBQ3pCLFdBQVcsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQztJQUN0RSxDQUFDO0lBQ0gsa0JBQUM7QUFBRCxDQUFDLEFBekNELElBeUNDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIGV4YW1wbGUtbW9kdWxlIGZpbGUgd2lsbCBiZSBhdXRvLWdlbmVyYXRlZC4gQXMgc29vbiBhcyB0aGVcbi8vIGV4YW1wbGVzIGFyZSBiZWluZyBjb21waWxlZCwgdGhlIG1vZHVsZSBmaWxlIHdpbGwgYmUgZ2VuZXJhdGVkLlxuaW1wb3J0IHtFWEFNUExFX0NPTVBPTkVOVFN9IGZyb20gJy4vZXhhbXBsZS1tb2R1bGUnO1xuXG4vKipcbiAqIEV4YW1wbGUgZGF0YSB3aXRoIGluZm9ybWF0aW9uIGFib3V0IGNvbXBvbmVudCBuYW1lLCBzZWxlY3RvciwgZmlsZXMgdXNlZCBpbiBleGFtcGxlLCBhbmQgcGF0aCB0b1xuICogZXhhbXBsZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBFeGFtcGxlRGF0YSB7XG5cbiAgLyoqIERlc2NyaXB0aW9uIG9mIHRoZSBleGFtcGxlLiAqL1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuXG4gIC8qKiBMaXN0IG9mIGZpbGVzIHRoYXQgYXJlIHBhcnQgb2YgdGhpcyBleGFtcGxlLiAqL1xuICBleGFtcGxlRmlsZXM6IHN0cmluZ1tdO1xuXG4gIC8qKiBTZWxlY3RvciBuYW1lIG9mIHRoZSBleGFtcGxlIGNvbXBvbmVudC4gKi9cbiAgc2VsZWN0b3JOYW1lOiBzdHJpbmc7XG5cbiAgLyoqIE5hbWUgb2YgdGhlIGZpbGUgdGhhdCBjb250YWlucyB0aGUgZXhhbXBsZSBjb21wb25lbnQuICovXG4gIGluZGV4RmlsZW5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogTmFtZSBvZiB0aGUgZXhhbXBsZSBjb21wb25lbnQuIEZvciBleGFtcGxlcyB3aXRoIG11bHRpcGxlIGNvbXBvbmVudHMsIHRoaXMgcHJvcGVydHkgd2lsbFxuICAgKiBpbmNsdWRlIG11bHRpcGxlIGNvbXBvbmVudHMgdGhhdCBhcmUgY29tbWEgc2VwYXJhdGVkIChlLmcuIGRpYWxvZy1vdmVydmlldylcbiAgICovXG4gIGNvbXBvbmVudE5hbWU6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihleGFtcGxlOiBzdHJpbmcpIHtcbiAgICBpZiAoIWV4YW1wbGUgfHwgIUVYQU1QTEVfQ09NUE9ORU5UUy5oYXNPd25Qcm9wZXJ0eShleGFtcGxlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGV4YW1wbGVDb25maWcgPSBFWEFNUExFX0NPTVBPTkVOVFNbZXhhbXBsZV07XG5cbiAgICAvLyBUT0RPKHRpbmF5dWFuZ2FvKTogRG8gbm90IGhhcmQtY29kZSBleHRlbnNpb25zXG4gICAgdGhpcy5leGFtcGxlRmlsZXMgPSBbJ2h0bWwnLCAndHMnLCAnY3NzJ10ubWFwKGV4dGVuc2lvbiA9PiBgJHtleGFtcGxlfS1leGFtcGxlLiR7ZXh0ZW5zaW9ufWApO1xuICAgIHRoaXMuc2VsZWN0b3JOYW1lID0gdGhpcy5pbmRleEZpbGVuYW1lID0gYCR7ZXhhbXBsZX0tZXhhbXBsZWA7XG5cbiAgICBpZiAoZXhhbXBsZUNvbmZpZy5hZGRpdGlvbmFsRmlsZXMpIHtcbiAgICAgIHRoaXMuZXhhbXBsZUZpbGVzLnB1c2goLi4uZXhhbXBsZUNvbmZpZy5hZGRpdGlvbmFsRmlsZXMpO1xuICAgIH1cblxuICAgIGNvbnN0IGV4YW1wbGVOYW1lID0gZXhhbXBsZS5yZXBsYWNlKC8oPzpeXFx3fFxcYlxcdykvZywgbGV0dGVyID0+IGxldHRlci50b1VwcGVyQ2FzZSgpKTtcblxuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBleGFtcGxlQ29uZmlnLnRpdGxlIHx8IGV4YW1wbGVOYW1lLnJlcGxhY2UoL1tcXC1dKy9nLCAnICcpICsgJyBFeGFtcGxlJztcbiAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBleGFtcGxlQ29uZmlnLnNlbGVjdG9yTmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICBleGFtcGxlTmFtZS5yZXBsYWNlKC9bXFwtXSsvZywgJycpICsgJ0V4YW1wbGUnO1xuICB9XG59XG4iXX0=