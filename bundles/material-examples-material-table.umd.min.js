!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/common"),require("@angular/core"),require("@angular/material/button"),require("@angular/material/button-toggle"),require("@angular/material/checkbox"),require("@angular/material/icon"),require("@angular/material/input"),require("@angular/material/paginator"),require("@angular/material/progress-spinner"),require("@angular/material/sort"),require("@angular/material/table"),require("@angular/animations"),require("@angular/common/http"),require("rxjs"),require("rxjs/operators"),require("@angular/cdk/collections")):"function"==typeof define&&define.amd?define("@angular/material-examples/material/table",["exports","@angular/common","@angular/core","@angular/material/button","@angular/material/button-toggle","@angular/material/checkbox","@angular/material/icon","@angular/material/input","@angular/material/paginator","@angular/material/progress-spinner","@angular/material/sort","@angular/material/table","@angular/animations","@angular/common/http","rxjs","rxjs/operators","@angular/cdk/collections"],t):t(((e=e||self).ng=e.ng||{},e.ng.materialExamples=e.ng.materialExamples||{},e.ng.materialExamples.material=e.ng.materialExamples.material||{},e.ng.materialExamples.material.table={}),e.ng.common,e.ng.core,e.ng.material.button,e.ng.material.buttonToggle,e.ng.material.checkbox,e.ng.material.icon,e.ng.material.input,e.ng.material.paginator,e.ng.material.progressSpinner,e.ng.material.sort,e.ng.material.table,e.ng.animations,e.ng.common.http,e.rxjs,e.rxjs.operators,e.ng.cdk.collections)}(this,function(e,t,n,o,a,l,i,m,r,s,c,d,u,h,g,p,b){"use strict";var y=[{position:1,name:"Hydrogen",weight:1.0079,symbol:"H"},{position:2,name:"Helium",weight:4.0026,symbol:"He"},{position:3,name:"Lithium",weight:6.941,symbol:"Li"},{position:4,name:"Beryllium",weight:9.0122,symbol:"Be"},{position:5,name:"Boron",weight:10.811,symbol:"B"},{position:6,name:"Carbon",weight:12.0107,symbol:"C"},{position:7,name:"Nitrogen",weight:14.0067,symbol:"N"},{position:8,name:"Oxygen",weight:15.9994,symbol:"O"},{position:9,name:"Fluorine",weight:18.9984,symbol:"F"},{position:10,name:"Neon",weight:20.1797,symbol:"Ne"}],f=function(){function e(){this.displayedColumns=["position","name","weight","symbol"],this.dataSource=y}return e.decorators=[{type:n.Component,args:[{selector:"table-basic-flex-example",template:'<mat-table [dataSource]="dataSource" class="mat-elevation-z8">\n  \x3c!-- Position Column --\x3e\n  <ng-container matColumnDef="position">\n    <mat-header-cell *matHeaderCellDef> No. </mat-header-cell>\n    <mat-cell *matCellDef="let element"> {{element.position}} </mat-cell>\n  </ng-container>\n\n  \x3c!-- Name Column --\x3e\n  <ng-container matColumnDef="name">\n    <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\n    <mat-cell *matCellDef="let element"> {{element.name}} </mat-cell>\n  </ng-container>\n\n  \x3c!-- Weight Column --\x3e\n  <ng-container matColumnDef="weight">\n    <mat-header-cell *matHeaderCellDef> Weight </mat-header-cell>\n    <mat-cell *matCellDef="let element"> {{element.weight}} </mat-cell>\n  </ng-container>\n\n  \x3c!-- Symbol Column --\x3e\n  <ng-container matColumnDef="symbol">\n    <mat-header-cell *matHeaderCellDef> Symbol </mat-header-cell>\n    <mat-cell *matCellDef="let element"> {{element.symbol}} </mat-cell>\n  </ng-container>\n\n  <mat-header-row *matHeaderRowDef="displayedColumns"></mat-header-row>\n  <mat-row *matRowDef="let row; columns: displayedColumns;"></mat-row>\n</mat-table>',styles:["table {\n  width: 100%;\n}\n"]}]}],e}(),w=[{position:1,name:"Hydrogen",weight:1.0079,symbol:"H"},{position:2,name:"Helium",weight:4.0026,symbol:"He"},{position:3,name:"Lithium",weight:6.941,symbol:"Li"},{position:4,name:"Beryllium",weight:9.0122,symbol:"Be"},{position:5,name:"Boron",weight:10.811,symbol:"B"},{position:6,name:"Carbon",weight:12.0107,symbol:"C"},{position:7,name:"Nitrogen",weight:14.0067,symbol:"N"},{position:8,name:"Oxygen",weight:15.9994,symbol:"O"},{position:9,name:"Fluorine",weight:18.9984,symbol:"F"},{position:10,name:"Neon",weight:20.1797,symbol:"Ne"}],C=function(){function e(){this.displayedColumns=["position","name","weight","symbol"],this.dataSource=w}return e.decorators=[{type:n.Component,args:[{selector:"table-basic-example",template:'<table mat-table [dataSource]="dataSource" class="mat-elevation-z8">\n\n  \x3c!--- Note that these columns can be defined in any order.\n        The actual rendered columns are set as a property on the row definition" --\x3e\n\n  \x3c!-- Position Column --\x3e\n  <ng-container matColumnDef="position">\n    <th mat-header-cell *matHeaderCellDef> No. </th>\n    <td mat-cell *matCellDef="let element"> {{element.position}} </td>\n  </ng-container>\n\n  \x3c!-- Name Column --\x3e\n  <ng-container matColumnDef="name">\n    <th mat-header-cell *matHeaderCellDef> Name </th>\n    <td mat-cell *matCellDef="let element"> {{element.name}} </td>\n  </ng-container>\n\n  \x3c!-- Weight Column --\x3e\n  <ng-container matColumnDef="weight">\n    <th mat-header-cell *matHeaderCellDef> Weight </th>\n    <td mat-cell *matCellDef="let element"> {{element.weight}} </td>\n  </ng-container>\n\n  \x3c!-- Symbol Column --\x3e\n  <ng-container matColumnDef="symbol">\n    <th mat-header-cell *matHeaderCellDef> Symbol </th>\n    <td mat-cell *matCellDef="let element"> {{element.symbol}} </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>\n  <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>\n</table>\n\n',styles:["table {\n  width: 100%;\n}\n"]}]}],e}(),x=[{position:1,name:"Hydrogen",weight:1.0079,symbol:"H"},{position:2,name:"Helium",weight:4.0026,symbol:"He"},{position:3,name:"Lithium",weight:6.941,symbol:"Li"},{position:4,name:"Beryllium",weight:9.0122,symbol:"Be"},{position:5,name:"Boron",weight:10.811,symbol:"B"},{position:6,name:"Carbon",weight:12.0107,symbol:"C"},{position:7,name:"Nitrogen",weight:14.0067,symbol:"N"},{position:8,name:"Oxygen",weight:15.9994,symbol:"O"},{position:9,name:"Fluorine",weight:18.9984,symbol:"F"},{position:10,name:"Neon",weight:20.1797,symbol:"Ne"}],D=function(){function e(){this.displayedColumns=["name","weight","symbol","position"],this.columnsToDisplay=this.displayedColumns.slice(),this.data=x}return e.prototype.addColumn=function(){var e=Math.floor(Math.random()*this.displayedColumns.length);this.columnsToDisplay.push(this.displayedColumns[e])},e.prototype.removeColumn=function(){this.columnsToDisplay.length&&this.columnsToDisplay.pop()},e.prototype.shuffle=function(){for(var e=this.columnsToDisplay.length;0!==e;){var t=Math.floor(Math.random()*e),n=this.columnsToDisplay[e-=1];this.columnsToDisplay[e]=this.columnsToDisplay[t],this.columnsToDisplay[t]=n}},e.decorators=[{type:n.Component,args:[{selector:"table-dynamic-columns-example",template:'<button mat-raised-button (click)="addColumn()"> Add column </button>\n<button mat-raised-button (click)="removeColumn()"> Remove column </button>\n<button mat-raised-button (click)="shuffle()"> Shuffle </button>\n\n<table mat-table [dataSource]="data" class="mat-elevation-z8">\n  <ng-container [matColumnDef]="column" *ngFor="let column of displayedColumns">\n    <th mat-header-cell *matHeaderCellDef> {{column}} </th>\n    <td mat-cell *matCellDef="let element"> {{element[column]}} </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef="columnsToDisplay"></tr>\n  <tr mat-row *matRowDef="let row; columns: columnsToDisplay;"></tr>\n</table>\n',styles:["table {\n  width: 100%;\n}\n\nbutton {\n  margin: 16px 8px;\n}\n"]}]}],e}(),H=function(){function e(){this.dataSource=S,this.columnsToDisplay=["name","weight","symbol","position"]}return e.decorators=[{type:n.Component,args:[{selector:"table-expandable-rows-example",template:'<table mat-table\n       [dataSource]="dataSource" multiTemplateDataRows\n       class="mat-elevation-z8">\n  <ng-container matColumnDef="{{column}}" *ngFor="let column of columnsToDisplay">\n    <th mat-header-cell *matHeaderCellDef> {{column}} </th>\n    <td mat-cell *matCellDef="let element"> {{element[column]}} </td>\n  </ng-container>\n\n  \x3c!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns --\x3e\n  <ng-container matColumnDef="expandedDetail">\n    <td mat-cell *matCellDef="let element" [attr.colspan]="columnsToDisplay.length">\n      <div class="example-element-detail"\n           [@detailExpand]="element == expandedElement ? \'expanded\' : \'collapsed\'">\n        <div class="example-element-diagram">\n          <div class="example-element-position"> {{element.position}} </div>\n          <div class="example-element-symbol"> {{element.symbol}} </div>\n          <div class="example-element-name"> {{element.name}} </div>\n          <div class="example-element-weight"> {{element.weight}} </div>\n        </div>\n        <div class="example-element-description">\n          {{element.description}}\n          <span class="example-element-description-attribution"> -- Wikipedia </span>\n        </div>\n      </div>\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef="columnsToDisplay"></tr>\n  <tr mat-row *matRowDef="let element; columns: columnsToDisplay;"\n      class="example-element-row"\n      [class.example-expanded-row]="expandedElement === element"\n      (click)="expandedElement = expandedElement === element ? null : element">\n  </tr>\n  <tr mat-row *matRowDef="let row; columns: [\'expandedDetail\']" class="example-detail-row"></tr>\n</table>\n',animations:[u.trigger("detailExpand",[u.state("collapsed",u.style({height:"0px",minHeight:"0"})),u.state("expanded",u.style({height:"*"})),u.transition("expanded <=> collapsed",u.animate("225ms cubic-bezier(0.4, 0.0, 0.2, 1)"))])],styles:["table {\n  width: 100%;\n}\n\ntr.example-detail-row {\n  height: 0;\n}\n\ntr.example-element-row:not(.example-expanded-row):hover {\n  background: #777;\n}\n\ntr.example-element-row:not(.example-expanded-row):active {\n  background: #efefef;\n}\n\n.example-element-row td {\n  border-bottom-width: 0;\n}\n\n.example-element-detail {\n  overflow: hidden;\n  display: flex;\n}\n\n.example-element-diagram {\n  min-width: 80px;\n  border: 2px solid black;\n  padding: 8px;\n  font-weight: lighter;\n  margin: 8px 0;\n  height: 104px;\n}\n\n.example-element-symbol {\n  font-weight: bold;\n  font-size: 40px;\n  line-height: normal;\n}\n\n.example-element-description {\n  padding: 16px;\n}\n\n.example-element-description-attribution {\n  opacity: 0.5;\n}\n"]}]}],e}(),S=[{position:1,name:"Hydrogen",weight:1.0079,symbol:"H",description:"Hydrogen is a chemical element with symbol H and atomic number 1. With a standard\n        atomic weight of 1.008, hydrogen is the lightest element on the periodic table."},{position:2,name:"Helium",weight:4.0026,symbol:"He",description:"Helium is a chemical element with symbol He and atomic number 2. It is a\n        colorless, odorless, tasteless, non-toxic, inert, monatomic gas, the first in the noble gas\n        group in the periodic table. Its boiling point is the lowest among all the elements."},{position:3,name:"Lithium",weight:6.941,symbol:"Li",description:"Lithium is a chemical element with symbol Li and atomic number 3. It is a soft,\n        silvery-white alkali metal. Under standard conditions, it is the lightest metal and the\n        lightest solid element."},{position:4,name:"Beryllium",weight:9.0122,symbol:"Be",description:"Beryllium is a chemical element with symbol Be and atomic number 4. It is a\n        relatively rare element in the universe, usually occurring as a product of the spallation of\n        larger atomic nuclei that have collided with cosmic rays."},{position:5,name:"Boron",weight:10.811,symbol:"B",description:"Boron is a chemical element with symbol B and atomic number 5. Produced entirely\n        by cosmic ray spallation and supernovae and not by stellar nucleosynthesis, it is a\n        low-abundance element in the Solar system and in the Earth's crust."},{position:6,name:"Carbon",weight:12.0107,symbol:"C",description:"Carbon is a chemical element with symbol C and atomic number 6. It is nonmetallic\n        and tetravalent—making four electrons available to form covalent chemical bonds. It belongs\n        to group 14 of the periodic table."},{position:7,name:"Nitrogen",weight:14.0067,symbol:"N",description:"Nitrogen is a chemical element with symbol N and atomic number 7. It was first\n        discovered and isolated by Scottish physician Daniel Rutherford in 1772."},{position:8,name:"Oxygen",weight:15.9994,symbol:"O",description:"Oxygen is a chemical element with symbol O and atomic number 8. It is a member of\n         the chalcogen group on the periodic table, a highly reactive nonmetal, and an oxidizing\n         agent that readily forms oxides with most elements as well as with other compounds."},{position:9,name:"Fluorine",weight:18.9984,symbol:"F",description:"Fluorine is a chemical element with symbol F and atomic number 9. It is the\n        lightest halogen and exists as a highly toxic pale yellow diatomic gas at standard\n        conditions."},{position:10,name:"Neon",weight:20.1797,symbol:"Ne",description:"Neon is a chemical element with symbol Ne and atomic number 10. It is a noble gas.\n        Neon is a colorless, odorless, inert monatomic gas under standard conditions, with about\n        two-thirds the density of air."}],v=[{position:1,name:"Hydrogen",weight:1.0079,symbol:"H"},{position:2,name:"Helium",weight:4.0026,symbol:"He"},{position:3,name:"Lithium",weight:6.941,symbol:"Li"},{position:4,name:"Beryllium",weight:9.0122,symbol:"Be"},{position:5,name:"Boron",weight:10.811,symbol:"B"},{position:6,name:"Carbon",weight:12.0107,symbol:"C"},{position:7,name:"Nitrogen",weight:14.0067,symbol:"N"},{position:8,name:"Oxygen",weight:15.9994,symbol:"O"},{position:9,name:"Fluorine",weight:18.9984,symbol:"F"},{position:10,name:"Neon",weight:20.1797,symbol:"Ne"}],k=function(){function e(){this.displayedColumns=["position","name","weight","symbol"],this.dataSource=new d.MatTableDataSource(v)}return e.prototype.applyFilter=function(e){this.dataSource.filter=e.trim().toLowerCase()},e.decorators=[{type:n.Component,args:[{selector:"table-filtering-example",template:'<mat-form-field>\n  <input matInput (keyup)="applyFilter($event.target.value)" placeholder="Filter">\n</mat-form-field>\n\n<table mat-table [dataSource]="dataSource" class="mat-elevation-z8">\n\n  \x3c!-- Position Column --\x3e\n  <ng-container matColumnDef="position">\n    <th mat-header-cell *matHeaderCellDef> No. </th>\n    <td mat-cell *matCellDef="let element"> {{element.position}} </td>\n  </ng-container>\n\n  \x3c!-- Name Column --\x3e\n  <ng-container matColumnDef="name">\n    <th mat-header-cell *matHeaderCellDef> Name </th>\n    <td mat-cell *matCellDef="let element"> {{element.name}} </td>\n  </ng-container>\n\n  \x3c!-- Weight Column --\x3e\n  <ng-container matColumnDef="weight">\n    <th mat-header-cell *matHeaderCellDef> Weight </th>\n    <td mat-cell *matCellDef="let element"> {{element.weight}} </td>\n  </ng-container>\n\n  \x3c!-- Symbol Column --\x3e\n  <ng-container matColumnDef="symbol">\n    <th mat-header-cell *matHeaderCellDef> Symbol </th>\n    <td mat-cell *matCellDef="let element"> {{element.symbol}} </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>\n  <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>\n</table>\n',styles:["/* Structure */\ntable {\n  width: 100%;\n}\n\n.mat-form-field {\n  font-size: 14px;\n  width: 100%;\n}\n"]}]}],e}(),N=function(){function e(){this.displayedColumns=["item","cost"],this.transactions=[{item:"Beach ball",cost:4},{item:"Towel",cost:5},{item:"Frisbee",cost:2},{item:"Sunscreen",cost:4},{item:"Cooler",cost:25},{item:"Swim suit",cost:15}]}return e.prototype.getTotalCost=function(){return this.transactions.map(function(e){return e.cost}).reduce(function(e,t){return e+t},0)},e.decorators=[{type:n.Component,args:[{selector:"table-footer-row-example",template:'<table mat-table [dataSource]="transactions" class="mat-elevation-z8">\n  \x3c!-- Item Column --\x3e\n  <ng-container matColumnDef="item">\n    <th mat-header-cell *matHeaderCellDef> Item </th>\n    <td mat-cell *matCellDef="let transaction"> {{transaction.item}} </td>\n    <td mat-footer-cell *matFooterCellDef> Total </td>\n  </ng-container>\n\n  \x3c!-- Cost Column --\x3e\n  <ng-container matColumnDef="cost">\n    <th mat-header-cell *matHeaderCellDef> Cost </th>\n    <td mat-cell *matCellDef="let transaction"> {{transaction.cost | currency}} </td>\n    <td mat-footer-cell *matFooterCellDef> {{getTotalCost() | currency}} </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>\n  <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>\n  <tr mat-footer-row *matFooterRowDef="displayedColumns"></tr>\n</table>\n',styles:["table {\n  width: 100%;\n}\n\ntr.mat-footer-row {\n  font-weight: bold;\n}\n"]}]}],e}(),F=function(){function e(e){this._httpClient=e,this.displayedColumns=["created","state","number","title"],this.data=[],this.resultsLength=0,this.isLoadingResults=!0,this.isRateLimitReached=!1}return e.prototype.ngAfterViewInit=function(){var e=this;this.exampleDatabase=new R(this._httpClient),this.sort.sortChange.subscribe(function(){return e.paginator.pageIndex=0}),g.merge(this.sort.sortChange,this.paginator.page).pipe(p.startWith({}),p.switchMap(function(){return e.isLoadingResults=!0,e.exampleDatabase.getRepoIssues(e.sort.active,e.sort.direction,e.paginator.pageIndex)}),p.map(function(t){return e.isLoadingResults=!1,e.isRateLimitReached=!1,e.resultsLength=t.total_count,t.items}),p.catchError(function(){return e.isLoadingResults=!1,e.isRateLimitReached=!0,g.of([])})).subscribe(function(t){return e.data=t})},e.decorators=[{type:n.Component,args:[{selector:"table-http-example",template:'<div class="example-container mat-elevation-z8">\n  <div class="example-loading-shade"\n       *ngIf="isLoadingResults || isRateLimitReached">\n    <mat-spinner *ngIf="isLoadingResults"></mat-spinner>\n    <div class="example-rate-limit-reached" *ngIf="isRateLimitReached">\n      GitHub\'s API rate limit has been reached. It will be reset in one minute.\n    </div>\n  </div>\n\n  <div class="example-table-container">\n\n    <table mat-table [dataSource]="data" class="example-table"\n           matSort matSortActive="created" matSortDisableClear matSortDirection="desc">\n      \x3c!-- Number Column --\x3e\n      <ng-container matColumnDef="number">\n        <th mat-header-cell *matHeaderCellDef>#</th>\n        <td mat-cell *matCellDef="let row">{{row.number}}</td>\n      </ng-container>\n\n      \x3c!-- Title Column --\x3e\n      <ng-container matColumnDef="title">\n        <th mat-header-cell *matHeaderCellDef>Title</th>\n        <td mat-cell *matCellDef="let row">{{row.title}}</td>\n      </ng-container>\n\n      \x3c!-- State Column --\x3e\n      <ng-container matColumnDef="state">\n        <th mat-header-cell *matHeaderCellDef>State</th>\n        <td mat-cell *matCellDef="let row">{{row.state}}</td>\n      </ng-container>\n\n      \x3c!-- Created Column --\x3e\n      <ng-container matColumnDef="created">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\n          Created\n        </th>\n        <td mat-cell *matCellDef="let row">{{row.created_at | date}}</td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>\n      <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>\n    </table>\n  </div>\n\n  <mat-paginator [length]="resultsLength" [pageSize]="30"></mat-paginator>\n</div>\n',styles:["/* Structure */\n.example-container {\n  position: relative;\n  min-height: 200px;\n}\n\n.example-table-container {\n  position: relative;\n  max-height: 400px;\n  overflow: auto;\n}\n\ntable {\n  width: 100%;\n}\n\n.example-loading-shade {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 56px;\n  right: 0;\n  background: rgba(0, 0, 0, 0.15);\n  z-index: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.example-rate-limit-reached {\n  color: #980000;\n  max-width: 360px;\n  text-align: center;\n}\n\n/* Column Widths */\n.mat-column-number,\n.mat-column-state {\n  max-width: 64px;\n}\n\n.mat-column-created {\n  max-width: 124px;\n}\n"]}]}],e.ctorParameters=function(){return[{type:h.HttpClient}]},e.propDecorators={paginator:[{type:n.ViewChild,args:[r.MatPaginator,{static:!1}]}],sort:[{type:n.ViewChild,args:[c.MatSort,{static:!1}]}]},e}(),R=function(){function e(e){this._httpClient=e}return e.prototype.getRepoIssues=function(e,t,n){return this._httpClient.get("https://api.github.com/search/issues?q=repo:angular/components&sort="+e+"&order="+t+"&page="+(n+1))},e}(),T=function(){function e(){this.displayedColumns=["item","cost"],this.transactions=[{item:"Beach ball",cost:4},{item:"Towel",cost:5},{item:"Frisbee",cost:2},{item:"Sunscreen",cost:4},{item:"Cooler",cost:25},{item:"Swim suit",cost:15}]}return e.prototype.getTotalCost=function(){return this.transactions.map(function(e){return e.cost}).reduce(function(e,t){return e+t},0)},e.decorators=[{type:n.Component,args:[{selector:"table-multiple-header-footer-example",template:'<table mat-table [dataSource]="transactions" class="mat-elevation-z8">\n  \x3c!-- Item Column --\x3e\n  <ng-container matColumnDef="item">\n    <th mat-header-cell *matHeaderCellDef> Item </th>\n    <td mat-cell *matCellDef="let transaction"> {{transaction.item}} </td>\n    <td mat-footer-cell *matFooterCellDef> Total </td>\n  </ng-container>\n\n  \x3c!-- Cost Column --\x3e\n  <ng-container matColumnDef="cost">\n    <th mat-header-cell *matHeaderCellDef> Cost </th>\n    <td mat-cell *matCellDef="let transaction"> {{transaction.cost | currency}} </td>\n    <td mat-footer-cell *matFooterCellDef> {{getTotalCost() | currency}} </td>\n  </ng-container>\n\n  \x3c!-- Item Description Column --\x3e\n  <ng-container matColumnDef="item-description">\n    <th mat-header-cell *matHeaderCellDef> Name of the item purchased </th>\n  </ng-container>\n\n  \x3c!-- Cost Description Column --\x3e\n  <ng-container matColumnDef="cost-description">\n    <th mat-header-cell *matHeaderCellDef> Cost of the item in USD </th>\n  </ng-container>\n\n  \x3c!-- Disclaimer column --\x3e\n  <ng-container matColumnDef="disclaimer">\n    <td mat-footer-cell *matFooterCellDef colspan="2">\n      Please note that the cost of items displayed are completely and totally made up.\n    </td>\n  </ng-container>\n\n  \x3c!-- The table will render two header rows, one data row per data object, and two footer rows. --\x3e\n  <tr mat-header-row *matHeaderRowDef="displayedColumns"\n      class="example-first-header-row">\n  </tr>\n  <tr mat-header-row *matHeaderRowDef="[\'item-description\', \'cost-description\']"\n      class="example-second-header-row">\n  </tr>\n\n  <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>\n\n  <tr mat-footer-row *matFooterRowDef="displayedColumns" class="example-first-footer-row"></tr>\n  <tr mat-footer-row *matFooterRowDef="[\'disclaimer\']" class="example-second-footer-row"></tr>\n</table>\n',styles:["table {\n  width: 100%;\n}\n\n.example-first-header-row th {\n  border-bottom: none;\n}\n\n.example-second-header-row {\n  font-style: italic;\n}\n\n.example-first-footer-row {\n  font-weight: bold;\n}\n\n.example-second-footer-row td {\n  color: #900000;\n}\n"]}]}],e}(),B=["maroon","red","orange","yellow","olive","green","purple","fuchsia","lime","teal","aqua","blue","navy","black","gray"],M=["Maia","Asher","Olivia","Atticus","Amelia","Jack","Charlotte","Theodore","Isla","Oliver","Isabella","Jasper","Cora","Levi","Violet","Arthur","Mia","Thomas","Elizabeth"],L=function(){function e(){this.displayedColumns=["id","name","progress","color"];var e=Array.from({length:100},function(e,t){return function n(e){var t=M[Math.round(Math.random()*(M.length-1))]+" "+M[Math.round(Math.random()*(M.length-1))].charAt(0)+".";return{id:e.toString(),name:t,progress:Math.round(100*Math.random()).toString(),color:B[Math.round(Math.random()*(B.length-1))]}}(t+1)});this.dataSource=new d.MatTableDataSource(e)}return e.prototype.ngOnInit=function(){this.dataSource.paginator=this.paginator,this.dataSource.sort=this.sort},e.prototype.applyFilter=function(e){this.dataSource.filter=e.trim().toLowerCase(),this.dataSource.paginator&&this.dataSource.paginator.firstPage()},e.decorators=[{type:n.Component,args:[{selector:"table-overview-example",template:'<mat-form-field>\n  <input matInput (keyup)="applyFilter($event.target.value)" placeholder="Filter">\n</mat-form-field>\n\n<div class="mat-elevation-z8">\n  <table mat-table [dataSource]="dataSource" matSort>\n\n    \x3c!-- ID Column --\x3e\n    <ng-container matColumnDef="id">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> ID </th>\n      <td mat-cell *matCellDef="let row"> {{row.id}} </td>\n    </ng-container>\n\n    \x3c!-- Progress Column --\x3e\n    <ng-container matColumnDef="progress">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Progress </th>\n      <td mat-cell *matCellDef="let row"> {{row.progress}}% </td>\n    </ng-container>\n\n    \x3c!-- Name Column --\x3e\n    <ng-container matColumnDef="name">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\n      <td mat-cell *matCellDef="let row"> {{row.name}} </td>\n    </ng-container>\n\n    \x3c!-- Color Column --\x3e\n    <ng-container matColumnDef="color">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Color </th>\n      <td mat-cell *matCellDef="let row" [style.color]="row.color"> {{row.color}} </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>\n    <tr mat-row *matRowDef="let row; columns: displayedColumns;">\n    </tr>\n  </table>\n\n  <mat-paginator [pageSizeOptions]="[5, 10, 25, 100]"></mat-paginator>\n</div>\n',styles:["table {\n  width: 100%;\n}\n\n.mat-form-field {\n  font-size: 14px;\n  width: 100%;\n}\n\ntd, th {\n  width: 25%;\n}\n"]}]}],e.ctorParameters=function(){return[]},e.propDecorators={paginator:[{type:n.ViewChild,args:[r.MatPaginator,{static:!0}]}],sort:[{type:n.ViewChild,args:[c.MatSort,{static:!0}]}]},e}(),I=function(){function e(){this.displayedColumns=["position","name","weight","symbol"],this.dataSource=new d.MatTableDataSource(E)}return e.prototype.ngOnInit=function(){this.dataSource.paginator=this.paginator},e.decorators=[{type:n.Component,args:[{selector:"table-pagination-example",template:'<div class="mat-elevation-z8">\n  <table mat-table [dataSource]="dataSource">\n\n    \x3c!-- Position Column --\x3e\n    <ng-container matColumnDef="position">\n      <th mat-header-cell *matHeaderCellDef> No. </th>\n      <td mat-cell *matCellDef="let element"> {{element.position}} </td>\n    </ng-container>\n\n    \x3c!-- Name Column --\x3e\n    <ng-container matColumnDef="name">\n      <th mat-header-cell *matHeaderCellDef> Name </th>\n      <td mat-cell *matCellDef="let element"> {{element.name}} </td>\n    </ng-container>\n\n    \x3c!-- Weight Column --\x3e\n    <ng-container matColumnDef="weight">\n      <th mat-header-cell *matHeaderCellDef> Weight </th>\n      <td mat-cell *matCellDef="let element"> {{element.weight}} </td>\n    </ng-container>\n\n    \x3c!-- Symbol Column --\x3e\n    <ng-container matColumnDef="symbol">\n      <th mat-header-cell *matHeaderCellDef> Symbol </th>\n      <td mat-cell *matCellDef="let element"> {{element.symbol}} </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>\n    <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>\n  </table>\n\n  <mat-paginator [pageSizeOptions]="[5, 10, 20]" showFirstLastButtons></mat-paginator>\n</div>\n',styles:["table {\n  width: 100%;\n}\n"]}]}],e.propDecorators={paginator:[{type:n.ViewChild,args:[r.MatPaginator,{static:!0}]}]},e}(),E=[{position:1,name:"Hydrogen",weight:1.0079,symbol:"H"},{position:2,name:"Helium",weight:4.0026,symbol:"He"},{position:3,name:"Lithium",weight:6.941,symbol:"Li"},{position:4,name:"Beryllium",weight:9.0122,symbol:"Be"},{position:5,name:"Boron",weight:10.811,symbol:"B"},{position:6,name:"Carbon",weight:12.0107,symbol:"C"},{position:7,name:"Nitrogen",weight:14.0067,symbol:"N"},{position:8,name:"Oxygen",weight:15.9994,symbol:"O"},{position:9,name:"Fluorine",weight:18.9984,symbol:"F"},{position:10,name:"Neon",weight:20.1797,symbol:"Ne"},{position:11,name:"Sodium",weight:22.9897,symbol:"Na"},{position:12,name:"Magnesium",weight:24.305,symbol:"Mg"},{position:13,name:"Aluminum",weight:26.9815,symbol:"Al"},{position:14,name:"Silicon",weight:28.0855,symbol:"Si"},{position:15,name:"Phosphorus",weight:30.9738,symbol:"P"},{position:16,name:"Sulfur",weight:32.065,symbol:"S"},{position:17,name:"Chlorine",weight:35.453,symbol:"Cl"},{position:18,name:"Argon",weight:39.948,symbol:"Ar"},{position:19,name:"Potassium",weight:39.0983,symbol:"K"},{position:20,name:"Calcium",weight:40.078,symbol:"Ca"}],O=function(){function e(){this.displayedColumns=["$implicit","index","count","first","last","even","odd"],this.data=["one","two","three","four","five"]}return e.decorators=[{type:n.Component,args:[{selector:"table-row-context-example",template:'<table mat-table [dataSource]="data" class="mat-elevation-z8">\n  \x3c!-- Index Column --\x3e\n  <ng-container matColumnDef="$implicit">\n    <th mat-header-cell *matHeaderCellDef> $implicit </th>\n    <td mat-cell *matCellDef="let data"> {{data}} </td>\n  </ng-container>\n\n  \x3c!-- Index Column --\x3e\n  <ng-container matColumnDef="index">\n    <th mat-header-cell *matHeaderCellDef> index </th>\n    <td mat-cell *matCellDef="let index = index"> {{index}} </td>\n  </ng-container>\n\n  \x3c!-- Index Column --\x3e\n  <ng-container matColumnDef="count">\n    <th mat-header-cell *matHeaderCellDef> count </th>\n    <td mat-cell *matCellDef="let count = count"> {{count}} </td>\n  </ng-container>\n\n  \x3c!-- Index Column --\x3e\n  <ng-container matColumnDef="first">\n    <th mat-header-cell *matHeaderCellDef> first </th>\n    <td mat-cell *matCellDef="let first = first"> {{first}} </td>\n  </ng-container>\n\n  \x3c!-- Index Column --\x3e\n  <ng-container matColumnDef="last">\n    <th mat-header-cell *matHeaderCellDef> last </th>\n    <td mat-cell *matCellDef="let last = last"> {{last}} </td>\n  </ng-container>\n\n  \x3c!-- Index Column --\x3e\n  <ng-container matColumnDef="even">\n    <th mat-header-cell *matHeaderCellDef> even </th>\n    <td mat-cell *matCellDef="let even = even"> {{even}} </td>\n  </ng-container>\n\n  \x3c!-- Index Column --\x3e\n  <ng-container matColumnDef="odd">\n    <th mat-header-cell *matHeaderCellDef> odd </th>\n    <td mat-cell *matCellDef="let odd = odd"> {{odd}} </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>\n  <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>\n</table>\n',styles:["table {\n  width: 100%;\n}\n"]}]}],e}(),P=[{position:1,name:"Hydrogen",weight:1.0079,symbol:"H"},{position:2,name:"Helium",weight:4.0026,symbol:"He"},{position:3,name:"Lithium",weight:6.941,symbol:"Li"},{position:4,name:"Beryllium",weight:9.0122,symbol:"Be"},{position:5,name:"Boron",weight:10.811,symbol:"B"},{position:6,name:"Carbon",weight:12.0107,symbol:"C"},{position:7,name:"Nitrogen",weight:14.0067,symbol:"N"},{position:8,name:"Oxygen",weight:15.9994,symbol:"O"},{position:9,name:"Fluorine",weight:18.9984,symbol:"F"},{position:10,name:"Neon",weight:20.1797,symbol:"Ne"}],z=function(){function e(){this.displayedColumns=["select","position","name","weight","symbol"],this.dataSource=new d.MatTableDataSource(P),this.selection=new b.SelectionModel(!0,[])}return e.prototype.isAllSelected=function(){return this.selection.selected.length===this.dataSource.data.length},e.prototype.masterToggle=function(){var e=this;this.isAllSelected()?this.selection.clear():this.dataSource.data.forEach(function(t){return e.selection.select(t)})},e.prototype.checkboxLabel=function(e){return e?(this.selection.isSelected(e)?"deselect":"select")+" row "+(e.position+1):(this.isAllSelected()?"select":"deselect")+" all"},e.decorators=[{type:n.Component,args:[{selector:"table-selection-example",template:'<table mat-table [dataSource]="dataSource" class="mat-elevation-z8">\n\n  \x3c!-- Checkbox Column --\x3e\n  <ng-container matColumnDef="select">\n    <th mat-header-cell *matHeaderCellDef>\n      <mat-checkbox (change)="$event ? masterToggle() : null"\n                    [checked]="selection.hasValue() && isAllSelected()"\n                    [indeterminate]="selection.hasValue() && !isAllSelected()"\n                    [aria-label]="checkboxLabel()">\n      </mat-checkbox>\n    </th>\n    <td mat-cell *matCellDef="let row">\n      <mat-checkbox (click)="$event.stopPropagation()"\n                    (change)="$event ? selection.toggle(row) : null"\n                    [checked]="selection.isSelected(row)"\n                    [aria-label]="checkboxLabel(row)">\n      </mat-checkbox>\n    </td>\n  </ng-container>\n\n  \x3c!-- Position Column --\x3e\n  <ng-container matColumnDef="position">\n    <th mat-header-cell *matHeaderCellDef> No. </th>\n    <td mat-cell *matCellDef="let element"> {{element.position}} </td>\n  </ng-container>\n\n  \x3c!-- Name Column --\x3e\n  <ng-container matColumnDef="name">\n    <th mat-header-cell *matHeaderCellDef> Name </th>\n    <td mat-cell *matCellDef="let element"> {{element.name}} </td>\n  </ng-container>\n\n  \x3c!-- Weight Column --\x3e\n  <ng-container matColumnDef="weight">\n    <th mat-header-cell *matHeaderCellDef> Weight </th>\n    <td mat-cell *matCellDef="let element"> {{element.weight}} </td>\n  </ng-container>\n\n  \x3c!-- Symbol Column --\x3e\n  <ng-container matColumnDef="symbol">\n    <th mat-header-cell *matHeaderCellDef> Symbol </th>\n    <td mat-cell *matCellDef="let element"> {{element.symbol}} </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>\n  <tr mat-row *matRowDef="let row; columns: displayedColumns;"\n      (click)="selection.toggle(row)">\n  </tr>\n</table>\n',styles:["table {\n  width: 100%;\n}\n"]}]}],e}(),W=[{position:1,name:"Hydrogen",weight:1.0079,symbol:"H"},{position:2,name:"Helium",weight:4.0026,symbol:"He"},{position:3,name:"Lithium",weight:6.941,symbol:"Li"},{position:4,name:"Beryllium",weight:9.0122,symbol:"Be"},{position:5,name:"Boron",weight:10.811,symbol:"B"},{position:6,name:"Carbon",weight:12.0107,symbol:"C"},{position:7,name:"Nitrogen",weight:14.0067,symbol:"N"},{position:8,name:"Oxygen",weight:15.9994,symbol:"O"},{position:9,name:"Fluorine",weight:18.9984,symbol:"F"},{position:10,name:"Neon",weight:20.1797,symbol:"Ne"}],A=function(){function e(){this.displayedColumns=["position","name","weight","symbol"],this.dataSource=new d.MatTableDataSource(W)}return e.prototype.ngOnInit=function(){this.dataSource.sort=this.sort},e.decorators=[{type:n.Component,args:[{selector:"table-sorting-example",template:'<table mat-table [dataSource]="dataSource" matSort class="mat-elevation-z8">\n\n  \x3c!-- Position Column --\x3e\n  <ng-container matColumnDef="position">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> No. </th>\n    <td mat-cell *matCellDef="let element"> {{element.position}} </td>\n  </ng-container>\n\n  \x3c!-- Name Column --\x3e\n  <ng-container matColumnDef="name">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\n    <td mat-cell *matCellDef="let element"> {{element.name}} </td>\n  </ng-container>\n\n  \x3c!-- Weight Column --\x3e\n  <ng-container matColumnDef="weight">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Weight </th>\n    <td mat-cell *matCellDef="let element"> {{element.weight}} </td>\n  </ng-container>\n\n  \x3c!-- Symbol Column --\x3e\n  <ng-container matColumnDef="symbol">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Symbol </th>\n    <td mat-cell *matCellDef="let element"> {{element.symbol}} </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>\n  <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>\n</table>\n',styles:["table {\n  width: 100%;\n}\n\nth.mat-sort-header-sorted {\n  color: black;\n}\n"]}]}],e.propDecorators={sort:[{type:n.ViewChild,args:[c.MatSort,{static:!0}]}]},e}(),q=function(){function e(){this.displayedColumns=["name","position","weight","symbol","position","weight","symbol","star"],this.dataSource=V}return e.decorators=[{type:n.Component,args:[{selector:"table-sticky-columns-example",template:'<div class="example-container mat-elevation-z8">\n  <table mat-table [dataSource]="dataSource">\n\n    \x3c!-- Name Column --\x3e\n    <ng-container matColumnDef="name" sticky>\n      <th mat-header-cell *matHeaderCellDef> Name </th>\n      <td mat-cell *matCellDef="let element"> {{element.name}} </td>\n    </ng-container>\n\n    \x3c!-- Position Column --\x3e\n    <ng-container matColumnDef="position">\n      <th mat-header-cell *matHeaderCellDef> No. </th>\n      <td mat-cell *matCellDef="let element"> {{element.position}} </td>\n    </ng-container>\n\n    \x3c!-- Weight Column --\x3e\n    <ng-container matColumnDef="weight">\n      <th mat-header-cell *matHeaderCellDef> Weight </th>\n      <td mat-cell *matCellDef="let element"> {{element.weight}} </td>\n    </ng-container>\n\n    \x3c!-- Symbol Column --\x3e\n    <ng-container matColumnDef="symbol">\n      <th mat-header-cell *matHeaderCellDef> Symbol </th>\n      <td mat-cell *matCellDef="let element"> {{element.symbol}} </td>\n    </ng-container>\n\n    \x3c!-- Star Column --\x3e\n    <ng-container matColumnDef="star" stickyEnd>\n      <th mat-header-cell *matHeaderCellDef></th>\n      <td mat-cell *matCellDef="let element">\n        <mat-icon>more_vert</mat-icon>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>\n    <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>\n  </table>\n</div>\n',styles:[".example-container {\n  height: 400px;\n  width: 550px;\n  overflow: auto;\n}\n\ntable {\n  width: 800px;\n}\n\ntd.mat-column-star {\n  width: 20px;\n  padding-right: 8px;\n}\n\nth.mat-column-position, td.mat-column-position {\n  padding-left: 8px;\n}\n\n.mat-table-sticky:first-child {\n  border-right: 1px solid #e0e0e0;\n}\n\n.mat-table-sticky:last-child {\n  border-left: 1px solid #e0e0e0;\n}\n"]}]}],e}(),V=[{position:1,name:"Hydrogen",weight:1.0079,symbol:"H"},{position:2,name:"Helium",weight:4.0026,symbol:"He"},{position:3,name:"Lithium",weight:6.941,symbol:"Li"},{position:4,name:"Beryllium",weight:9.0122,symbol:"Be"},{position:5,name:"Boron",weight:10.811,symbol:"B"},{position:6,name:"Carbon",weight:12.0107,symbol:"C"},{position:7,name:"Nitrogen",weight:14.0067,symbol:"N"},{position:8,name:"Oxygen",weight:15.9994,symbol:"O"},{position:9,name:"Fluorine",weight:18.9984,symbol:"F"},{position:10,name:"Neon",weight:20.1797,symbol:"Ne"}],j=function(){function e(){this.displayedColumns=[],this.dataSource=_,this.tables=[0],this.displayedColumns.length=24,this.displayedColumns.fill("filler"),this.displayedColumns[0]="position",this.displayedColumns[1]="name",this.displayedColumns[22]="weight",this.displayedColumns[23]="symbol"}return e.prototype.isSticky=function(e,t){return-1!==(e.value||[]).indexOf(t)},e.decorators=[{type:n.Component,args:[{selector:"table-sticky-complex-flex-example",template:'<div>\n  <button mat-raised-button (click)="tables.push(tables.length)">Add table</button>\n  <button mat-raised-button (click)="tables.pop()">Remove table</button>\n</div>\n\n<div>\n  Sticky Headers:\n  <mat-button-toggle-group multiple [value]="[\'header-1\']"\n                           #stickyHeaders="matButtonToggleGroup"\n                           class="example-sticky-toggle-group">\n    <mat-button-toggle value="header-1"> Row 1 </mat-button-toggle>\n    <mat-button-toggle value="header-2"> Row 2 </mat-button-toggle>\n  </mat-button-toggle-group>\n</div>\n\n<div>\n  Sticky Footers:\n  <mat-button-toggle-group multiple [value]="[\'footer-1\']"\n                           #stickyFooters="matButtonToggleGroup"\n                           class="example-sticky-toggle-group">\n    <mat-button-toggle value="footer-1"> Row 1 </mat-button-toggle>\n    <mat-button-toggle value="footer-2"> Row 2 </mat-button-toggle>\n  </mat-button-toggle-group>\n</div>\n\n<div>\n  Sticky Columns:\n  <mat-button-toggle-group multiple [value]="[\'position\', \'symbol\']"\n                           #stickyColumns="matButtonToggleGroup"\n                           class="example-sticky-toggle-group">\n    <mat-button-toggle value="position"> Position </mat-button-toggle>\n    <mat-button-toggle value="name"> Name </mat-button-toggle>\n    <mat-button-toggle value="weight"> Weight </mat-button-toggle>\n    <mat-button-toggle value="symbol"> Symbol </mat-button-toggle>\n  </mat-button-toggle-group>\n</div>\n\n<div class="example-container mat-elevation-z8">\n  <mat-table [dataSource]="dataSource" *ngFor="let table of tables">\n    <ng-container matColumnDef="position" [sticky]="isSticky(stickyColumns, \'position\')">\n      <mat-header-cell *matHeaderCellDef> Position </mat-header-cell>\n      <mat-cell *matCellDef="let element"> {{element.position}} </mat-cell>\n      <mat-footer-cell *matFooterCellDef> Position Footer </mat-footer-cell>\n    </ng-container>\n\n    <ng-container matColumnDef="name" [sticky]="isSticky(stickyColumns, \'name\')">\n      <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\n      <mat-cell *matCellDef="let element"> {{element.name}} </mat-cell>\n      <mat-footer-cell *matFooterCellDef> Name Footer </mat-footer-cell>\n    </ng-container>\n\n    <ng-container matColumnDef="weight" [stickyEnd]="isSticky(stickyColumns, \'weight\')">\n      <mat-header-cell *matHeaderCellDef> Weight </mat-header-cell>\n      <mat-cell *matCellDef="let element"> {{element.weight}} </mat-cell>\n      <mat-footer-cell *matFooterCellDef> Weight Footer </mat-footer-cell>\n    </ng-container>\n\n    <ng-container matColumnDef="symbol" [stickyEnd]="isSticky(stickyColumns, \'symbol\')">\n      <mat-header-cell *matHeaderCellDef> Symbol </mat-header-cell>\n      <mat-cell *matCellDef="let element"> {{element.symbol}} </mat-cell>\n      <mat-footer-cell *matFooterCellDef> Symbol Footer </mat-footer-cell>\n    </ng-container>\n\n    <ng-container matColumnDef="filler">\n      <mat-header-cell *matHeaderCellDef> Filler header cell </mat-header-cell>\n      <mat-cell *matCellDef="let element"> Filler data cell </mat-cell>\n      <mat-footer-cell *matFooterCellDef> Filler footer cell </mat-footer-cell>\n    </ng-container>\n\n    <mat-header-row *matHeaderRowDef="displayedColumns; sticky: isSticky(stickyHeaders, \'header-1\')"></mat-header-row>\n    <mat-header-row *matHeaderRowDef="displayedColumns; sticky: isSticky(stickyHeaders, \'header-2\')"></mat-header-row>\n\n    <mat-row *matRowDef="let row; columns: displayedColumns;"></mat-row>\n\n    <mat-footer-row *matFooterRowDef="displayedColumns; sticky: isSticky(stickyFooters, \'footer-1\')"></mat-footer-row>\n    <mat-footer-row *matFooterRowDef="displayedColumns; sticky: isSticky(stickyFooters, \'footer-2\')"></mat-footer-row>\n  </mat-table>\n</div>\n',styles:[".example-container {\n  height: 400px;\n  overflow: auto;\n}\n\n.mat-table-sticky {\n  background: #59abfd;\n  opacity: 1;\n}\n\n.example-sticky-toggle-group {\n  margin: 8px;\n}\n\n.mat-column-filler {\n  padding: 0 8px;\n  font-size: 10px;\n  text-align: center;\n}\n\n.mat-header-cell, .mat-footer-cell, .mat-cell {\n  min-width: 80px;\n  box-sizing: border-box;\n}\n\n.mat-header-row, .mat-footer-row, .mat-row {\n  min-width: 1920px; /* 24 columns, 80px each */\n}\n"]}]}],e.ctorParameters=function(){return[]},e}(),_=[{position:1,name:"Hydrogen",weight:1.0079,symbol:"H"},{position:2,name:"Helium",weight:4.0026,symbol:"He"},{position:3,name:"Lithium",weight:6.941,symbol:"Li"},{position:4,name:"Beryllium",weight:9.0122,symbol:"Be"},{position:5,name:"Boron",weight:10.811,symbol:"B"},{position:6,name:"Carbon",weight:12.0107,symbol:"C"},{position:7,name:"Nitrogen",weight:14.0067,symbol:"N"},{position:8,name:"Oxygen",weight:15.9994,symbol:"O"},{position:9,name:"Fluorine",weight:18.9984,symbol:"F"},{position:10,name:"Neon",weight:20.1797,symbol:"Ne"}],$=function(){function e(){this.displayedColumns=[],this.dataSource=G,this.tables=[0],this.displayedColumns.length=24,this.displayedColumns.fill("filler"),this.displayedColumns[0]="position",this.displayedColumns[1]="name",this.displayedColumns[22]="weight",this.displayedColumns[23]="symbol"}return e.prototype.isSticky=function(e,t){return-1!==(e.value||[]).indexOf(t)},e.decorators=[{type:n.Component,args:[{selector:"table-sticky-complex-example",template:'<div>\n  <button mat-raised-button (click)="tables.push(tables.length)">Add table</button>\n  <button mat-raised-button (click)="tables.pop()">Remove table</button>\n</div>\n\n<div>\n  Sticky Headers:\n  <mat-button-toggle-group multiple [value]="[\'header-1\']"\n                           #stickyHeaders="matButtonToggleGroup"\n                           class="example-sticky-toggle-group">\n    <mat-button-toggle value="header-1"> Row 1 </mat-button-toggle>\n    <mat-button-toggle value="header-2"> Row 2 </mat-button-toggle>\n  </mat-button-toggle-group>\n</div>\n\n<div>\n  Sticky Footers:\n  <mat-button-toggle-group multiple [value]="[\'footer-1\']"\n                           #stickyFooters="matButtonToggleGroup"\n                           class="example-sticky-toggle-group">\n    <mat-button-toggle value="footer-1"> Row 1 </mat-button-toggle>\n    <mat-button-toggle value="footer-2"> Row 2 </mat-button-toggle>\n  </mat-button-toggle-group>\n</div>\n\n<div>\n  Sticky Columns:\n  <mat-button-toggle-group multiple [value]="[\'position\', \'symbol\']"\n                           #stickyColumns="matButtonToggleGroup"\n                           class="example-sticky-toggle-group">\n    <mat-button-toggle value="position"> Position </mat-button-toggle>\n    <mat-button-toggle value="name"> Name </mat-button-toggle>\n    <mat-button-toggle value="weight"> Weight </mat-button-toggle>\n    <mat-button-toggle value="symbol"> Symbol </mat-button-toggle>\n  </mat-button-toggle-group>\n</div>\n\n<div class="example-container mat-elevation-z8">\n  <table mat-table [dataSource]="dataSource" *ngFor="let table of tables">\n    <ng-container matColumnDef="position" [sticky]="isSticky(stickyColumns, \'position\')">\n      <th mat-header-cell *matHeaderCellDef> Position </th>\n      <td mat-cell *matCellDef="let element"> {{element.position}} </td>\n      <td mat-footer-cell *matFooterCellDef> Position Footer </td>\n    </ng-container>\n\n    <ng-container matColumnDef="name" [sticky]="isSticky(stickyColumns, \'name\')">\n      <th mat-header-cell *matHeaderCellDef> Name </th>\n      <td mat-cell *matCellDef="let element"> {{element.name}} </td>\n      <td mat-footer-cell *matFooterCellDef> Name Footer </td>\n    </ng-container>\n\n    <ng-container matColumnDef="weight" [stickyEnd]="isSticky(stickyColumns, \'weight\')">\n      <th mat-header-cell *matHeaderCellDef> Weight </th>\n      <td mat-cell *matCellDef="let element"> {{element.weight}} </td>\n      <td mat-footer-cell *matFooterCellDef> Weight Footer </td>\n    </ng-container>\n\n    <ng-container matColumnDef="symbol" [stickyEnd]="isSticky(stickyColumns, \'symbol\')">\n      <th mat-header-cell *matHeaderCellDef> Symbol </th>\n      <td mat-cell *matCellDef="let element"> {{element.symbol}} </td>\n      <td mat-footer-cell *matFooterCellDef> Symbol Footer </td>\n    </ng-container>\n\n    <ng-container matColumnDef="filler">\n      <th mat-header-cell *matHeaderCellDef> Filler header cell </th>\n      <td mat-cell *matCellDef="let element"> Filler data cell </td>\n      <td mat-footer-cell *matFooterCellDef> Filler footer cell </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef="displayedColumns; sticky: isSticky(stickyHeaders, \'header-1\')"></tr>\n    <tr mat-header-row *matHeaderRowDef="displayedColumns; sticky: isSticky(stickyHeaders, \'header-2\')"></tr>\n\n    <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>\n\n    <tr mat-footer-row *matFooterRowDef="displayedColumns; sticky: isSticky(stickyFooters, \'footer-1\')"></tr>\n    <tr mat-footer-row *matFooterRowDef="displayedColumns; sticky: isSticky(stickyFooters, \'footer-2\')"></tr>\n  </table>\n</div>\n',styles:[".example-container {\n  height: 400px;\n  overflow: auto;\n}\n\n.mat-table-sticky {\n  background: #59abfd;\n  opacity: 1;\n}\n\n.example-sticky-toggle-group {\n  margin: 8px;\n}\n\n.mat-column-filler {\n  padding: 0 8px;\n  font-size: 10px;\n  text-align: center;\n}\n\n.mat-header-cell, .mat-footer-cell, .mat-cell {\n  min-width: 80px;\n  box-sizing: border-box;\n}\n"]}]}],e.ctorParameters=function(){return[]},e}(),G=[{position:1,name:"Hydrogen",weight:1.0079,symbol:"H"},{position:2,name:"Helium",weight:4.0026,symbol:"He"},{position:3,name:"Lithium",weight:6.941,symbol:"Li"},{position:4,name:"Beryllium",weight:9.0122,symbol:"Be"},{position:5,name:"Boron",weight:10.811,symbol:"B"},{position:6,name:"Carbon",weight:12.0107,symbol:"C"},{position:7,name:"Nitrogen",weight:14.0067,symbol:"N"},{position:8,name:"Oxygen",weight:15.9994,symbol:"O"},{position:9,name:"Fluorine",weight:18.9984,symbol:"F"},{position:10,name:"Neon",weight:20.1797,symbol:"Ne"}],J=function(){function e(){this.displayedColumns=["item","cost"],this.transactions=[{item:"Beach ball",cost:4},{item:"Towel",cost:5},{item:"Frisbee",cost:2},{item:"Sunscreen",cost:4},{item:"Cooler",cost:25},{item:"Swim suit",cost:15}]}return e.prototype.getTotalCost=function(){return this.transactions.map(function(e){return e.cost}).reduce(function(e,t){return e+t},0)},e.decorators=[{type:n.Component,args:[{selector:"table-sticky-footer-example",template:'<div class="example-container mat-elevation-z8">\n  <table mat-table [dataSource]="transactions">\n    \x3c!-- Item Column --\x3e\n    <ng-container matColumnDef="item">\n      <th mat-header-cell *matHeaderCellDef> Item </th>\n      <td mat-cell *matCellDef="let transaction"> {{transaction.item}} </td>\n      <td mat-footer-cell *matFooterCellDef> Total </td>\n    </ng-container>\n\n    \x3c!-- Cost Column --\x3e\n    <ng-container matColumnDef="cost">\n      <th mat-header-cell *matHeaderCellDef> Cost </th>\n      <td mat-cell *matCellDef="let transaction"> {{transaction.cost | currency}} </td>\n      <td mat-footer-cell *matFooterCellDef> {{getTotalCost() | currency}} </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>\n    <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>\n    <tr mat-footer-row *matFooterRowDef="displayedColumns; sticky: true"></tr>\n  </table>\n</div>\n',styles:[".example-container {\n  height: 270px;\n  overflow: auto;\n}\n\ntable {\n  width: 100%;\n}\n\ntr.mat-footer-row {\n  font-weight: bold;\n}\n\n.mat-table-sticky {\n  border-top: 1px solid #e0e0e0;\n}\n"]}]}],e}(),U=function(){function e(){this.displayedColumns=["position","name","weight","symbol"],this.dataSource=K}return e.decorators=[{type:n.Component,args:[{selector:"table-sticky-header-example",template:'<div class="example-container mat-elevation-z8">\n  <table mat-table [dataSource]="dataSource">\n\n    \x3c!-- Position Column --\x3e\n    <ng-container matColumnDef="position">\n      <th mat-header-cell *matHeaderCellDef> No. </th>\n      <td mat-cell *matCellDef="let element"> {{element.position}} </td>\n    </ng-container>\n\n    \x3c!-- Name Column --\x3e\n    <ng-container matColumnDef="name">\n      <th mat-header-cell *matHeaderCellDef> Name </th>\n      <td mat-cell *matCellDef="let element"> {{element.name}} </td>\n    </ng-container>\n\n    \x3c!-- Weight Column --\x3e\n    <ng-container matColumnDef="weight">\n      <th mat-header-cell *matHeaderCellDef> Weight </th>\n      <td mat-cell *matCellDef="let element"> {{element.weight}} </td>\n    </ng-container>\n\n    \x3c!-- Symbol Column --\x3e\n    <ng-container matColumnDef="symbol">\n      <th mat-header-cell *matHeaderCellDef> Symbol </th>\n      <td mat-cell *matCellDef="let element"> {{element.symbol}} </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef="displayedColumns; sticky: true"></tr>\n    <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>\n  </table>\n</div>',styles:[".example-container {\n  height: 400px;\n  overflow: auto;\n}\n\ntable {\n  width: 100%;\n}\n"]}]}],e}(),K=[{position:1,name:"Hydrogen",weight:1.0079,symbol:"H"},{position:2,name:"Helium",weight:4.0026,symbol:"He"},{position:3,name:"Lithium",weight:6.941,symbol:"Li"},{position:4,name:"Beryllium",weight:9.0122,symbol:"Be"},{position:5,name:"Boron",weight:10.811,symbol:"B"},{position:6,name:"Carbon",weight:12.0107,symbol:"C"},{position:7,name:"Nitrogen",weight:14.0067,symbol:"N"},{position:8,name:"Oxygen",weight:15.9994,symbol:"O"},{position:9,name:"Fluorine",weight:18.9984,symbol:"F"},{position:10,name:"Neon",weight:20.1797,symbol:"Ne"}],Q=[{position:1,name:"Hydrogen",weight:1.0079,symbol:"H"},{position:2,name:"Helium",weight:4.0026,symbol:"He"},{position:3,name:"Lithium",weight:6.941,symbol:"Li"},{position:4,name:"Beryllium",weight:9.0122,symbol:"Be"},{position:5,name:"Boron",weight:10.811,symbol:"B"},{position:6,name:"Carbon",weight:12.0107,symbol:"C"},{position:7,name:"Nitrogen",weight:14.0067,symbol:"N"},{position:8,name:"Oxygen",weight:15.9994,symbol:"O"},{position:9,name:"Fluorine",weight:18.9984,symbol:"F"},{position:10,name:"Neon",weight:20.1797,symbol:"Ne"}],X=function(){function e(){var e=this;this.displayedColumns=["position","name","weight","symbol"],this.dataSource=new d.MatTableDataSource(Q),this.decimalPipe=new t.DecimalPipe("en-US"),this.getWeight=function(t){return e.decimalPipe.transform(t.weight,"1.0-2")}}return e.decorators=[{type:n.Component,args:[{selector:"table-text-column-advanced-example",template:'<table mat-table [dataSource]="dataSource" class="mat-elevation-z8">\n  <mat-text-column name="position" [headerText]="headerText"></mat-text-column>\n\n  \x3c!-- Change the header text. --\x3e\n  <mat-text-column name="name" headerText="Element"></mat-text-column>\n\n  \x3c!-- Provide a data accessor for getting the cell text values. --\x3e\n  <mat-text-column name="weight" [dataAccessor]="getWeight"></mat-text-column>\n\n  \x3c!-- Justify the content of the cells to the cell end. --\x3e\n  <mat-text-column name="symbol" justify="end"></mat-text-column>\n\n  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>\n  <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>\n</table>\n',styles:["table {\n  width: 100%;\n}\n"]}]}],e}(),Y=[{position:1,name:"Hydrogen",weight:1.0079,symbol:"H"},{position:2,name:"Helium",weight:4.0026,symbol:"He"},{position:3,name:"Lithium",weight:6.941,symbol:"Li"},{position:4,name:"Beryllium",weight:9.0122,symbol:"Be"},{position:5,name:"Boron",weight:10.811,symbol:"B"},{position:6,name:"Carbon",weight:12.0107,symbol:"C"},{position:7,name:"Nitrogen",weight:14.0067,symbol:"N"},{position:8,name:"Oxygen",weight:15.9994,symbol:"O"},{position:9,name:"Fluorine",weight:18.9984,symbol:"F"},{position:10,name:"Neon",weight:20.1797,symbol:"Ne"}],Z=function(){function e(){this.displayedColumns=["position","name","weight","symbol"],this.dataSource=Y}return e.decorators=[{type:n.Component,args:[{selector:"table-text-column-example",template:'<table mat-table [dataSource]="dataSource" class="mat-elevation-z8">\n  <mat-text-column name="position"></mat-text-column>\n  <mat-text-column name="name"></mat-text-column>\n  <mat-text-column name="weight"></mat-text-column>\n  <mat-text-column name="symbol"></mat-text-column>\n\n  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>\n  <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>\n</table>\n',styles:["table {\n  width: 100%;\n}\n"]}]}],e}(),ee=[{position:1,name:"Hydrogen",weight:1.0079,symbol:"H"},{position:2,name:"Helium",weight:4.0026,symbol:"He"},{position:3,name:"Lithium",weight:6.941,symbol:"Li"},{position:4,name:"Beryllium",weight:9.0122,symbol:"Be"},{position:5,name:"Boron",weight:10.811,symbol:"B"},{position:6,name:"Carbon",weight:12.0107,symbol:"C"},{position:7,name:"Nitrogen",weight:14.0067,symbol:"N"},{position:8,name:"Oxygen",weight:15.9994,symbol:"O"},{position:9,name:"Fluorine",weight:18.9984,symbol:"F"},{position:10,name:"Neon",weight:20.1797,symbol:"Ne"}],te=function(){function e(){this.displayedColumns=["position","name","weight","symbol"],this.dataSource=new d.MatTableDataSource(ee)}return e.prototype.ngOnInit=function(){this.dataSource.sort=this.sort},e.decorators=[{type:n.Component,args:[{selector:"table-wrapped-example",template:'<wrapper-table [dataSource]="dataSource" [columns]="displayedColumns"\n               matSort #sort="matSort">\n  \x3c!-- Custom column definition to be provided to the wrapper table. --\x3e\n  <ng-container matColumnDef="name">\n    <th mat-header-cell *matHeaderCellDef> Name </th>\n    <td mat-cell *matCellDef="let element"> {{element.name}} </td>\n  </ng-container>\n\n  \x3c!-- Custom row definitions to be provided to the wrapper table. --\x3e\n  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>\n  <tr mat-row *matRowDef="let row; columns: displayedColumns; "></tr>\n</wrapper-table>\n',styles:["table {\n  width: 100%;\n}\n"]}]}],e.propDecorators={sort:[{type:n.ViewChild,args:["sort",{static:!0}]}]},e}(),ne=function(){function e(){}return e.prototype.ngAfterContentInit=function(){var e=this;this.columnDefs.forEach(function(t){return e.table.addColumnDef(t)}),this.rowDefs.forEach(function(t){return e.table.addRowDef(t)}),this.headerRowDefs.forEach(function(t){return e.table.addHeaderRowDef(t)})},e.decorators=[{type:n.Component,args:[{selector:"wrapper-table",template:'<table mat-table [dataSource]="dataSource" class="mat-elevation-z8">\n  <ng-content></ng-content>\n\n  \x3c!-- Position Column --\x3e\n  <ng-container matColumnDef="position">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> No. </th>\n    <td mat-cell *matCellDef="let element"> {{element.position}} </td>\n  </ng-container>\n\n  \x3c!-- Weight Column --\x3e\n  <ng-container matColumnDef="weight">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Weight </th>\n    <td mat-cell *matCellDef="let element"> {{element.weight}} </td>\n  </ng-container>\n\n  \x3c!-- Color Column --\x3e\n  <ng-container matColumnDef="symbol">\n    <th mat-header-cell *matHeaderCellDef> Symbol </th>\n    <td mat-cell *matCellDef="let element"> {{element.symbol}} </td>\n  </ng-container>\n</table>\n',styles:["\n    table {\n      width: 100%;\n    }\n  "]}]}],e.propDecorators={headerRowDefs:[{type:n.ContentChildren,args:[d.MatHeaderRowDef]}],rowDefs:[{type:n.ContentChildren,args:[d.MatRowDef]}],columnDefs:[{type:n.ContentChildren,args:[d.MatColumnDef]}],table:[{type:n.ViewChild,args:[d.MatTable,{static:!0}]}],columns:[{type:n.Input}],dataSource:[{type:n.Input}]},e}(),oe=[C,f,D,H,k,N,F,T,L,I,O,z,A,q,$,j,J,U,Z,X,te,ne],ae=function(){function e(){}return e.decorators=[{type:n.NgModule,args:[{imports:[t.CommonModule,o.MatButtonModule,a.MatButtonToggleModule,l.MatCheckboxModule,i.MatIconModule,m.MatInputModule,r.MatPaginatorModule,s.MatProgressSpinnerModule,c.MatSortModule,d.MatTableModule],declarations:oe,exports:oe}]}],e}();e.TableBasicExample=C,e.TableBasicFlexExample=f,e.TableDynamicColumnsExample=D,e.TableExpandableRowsExample=H,e.TableFilteringExample=k,e.TableFooterRowExample=N,e.TableHttpExample=F,e.TableMultipleHeaderFooterExample=T,e.TableOverviewExample=L,e.TablePaginationExample=I,e.TableRowContextExample=O,e.TableSelectionExample=z,e.TableSortingExample=A,e.TableStickyColumnsExample=q,e.TableStickyComplexExample=$,e.TableStickyComplexFlexExample=j,e.TableStickyFooterExample=J,e.TableStickyHeaderExample=U,e.TableTextColumnExample=Z,e.TableTextColumnAdvancedExample=X,e.TableWrappedExample=te,e.WrapperTable=ne,e.TableExamplesModule=ae,Object.defineProperty(e,"__esModule",{value:!0})});