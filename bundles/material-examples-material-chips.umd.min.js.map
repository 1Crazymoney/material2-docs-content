{"version":3,"sources":["src/material-examples/material-examples-material-chips.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","materialExamples","material","chips","cdk","dragDrop","common","core","forms","autocomplete","formField","icon","keycodes","rxjs","operators","this","ChipsAutocompleteExample","_this","visible","selectable","removable","addOnBlur","separatorKeysCodes","ENTER","COMMA","fruitCtrl","FormControl","fruits","allFruits","filteredFruits","valueChanges","pipe","startWith","map","fruit","_filter","slice","prototype","add","event","matAutocomplete","isOpen","input","value","trim","push","setValue","remove","index","indexOf","splice","selected","option","viewValue","fruitInput","nativeElement","filterValue","toLowerCase","filter","decorators","type","Component","args","selector","template","styles","ctorParameters","propDecorators","ViewChild","static","ChipsDragDropExample","vegetables","name","drop","moveItemInArray","previousIndex","currentIndex","ChipsInputExample","ChipsOverviewExample","ChipsStackedExample","availableColors","color","undefined","EXAMPLES","ChipsExamplesModule","NgModule","imports","CommonModule","DragDropModule","MatAutocompleteModule","MatChipsModule","MatIconModule","MatFormFieldModule","ReactiveFormsModule","declarations","Object","defineProperty"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/drag-drop'), require('@angular/common'), require('@angular/core'), require('@angular/forms'), require('@angular/material/autocomplete'), require('@angular/material/chips'), require('@angular/material/form-field'), require('@angular/material/icon'), require('@angular/cdk/keycodes'), require('rxjs/operators')) :\n    typeof define === 'function' && define.amd ? define('@angular/material-examples/material/chips', ['exports', '@angular/cdk/drag-drop', '@angular/common', '@angular/core', '@angular/forms', '@angular/material/autocomplete', '@angular/material/chips', '@angular/material/form-field', '@angular/material/icon', '@angular/cdk/keycodes', 'rxjs/operators'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.materialExamples = global.ng.materialExamples || {}, global.ng.materialExamples.material = global.ng.materialExamples.material || {}, global.ng.materialExamples.material.chips = {}), global.ng.cdk.dragDrop, global.ng.common, global.ng.core, global.ng.forms, global.ng.material.autocomplete, global.ng.material.chips, global.ng.material.formField, global.ng.material.icon, global.ng.cdk.keycodes, global.rxjs.operators));\n}(this, function (exports, dragDrop, common, core, forms, autocomplete, chips, formField, icon, keycodes, operators) { 'use strict';\n\n    /**\n     * @title Chips Autocomplete\n     */\n    var ChipsAutocompleteExample = /** @class */ (function () {\n        function ChipsAutocompleteExample() {\n            var _this = this;\n            this.visible = true;\n            this.selectable = true;\n            this.removable = true;\n            this.addOnBlur = true;\n            this.separatorKeysCodes = [keycodes.ENTER, keycodes.COMMA];\n            this.fruitCtrl = new forms.FormControl();\n            this.fruits = ['Lemon'];\n            this.allFruits = ['Apple', 'Lemon', 'Lime', 'Orange', 'Strawberry'];\n            this.filteredFruits = this.fruitCtrl.valueChanges.pipe(operators.startWith(null), operators.map(function (fruit) { return fruit ? _this._filter(fruit) : _this.allFruits.slice(); }));\n        }\n        ChipsAutocompleteExample.prototype.add = function (event) {\n            // Add fruit only when MatAutocomplete is not open\n            // To make sure this does not conflict with OptionSelected Event\n            if (!this.matAutocomplete.isOpen) {\n                var input = event.input;\n                var value = event.value;\n                // Add our fruit\n                if ((value || '').trim()) {\n                    this.fruits.push(value.trim());\n                }\n                // Reset the input value\n                if (input) {\n                    input.value = '';\n                }\n                this.fruitCtrl.setValue(null);\n            }\n        };\n        ChipsAutocompleteExample.prototype.remove = function (fruit) {\n            var index = this.fruits.indexOf(fruit);\n            if (index >= 0) {\n                this.fruits.splice(index, 1);\n            }\n        };\n        ChipsAutocompleteExample.prototype.selected = function (event) {\n            this.fruits.push(event.option.viewValue);\n            this.fruitInput.nativeElement.value = '';\n            this.fruitCtrl.setValue(null);\n        };\n        ChipsAutocompleteExample.prototype._filter = function (value) {\n            var filterValue = value.toLowerCase();\n            return this.allFruits.filter(function (fruit) { return fruit.toLowerCase().indexOf(filterValue) === 0; });\n        };\n        ChipsAutocompleteExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'chips-autocomplete-example',\n                        template: \"<mat-form-field class=\\\"example-chip-list\\\">\\n  <mat-chip-list #chipList aria-label=\\\"Fruit selection\\\">\\n    <mat-chip\\n      *ngFor=\\\"let fruit of fruits\\\"\\n      [selectable]=\\\"selectable\\\"\\n      [removable]=\\\"removable\\\"\\n      (removed)=\\\"remove(fruit)\\\">\\n      {{fruit}}\\n      <mat-icon matChipRemove *ngIf=\\\"removable\\\">cancel</mat-icon>\\n    </mat-chip>\\n    <input\\n      placeholder=\\\"New fruit...\\\"\\n      #fruitInput\\n      [formControl]=\\\"fruitCtrl\\\"\\n      [matAutocomplete]=\\\"auto\\\"\\n      [matChipInputFor]=\\\"chipList\\\"\\n      [matChipInputSeparatorKeyCodes]=\\\"separatorKeysCodes\\\"\\n      [matChipInputAddOnBlur]=\\\"addOnBlur\\\"\\n      (matChipInputTokenEnd)=\\\"add($event)\\\">\\n  </mat-chip-list>\\n  <mat-autocomplete #auto=\\\"matAutocomplete\\\" (optionSelected)=\\\"selected($event)\\\">\\n    <mat-option *ngFor=\\\"let fruit of filteredFruits | async\\\" [value]=\\\"fruit\\\">\\n      {{fruit}}\\n    </mat-option>\\n  </mat-autocomplete>\\n</mat-form-field>\\n\",\n                        styles: [\".example-chip-list {\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        ChipsAutocompleteExample.ctorParameters = function () { return []; };\n        ChipsAutocompleteExample.propDecorators = {\n            fruitInput: [{ type: core.ViewChild, args: ['fruitInput', { static: false },] }],\n            matAutocomplete: [{ type: core.ViewChild, args: ['auto', { static: false },] }]\n        };\n        return ChipsAutocompleteExample;\n    }());\n\n    /**\n     * @title Chips Drag and Drop\n     */\n    var ChipsDragDropExample = /** @class */ (function () {\n        function ChipsDragDropExample() {\n            this.vegetables = [\n                { name: 'apple' },\n                { name: 'banana' },\n                { name: 'strawberry' },\n                { name: 'orange' },\n                { name: 'kiwi' },\n                { name: 'cherry' },\n            ];\n        }\n        ChipsDragDropExample.prototype.drop = function (event) {\n            dragDrop.moveItemInArray(this.vegetables, event.previousIndex, event.currentIndex);\n        };\n        ChipsDragDropExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'chips-drag-drop-example',\n                        template: \"<mat-chip-list\\n  class=\\\"example-chip\\\"\\n  cdkDropList \\n  cdkDropListOrientation=\\\"horizontal\\\"\\n  (cdkDropListDropped)=\\\"drop($event)\\\">\\n  <mat-chip\\n    class=\\\"example-box\\\"\\n    cdkDrag\\n    *ngFor=\\\"let vegetable of vegetables\\\">\\n    {{vegetable.name}}\\n  </mat-chip>\\n</mat-chip-list>\\n\",\n                        styles: [\".example-box.cdk-drag-animating {\\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\\n}\\n\\n.example-chip .cdk-drop-list-dragging {\\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\\n}\\n\"]\n                    }] }\n        ];\n        return ChipsDragDropExample;\n    }());\n\n    /**\n     * @title Chips with input\n     */\n    var ChipsInputExample = /** @class */ (function () {\n        function ChipsInputExample() {\n            this.visible = true;\n            this.selectable = true;\n            this.removable = true;\n            this.addOnBlur = true;\n            this.separatorKeysCodes = [keycodes.ENTER, keycodes.COMMA];\n            this.fruits = [\n                { name: 'Lemon' },\n                { name: 'Lime' },\n                { name: 'Apple' },\n            ];\n        }\n        ChipsInputExample.prototype.add = function (event) {\n            var input = event.input;\n            var value = event.value;\n            // Add our fruit\n            if ((value || '').trim()) {\n                this.fruits.push({ name: value.trim() });\n            }\n            // Reset the input value\n            if (input) {\n                input.value = '';\n            }\n        };\n        ChipsInputExample.prototype.remove = function (fruit) {\n            var index = this.fruits.indexOf(fruit);\n            if (index >= 0) {\n                this.fruits.splice(index, 1);\n            }\n        };\n        ChipsInputExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'chips-input-example',\n                        template: \"<mat-form-field class=\\\"example-chip-list\\\">\\n  <mat-chip-list #chipList aria-label=\\\"Fruit selection\\\">\\n    <mat-chip *ngFor=\\\"let fruit of fruits\\\" [selectable]=\\\"selectable\\\"\\n             [removable]=\\\"removable\\\" (removed)=\\\"remove(fruit)\\\">\\n      {{fruit.name}}\\n      <mat-icon matChipRemove *ngIf=\\\"removable\\\">cancel</mat-icon>\\n    </mat-chip>\\n    <input placeholder=\\\"New fruit...\\\"\\n           [matChipInputFor]=\\\"chipList\\\"\\n           [matChipInputSeparatorKeyCodes]=\\\"separatorKeysCodes\\\"\\n           [matChipInputAddOnBlur]=\\\"addOnBlur\\\"\\n           (matChipInputTokenEnd)=\\\"add($event)\\\">\\n  </mat-chip-list>\\n</mat-form-field>\\n\",\n                        styles: [\".example-chip-list {\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        return ChipsInputExample;\n    }());\n\n    /**\n     * @title Basic chips\n     */\n    var ChipsOverviewExample = /** @class */ (function () {\n        function ChipsOverviewExample() {\n        }\n        ChipsOverviewExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'chips-overview-example',\n                        template: \"<mat-chip-list aria-label=\\\"Fish selection\\\">\\n  <mat-chip>One fish</mat-chip>\\n  <mat-chip>Two fish</mat-chip>\\n  <mat-chip color=\\\"primary\\\" selected>Primary fish</mat-chip>\\n  <mat-chip color=\\\"accent\\\" selected>Accent fish</mat-chip>\\n</mat-chip-list>\\n\",\n                        styles: [\"/** No CSS for this example */\\n\"]\n                    }] }\n        ];\n        return ChipsOverviewExample;\n    }());\n\n    /**\n     * @title Stacked chips\n     */\n    var ChipsStackedExample = /** @class */ (function () {\n        function ChipsStackedExample() {\n            this.availableColors = [\n                { name: 'none', color: undefined },\n                { name: 'Primary', color: 'primary' },\n                { name: 'Accent', color: 'accent' },\n                { name: 'Warn', color: 'warn' }\n            ];\n        }\n        ChipsStackedExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'chips-stacked-example',\n                        template: \"<mat-chip-list class=\\\"mat-chip-list-stacked\\\" aria-label=\\\"Color selection\\\">\\n  <mat-chip *ngFor=\\\"let chip of availableColors\\\" selected [color]=\\\"chip.color\\\">\\n    {{chip.name}}\\n  </mat-chip>\\n</mat-chip-list>\\n\",\n                        styles: [\"mat-chip {\\n  max-width: 200px;\\n}\\n\"]\n                    }] }\n        ];\n        return ChipsStackedExample;\n    }());\n\n    var EXAMPLES = [\n        ChipsAutocompleteExample,\n        ChipsDragDropExample,\n        ChipsInputExample,\n        ChipsOverviewExample,\n        ChipsStackedExample,\n    ];\n    var ChipsExamplesModule = /** @class */ (function () {\n        function ChipsExamplesModule() {\n        }\n        ChipsExamplesModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            common.CommonModule,\n                            dragDrop.DragDropModule,\n                            autocomplete.MatAutocompleteModule,\n                            chips.MatChipsModule,\n                            icon.MatIconModule,\n                            formField.MatFormFieldModule,\n                            forms.ReactiveFormsModule,\n                        ],\n                        declarations: EXAMPLES,\n                        exports: EXAMPLES,\n                    },] }\n        ];\n        return ChipsExamplesModule;\n    }());\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.ChipsAutocompleteExample = ChipsAutocompleteExample;\n    exports.ChipsDragDropExample = ChipsDragDropExample;\n    exports.ChipsInputExample = ChipsInputExample;\n    exports.ChipsOverviewExample = ChipsOverviewExample;\n    exports.ChipsStackedExample = ChipsStackedExample;\n    exports.ChipsExamplesModule = ChipsExamplesModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-examples-material-chips.umd.js.map\n"]}