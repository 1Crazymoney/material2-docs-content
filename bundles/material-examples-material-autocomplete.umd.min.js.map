{"version":3,"sources":["src/material-examples/material-examples-material-autocomplete.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","materialExamples","material","autocomplete","common","core","forms","input","rxjs","operators","this","formField","slideToggle","AutocompleteAutoActiveFirstOptionExample","myControl","FormControl","options","prototype","ngOnInit","_this","filteredOptions","valueChanges","pipe","startWith","map","value","_filter","filterValue","toLowerCase","filter","option","indexOf","decorators","type","Component","args","selector","template","styles","AutocompleteDisplayExample","name","slice","displayFn","user","undefined","AutocompleteFilterExample","includes","opt","item","AutocompleteOptgroupExample","_formBuilder","stateForm","group","stateGroup","stateGroups","letter","names","stateGroupOptions","get","_filterGroup","length","ctorParameters","FormBuilder","AutocompleteOverviewExample","stateCtrl","states","population","flag","filteredStates","state","_filterStates","AutocompletePlainInputExample","control","streets","filteredStreets","_normalizeValue","street","replace","AutocompleteSimpleExample","EXAMPLES","AutocompleteExamplesModule","NgModule","imports","CommonModule","MatAutocompleteModule","MatFormFieldModule","MatInputModule","MatSlideToggleModule","FormsModule","ReactiveFormsModule","declarations","Object","defineProperty"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/forms'), require('@angular/material/autocomplete'), require('@angular/material/form-field'), require('@angular/material/input'), require('@angular/material/slide-toggle'), require('rxjs/operators')) :\n    typeof define === 'function' && define.amd ? define('@angular/material-examples/material/autocomplete', ['exports', '@angular/common', '@angular/core', '@angular/forms', '@angular/material/autocomplete', '@angular/material/form-field', '@angular/material/input', '@angular/material/slide-toggle', 'rxjs/operators'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.materialExamples = global.ng.materialExamples || {}, global.ng.materialExamples.material = global.ng.materialExamples.material || {}, global.ng.materialExamples.material.autocomplete = {}), global.ng.common, global.ng.core, global.ng.forms, global.ng.material.autocomplete, global.ng.material['form-field'], global.ng.material.input, global.ng.material['slide-toggle'], global.rxjs.operators));\n}(this, function (exports, common, core, forms, autocomplete, formField, input, slideToggle, operators) { 'use strict';\n\n    /**\n     * @title Highlight the first autocomplete option\n     */\n    var AutocompleteAutoActiveFirstOptionExample = /** @class */ (function () {\n        function AutocompleteAutoActiveFirstOptionExample() {\n            this.myControl = new forms.FormControl();\n            this.options = ['One', 'Two', 'Three'];\n        }\n        AutocompleteAutoActiveFirstOptionExample.prototype.ngOnInit = function () {\n            var _this = this;\n            this.filteredOptions = this.myControl.valueChanges.pipe(operators.startWith(''), operators.map(function (value) { return _this._filter(value); }));\n        };\n        AutocompleteAutoActiveFirstOptionExample.prototype._filter = function (value) {\n            var filterValue = value.toLowerCase();\n            return this.options.filter(function (option) { return option.toLowerCase().indexOf(filterValue) === 0; });\n        };\n        AutocompleteAutoActiveFirstOptionExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'autocomplete-auto-active-first-option-example',\n                        template: \"<form class=\\\"example-form\\\">\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input type=\\\"text\\\" placeholder=\\\"Pick one\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto\\\">\\n    <mat-autocomplete autoActiveFirstOption #auto=\\\"matAutocomplete\\\">\\n      <mat-option *ngFor=\\\"let option of filteredOptions | async\\\" [value]=\\\"option\\\">\\n        {{option}}\\n      </mat-option>\\n    </mat-autocomplete>\\n  </mat-form-field>\\n</form>\\n\",\n                        styles: [\".example-form {\\n  min-width: 150px;\\n  max-width: 500px;\\n  width: 100%;\\n}\\n\\n.example-full-width {\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        return AutocompleteAutoActiveFirstOptionExample;\n    }());\n\n    /**\n     * @title Display value autocomplete\n     */\n    var AutocompleteDisplayExample = /** @class */ (function () {\n        function AutocompleteDisplayExample() {\n            this.myControl = new forms.FormControl();\n            this.options = [\n                { name: 'Mary' },\n                { name: 'Shelley' },\n                { name: 'Igor' }\n            ];\n        }\n        AutocompleteDisplayExample.prototype.ngOnInit = function () {\n            var _this = this;\n            this.filteredOptions = this.myControl.valueChanges\n                .pipe(operators.startWith(''), operators.map(function (value) { return typeof value === 'string' ? value : value.name; }), operators.map(function (name) { return name ? _this._filter(name) : _this.options.slice(); }));\n        };\n        AutocompleteDisplayExample.prototype.displayFn = function (user) {\n            return user ? user.name : undefined;\n        };\n        AutocompleteDisplayExample.prototype._filter = function (name) {\n            var filterValue = name.toLowerCase();\n            return this.options.filter(function (option) { return option.name.toLowerCase().indexOf(filterValue) === 0; });\n        };\n        AutocompleteDisplayExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'autocomplete-display-example',\n                        template: \"<form class=\\\"example-form\\\">\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input type=\\\"text\\\" placeholder=\\\"Assignee\\\" aria-label=\\\"Assignee\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto\\\">\\n    <mat-autocomplete #auto=\\\"matAutocomplete\\\" [displayWith]=\\\"displayFn\\\">\\n      <mat-option *ngFor=\\\"let option of filteredOptions | async\\\" [value]=\\\"option\\\">\\n        {{option.name}}\\n      </mat-option>\\n    </mat-autocomplete>\\n  </mat-form-field>\\n</form>\\n\",\n                        styles: [\".example-form {\\n  min-width: 150px;\\n  max-width: 500px;\\n  width: 100%;\\n}\\n\\n.example-full-width {\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        return AutocompleteDisplayExample;\n    }());\n\n    /**\n     * @title Filter autocomplete\n     */\n    var AutocompleteFilterExample = /** @class */ (function () {\n        function AutocompleteFilterExample() {\n            this.myControl = new forms.FormControl();\n            this.options = ['One', 'Two', 'Three'];\n        }\n        AutocompleteFilterExample.prototype.ngOnInit = function () {\n            var _this = this;\n            this.filteredOptions = this.myControl.valueChanges\n                .pipe(operators.startWith(''), operators.map(function (value) { return _this._filter(value); }));\n        };\n        AutocompleteFilterExample.prototype._filter = function (value) {\n            var filterValue = value.toLowerCase();\n            return this.options.filter(function (option) { return option.toLowerCase().includes(filterValue); });\n        };\n        AutocompleteFilterExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'autocomplete-filter-example',\n                        template: \"<form class=\\\"example-form\\\">\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input type=\\\"text\\\" placeholder=\\\"Pick one\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto\\\">\\n    <mat-autocomplete #auto=\\\"matAutocomplete\\\">\\n      <mat-option *ngFor=\\\"let option of filteredOptions | async\\\" [value]=\\\"option\\\">\\n        {{option}}\\n      </mat-option>\\n    </mat-autocomplete>\\n  </mat-form-field>\\n</form>\\n\",\n                        styles: [\".example-form {\\n  min-width: 150px;\\n  max-width: 500px;\\n  width: 100%;\\n}\\n\\n.example-full-width {\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        return AutocompleteFilterExample;\n    }());\n\n    var _filter = function (opt, value) {\n        var filterValue = value.toLowerCase();\n        return opt.filter(function (item) { return item.toLowerCase().indexOf(filterValue) === 0; });\n    };\n    /**\n     * @title Option groups autocomplete\n     */\n    var AutocompleteOptgroupExample = /** @class */ (function () {\n        function AutocompleteOptgroupExample(_formBuilder) {\n            this._formBuilder = _formBuilder;\n            this.stateForm = this._formBuilder.group({\n                stateGroup: '',\n            });\n            this.stateGroups = [{\n                    letter: 'A',\n                    names: ['Alabama', 'Alaska', 'Arizona', 'Arkansas']\n                }, {\n                    letter: 'C',\n                    names: ['California', 'Colorado', 'Connecticut']\n                }, {\n                    letter: 'D',\n                    names: ['Delaware']\n                }, {\n                    letter: 'F',\n                    names: ['Florida']\n                }, {\n                    letter: 'G',\n                    names: ['Georgia']\n                }, {\n                    letter: 'H',\n                    names: ['Hawaii']\n                }, {\n                    letter: 'I',\n                    names: ['Idaho', 'Illinois', 'Indiana', 'Iowa']\n                }, {\n                    letter: 'K',\n                    names: ['Kansas', 'Kentucky']\n                }, {\n                    letter: 'L',\n                    names: ['Louisiana']\n                }, {\n                    letter: 'M',\n                    names: ['Maine', 'Maryland', 'Massachusetts', 'Michigan',\n                        'Minnesota', 'Mississippi', 'Missouri', 'Montana']\n                }, {\n                    letter: 'N',\n                    names: ['Nebraska', 'Nevada', 'New Hampshire', 'New Jersey',\n                        'New Mexico', 'New York', 'North Carolina', 'North Dakota']\n                }, {\n                    letter: 'O',\n                    names: ['Ohio', 'Oklahoma', 'Oregon']\n                }, {\n                    letter: 'P',\n                    names: ['Pennsylvania']\n                }, {\n                    letter: 'R',\n                    names: ['Rhode Island']\n                }, {\n                    letter: 'S',\n                    names: ['South Carolina', 'South Dakota']\n                }, {\n                    letter: 'T',\n                    names: ['Tennessee', 'Texas']\n                }, {\n                    letter: 'U',\n                    names: ['Utah']\n                }, {\n                    letter: 'V',\n                    names: ['Vermont', 'Virginia']\n                }, {\n                    letter: 'W',\n                    names: ['Washington', 'West Virginia', 'Wisconsin', 'Wyoming']\n                }];\n        }\n        AutocompleteOptgroupExample.prototype.ngOnInit = function () {\n            var _this = this;\n            this.stateGroupOptions = this.stateForm.get('stateGroup').valueChanges\n                .pipe(operators.startWith(''), operators.map(function (value) { return _this._filterGroup(value); }));\n        };\n        AutocompleteOptgroupExample.prototype._filterGroup = function (value) {\n            if (value) {\n                return this.stateGroups\n                    .map(function (group) { return ({ letter: group.letter, names: _filter(group.names, value) }); })\n                    .filter(function (group) { return group.names.length > 0; });\n            }\n            return this.stateGroups;\n        };\n        AutocompleteOptgroupExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'autocomplete-optgroup-example',\n                        template: \"<form [formGroup]=\\\"stateForm\\\">\\n  <mat-form-field>\\n    <input type=\\\"text\\\" matInput placeholder=\\\"States Group\\\" formControlName=\\\"stateGroup\\\" required [matAutocomplete]=\\\"autoGroup\\\">\\n      <mat-autocomplete #autoGroup=\\\"matAutocomplete\\\">\\n        <mat-optgroup *ngFor=\\\"let group of stateGroupOptions | async\\\" [label]=\\\"group.letter\\\">\\n          <mat-option *ngFor=\\\"let name of group.names\\\" [value]=\\\"name\\\">\\n            {{name}}\\n          </mat-option>\\n      </mat-optgroup>\\n    </mat-autocomplete>\\n  </mat-form-field>\\n</form>\\n\",\n                        styles: [\"/** No CSS for this example */\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        AutocompleteOptgroupExample.ctorParameters = function () { return [\n            { type: forms.FormBuilder }\n        ]; };\n        return AutocompleteOptgroupExample;\n    }());\n\n    /**\n     * @title Autocomplete overview\n     */\n    var AutocompleteOverviewExample = /** @class */ (function () {\n        function AutocompleteOverviewExample() {\n            var _this = this;\n            this.stateCtrl = new forms.FormControl();\n            this.states = [\n                {\n                    name: 'Arkansas',\n                    population: '2.978M',\n                    // https://commons.wikimedia.org/wiki/File:Flag_of_Arkansas.svg\n                    flag: 'https://upload.wikimedia.org/wikipedia/commons/9/9d/Flag_of_Arkansas.svg'\n                },\n                {\n                    name: 'California',\n                    population: '39.14M',\n                    // https://commons.wikimedia.org/wiki/File:Flag_of_California.svg\n                    flag: 'https://upload.wikimedia.org/wikipedia/commons/0/01/Flag_of_California.svg'\n                },\n                {\n                    name: 'Florida',\n                    population: '20.27M',\n                    // https://commons.wikimedia.org/wiki/File:Flag_of_Florida.svg\n                    flag: 'https://upload.wikimedia.org/wikipedia/commons/f/f7/Flag_of_Florida.svg'\n                },\n                {\n                    name: 'Texas',\n                    population: '27.47M',\n                    // https://commons.wikimedia.org/wiki/File:Flag_of_Texas.svg\n                    flag: 'https://upload.wikimedia.org/wikipedia/commons/f/f7/Flag_of_Texas.svg'\n                }\n            ];\n            this.filteredStates = this.stateCtrl.valueChanges\n                .pipe(operators.startWith(''), operators.map(function (state) { return state ? _this._filterStates(state) : _this.states.slice(); }));\n        }\n        AutocompleteOverviewExample.prototype._filterStates = function (value) {\n            var filterValue = value.toLowerCase();\n            return this.states.filter(function (state) { return state.name.toLowerCase().indexOf(filterValue) === 0; });\n        };\n        AutocompleteOverviewExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'autocomplete-overview-example',\n                        template: \"<form class=\\\"example-form\\\">\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput placeholder=\\\"State\\\" aria-label=\\\"State\\\" [matAutocomplete]=\\\"auto\\\" [formControl]=\\\"stateCtrl\\\">\\n    <mat-autocomplete #auto=\\\"matAutocomplete\\\">\\n      <mat-option *ngFor=\\\"let state of filteredStates | async\\\" [value]=\\\"state.name\\\">\\n        <img class=\\\"example-option-img\\\" aria-hidden [src]=\\\"state.flag\\\" height=\\\"25\\\">\\n        <span>{{state.name}}</span> |\\n        <small>Population: {{state.population}}</small>\\n      </mat-option>\\n    </mat-autocomplete>\\n  </mat-form-field>\\n\\n  <br>\\n\\n  <mat-slide-toggle\\n    [checked]=\\\"stateCtrl.disabled\\\"\\n    (change)=\\\"stateCtrl.disabled ? stateCtrl.enable() : stateCtrl.disable()\\\">\\n    Disable Input?\\n  </mat-slide-toggle>\\n</form>\\n\",\n                        styles: [\".example-form {\\n  min-width: 150px;\\n  max-width: 500px;\\n  width: 100%;\\n}\\n\\n.example-full-width {\\n  width: 100%;\\n}\\n\\n.example-option-img {\\n  vertical-align: middle;\\n  margin-right: 8px;\\n}\\n\\n[dir='rtl'] .example-option-img {\\n  margin-right: 0;\\n  margin-left: 8px;\\n}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        AutocompleteOverviewExample.ctorParameters = function () { return []; };\n        return AutocompleteOverviewExample;\n    }());\n\n    /**\n     * @title Plain input autocomplete\n     */\n    var AutocompletePlainInputExample = /** @class */ (function () {\n        function AutocompletePlainInputExample() {\n            this.control = new forms.FormControl();\n            this.streets = ['Champs-Élysées', 'Lombard Street', 'Abbey Road', 'Fifth Avenue'];\n        }\n        AutocompletePlainInputExample.prototype.ngOnInit = function () {\n            var _this = this;\n            this.filteredStreets = this.control.valueChanges.pipe(operators.startWith(''), operators.map(function (value) { return _this._filter(value); }));\n        };\n        AutocompletePlainInputExample.prototype._filter = function (value) {\n            var _this = this;\n            var filterValue = this._normalizeValue(value);\n            return this.streets.filter(function (street) { return _this._normalizeValue(street).includes(filterValue); });\n        };\n        AutocompletePlainInputExample.prototype._normalizeValue = function (value) {\n            return value.toLowerCase().replace(/\\s/g, '');\n        };\n        AutocompletePlainInputExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'autocomplete-plain-input-example',\n                        template: \"<form class=\\\"example-form\\\">\\n  <input type=\\\"text\\\" placeholder=\\\"Search for a street\\\" [formControl]=\\\"control\\\" [matAutocomplete]=\\\"auto\\\">\\n  <mat-autocomplete #auto=\\\"matAutocomplete\\\">\\n    <mat-option *ngFor=\\\"let street of filteredStreets | async\\\" [value]=\\\"street\\\">\\n      {{street}}\\n    </mat-option>\\n  </mat-autocomplete>\\n</form>\\n\",\n                        styles: [\".example-form {\\n  min-width: 150px;\\n  max-width: 500px;\\n  width: 100%;\\n}\\n\\n.example-full-width {\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        return AutocompletePlainInputExample;\n    }());\n\n    /**\n     * @title Simple autocomplete\n     */\n    var AutocompleteSimpleExample = /** @class */ (function () {\n        function AutocompleteSimpleExample() {\n            this.myControl = new forms.FormControl();\n            this.options = ['One', 'Two', 'Three'];\n        }\n        AutocompleteSimpleExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'autocomplete-simple-example',\n                        template: \"<form class=\\\"example-form\\\">\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input type=\\\"text\\\" placeholder=\\\"Pick one\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto\\\">\\n    <mat-autocomplete #auto=\\\"matAutocomplete\\\">\\n      <mat-option *ngFor=\\\"let option of options\\\" [value]=\\\"option\\\">\\n        {{option}}\\n      </mat-option>\\n    </mat-autocomplete>\\n  </mat-form-field>\\n</form>\\n\",\n                        styles: [\".example-form {\\n  min-width: 150px;\\n  max-width: 500px;\\n  width: 100%;\\n}\\n\\n.example-full-width {\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        return AutocompleteSimpleExample;\n    }());\n\n    var EXAMPLES = [\n        AutocompleteAutoActiveFirstOptionExample,\n        AutocompleteDisplayExample,\n        AutocompleteFilterExample,\n        AutocompleteOptgroupExample,\n        AutocompleteOverviewExample,\n        AutocompletePlainInputExample,\n        AutocompleteSimpleExample,\n    ];\n    var AutocompleteExamplesModule = /** @class */ (function () {\n        function AutocompleteExamplesModule() {\n        }\n        AutocompleteExamplesModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            common.CommonModule,\n                            autocomplete.MatAutocompleteModule,\n                            formField.MatFormFieldModule,\n                            input.MatInputModule,\n                            slideToggle.MatSlideToggleModule,\n                            forms.FormsModule,\n                            forms.ReactiveFormsModule,\n                        ],\n                        declarations: EXAMPLES,\n                        exports: EXAMPLES,\n                    },] }\n        ];\n        return AutocompleteExamplesModule;\n    }());\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.AutocompleteAutoActiveFirstOptionExample = AutocompleteAutoActiveFirstOptionExample;\n    exports.AutocompleteDisplayExample = AutocompleteDisplayExample;\n    exports.AutocompleteFilterExample = AutocompleteFilterExample;\n    exports.AutocompleteOptgroupExample = AutocompleteOptgroupExample;\n    exports.AutocompleteOverviewExample = AutocompleteOverviewExample;\n    exports.AutocompletePlainInputExample = AutocompletePlainInputExample;\n    exports.AutocompleteSimpleExample = AutocompleteSimpleExample;\n    exports.AutocompleteExamplesModule = AutocompleteExamplesModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-examples-material-autocomplete.umd.js.map\n"]}