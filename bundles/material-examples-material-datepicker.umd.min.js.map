{"version":3,"sources":["src/material-examples/material-examples-material-datepicker.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","materialExamples","material","datepicker","common","core","forms","button","icon","input","rxjs","operators","tslib","moment","this","core$1","tslib_1","_rollupMoment","_rollupMoment__default","DatepickerApiExample","decorators","type","Component","args","selector","template","styles","DatepickerColorExample","DatepickerCustomHeaderExample","exampleHeader","ExampleHeader","changeDetection","ChangeDetectionStrategy","OnPush","_calendar","_dateAdapter","_dateFormats","cdr","_destroyed","Subject","stateChanges","pipe","takeUntil","subscribe","markForCheck","prototype","ngOnDestroy","next","complete","Object","defineProperty","get","format","activeDate","display","monthYearLabel","toLocaleUpperCase","enumerable","configurable","previousClicked","mode","addCalendarMonths","addCalendarYears","nextClicked","ctorParameters","MatCalendar","DateAdapter","undefined","Inject","MAT_DATE_FORMATS","ChangeDetectorRef","DatepickerCustomIconExample","DatepickerDateClassExample","dateClass","d","date","getDate","encapsulation","ViewEncapsulation","None","DatepickerDisabledExample","DatepickerEventsExample","events","addEvent","event","push","value","DatepickerFilterExample","myFilter","day","getDay","MAT_MOMENT_DATE_ADAPTER_OPTIONS","InjectionToken","providedIn","MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY","useUtc","range","length","valueFunction","valuesArray","Array","i","MomentDateAdapter","_super","dateLocale","_options","_this","call","setLocale","locale","__extends","momentLocaleData","localeData","_localeData","firstDayOfWeek","longMonths","months","shortMonths","monthsShort","dates","createDate","longDaysOfWeek","weekdays","shortDaysOfWeek","weekdaysShort","narrowDaysOfWeek","weekdaysMin","getYear","clone","year","getMonth","month","getDayOfWeek","getMonthNames","style","getDateNames","getDayOfWeekNames","getYearName","getFirstDayOfWeek","getNumDaysInMonth","daysInMonth","Error","result","_createMoment","isValid","today","parse","parseFormat","displayFormat","years","add","addCalendarDays","days","toIso8601","deserialize","Date","isDateInstance","ISO_8601","obj","isMoment","invalid","_a","strict","utc","__decorate","Injectable","__param","Optional","MAT_DATE_LOCALE","__metadata","String","MAT_MOMENT_DATE_FORMATS","dateInput","dateA11yLabel","monthYearA11yLabel","MomentDateModule","NgModule","providers","provide","useClass","deps","ɵ0","moment$1","MatMomentDateModule","imports","useValue","MY_FORMATS","DatepickerFormatsExample","FormControl","ɵ0$1","DatepickerLocaleExample","_adapter","french","DatepickerMinMaxExample","minDate","maxDate","moment$2","ɵ0$2","DatepickerMomentExample","DatepickerOverviewExample","DatepickerStartViewExample","startDate","DatepickerTouchExample","DatepickerValueExample","serializedDate","toISOString","moment$3","MY_FORMATS$1","DatepickerViewsSelectionExample","chosenYearHandler","normalizedYear","ctrlValue","setValue","chosenMonthHandler","normalizedMonth","close","EXAMPLES","DatepickerExamplesModule","CommonModule","MatButtonModule","MatDatepickerModule","MatInputModule","MatIconModule","MatNativeDateModule","ReactiveFormsModule","declarations","ɵangular_material_src_material_examples_material_datepicker_datepicker_a","ɵangular_material_src_material_examples_material_datepicker_datepicker_b"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/forms'), require('@angular/material/button'), require('@angular/material/core'), require('@angular/material/datepicker'), require('@angular/material/icon'), require('@angular/material/input'), require('rxjs'), require('rxjs/operators'), require('tslib'), require('moment')) :\n    typeof define === 'function' && define.amd ? define('@angular/material-examples/material/datepicker', ['exports', '@angular/common', '@angular/core', '@angular/forms', '@angular/material/button', '@angular/material/core', '@angular/material/datepicker', '@angular/material/icon', '@angular/material/input', 'rxjs', 'rxjs/operators', 'tslib', 'moment'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.materialExamples = global.ng.materialExamples || {}, global.ng.materialExamples.material = global.ng.materialExamples.material || {}, global.ng.materialExamples.material.datepicker = {}), global.ng.common, global.ng.core, global.ng.forms, global.ng.material.button, global.ng.material.core, global.ng.material.datepicker, global.ng.material.icon, global.ng.material.input, global.rxjs, global.rxjs.operators, global.tslib, global.moment));\n}(this, function (exports, common, core, forms, button, core$1, datepicker, icon, input, rxjs, operators, tslib_1, _rollupMoment) { 'use strict';\n\n    var _rollupMoment__default = 'default' in _rollupMoment ? _rollupMoment['default'] : _rollupMoment;\n\n    /** @title Datepicker open method */\n    var DatepickerApiExample = /** @class */ (function () {\n        function DatepickerApiExample() {\n        }\n        DatepickerApiExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'datepicker-api-example',\n                        template: \"<mat-form-field class=\\\"example-full-width\\\">\\n  <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Choose a date\\\">\\n  <mat-datepicker #picker></mat-datepicker>\\n</mat-form-field>\\n<button mat-raised-button (click)=\\\"picker.open()\\\">Open</button>\\n\",\n                        styles: [\"mat-form-field {\\n  margin-right: 12px;\\n}\\n\"]\n                    }] }\n        ];\n        return DatepickerApiExample;\n    }());\n\n    /** @title Datepicker palette colors */\n    var DatepickerColorExample = /** @class */ (function () {\n        function DatepickerColorExample() {\n        }\n        DatepickerColorExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'datepicker-color-example',\n                        template: \"<mat-form-field color=\\\"accent\\\">\\n  <mat-label>Inherited calendar color</mat-label>\\n  <input matInput [matDatepicker]=\\\"picker1\\\">\\n  <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\n  <mat-datepicker #picker1></mat-datepicker>\\n</mat-form-field>\\n\\n<mat-form-field color=\\\"accent\\\">\\n  <mat-label>Custom calendar color</mat-label>\\n  <input matInput [matDatepicker]=\\\"picker2\\\">\\n  <mat-datepicker-toggle matSuffix [for]=\\\"picker2\\\"></mat-datepicker-toggle>\\n  <mat-datepicker #picker2 color=\\\"primary\\\"></mat-datepicker>\\n</mat-form-field>\\n\",\n                        styles: [\"mat-form-field {\\n  margin-right: 12px;\\n}\\n\"]\n                    }] }\n        ];\n        return DatepickerColorExample;\n    }());\n\n    /** @title Datepicker with custom calendar header */\n    var DatepickerCustomHeaderExample = /** @class */ (function () {\n        function DatepickerCustomHeaderExample() {\n            this.exampleHeader = ExampleHeader;\n        }\n        DatepickerCustomHeaderExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'datepicker-custom-header-example',\n                        template: \"<mat-form-field>\\n  <mat-label>Custom calendar header</mat-label>\\n  <input matInput [matDatepicker]=\\\"picker\\\">\\n  <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n  <mat-datepicker #picker [calendarHeaderComponent]=\\\"exampleHeader\\\"></mat-datepicker>\\n</mat-form-field>\\n\",\n                        changeDetection: core.ChangeDetectionStrategy.OnPush\n                    }] }\n        ];\n        return DatepickerCustomHeaderExample;\n    }());\n    /** Custom header component for datepicker. */\n    var ExampleHeader = /** @class */ (function () {\n        function ExampleHeader(_calendar, _dateAdapter, _dateFormats, cdr) {\n            this._calendar = _calendar;\n            this._dateAdapter = _dateAdapter;\n            this._dateFormats = _dateFormats;\n            this._destroyed = new rxjs.Subject();\n            _calendar.stateChanges\n                .pipe(operators.takeUntil(this._destroyed))\n                .subscribe(function () { return cdr.markForCheck(); });\n        }\n        ExampleHeader.prototype.ngOnDestroy = function () {\n            this._destroyed.next();\n            this._destroyed.complete();\n        };\n        Object.defineProperty(ExampleHeader.prototype, \"periodLabel\", {\n            get: function () {\n                return this._dateAdapter\n                    .format(this._calendar.activeDate, this._dateFormats.display.monthYearLabel)\n                    .toLocaleUpperCase();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ExampleHeader.prototype.previousClicked = function (mode) {\n            this._calendar.activeDate = mode === 'month' ?\n                this._dateAdapter.addCalendarMonths(this._calendar.activeDate, -1) :\n                this._dateAdapter.addCalendarYears(this._calendar.activeDate, -1);\n        };\n        ExampleHeader.prototype.nextClicked = function (mode) {\n            this._calendar.activeDate = mode === 'month' ?\n                this._dateAdapter.addCalendarMonths(this._calendar.activeDate, 1) :\n                this._dateAdapter.addCalendarYears(this._calendar.activeDate, 1);\n        };\n        ExampleHeader.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'example-header',\n                        template: \"\\n    <div class=\\\"example-header\\\">\\n      <button mat-icon-button class=\\\"example-double-arrow\\\" (click)=\\\"previousClicked('year')\\\">\\n        <mat-icon>keyboard_arrow_left</mat-icon>\\n        <mat-icon>keyboard_arrow_left</mat-icon>\\n      </button>\\n      <button mat-icon-button (click)=\\\"previousClicked('month')\\\">\\n        <mat-icon>keyboard_arrow_left</mat-icon>\\n      </button>\\n      <span class=\\\"example-header-label\\\">{{periodLabel}}</span>\\n      <button mat-icon-button (click)=\\\"nextClicked('month')\\\">\\n        <mat-icon>keyboard_arrow_right</mat-icon>\\n      </button>\\n      <button mat-icon-button class=\\\"example-double-arrow\\\" (click)=\\\"nextClicked('year')\\\">\\n        <mat-icon>keyboard_arrow_right</mat-icon>\\n        <mat-icon>keyboard_arrow_right</mat-icon>\\n      </button>\\n    </div>\\n  \",\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        styles: [\"\\n    .example-header {\\n      display: flex;\\n      align-items: center;\\n      padding: 0.5em;\\n    }\\n\\n    .example-header-label {\\n      flex: 1;\\n      height: 1em;\\n      font-weight: 500;\\n      text-align: center;\\n    }\\n\\n    .example-double-arrow .mat-icon {\\n      margin: -22%;\\n    }\\n  \"]\n                    }] }\n        ];\n        /** @nocollapse */\n        ExampleHeader.ctorParameters = function () { return [\n            { type: datepicker.MatCalendar },\n            { type: core$1.DateAdapter },\n            { type: undefined, decorators: [{ type: core.Inject, args: [core$1.MAT_DATE_FORMATS,] }] },\n            { type: core.ChangeDetectorRef }\n        ]; };\n        return ExampleHeader;\n    }());\n\n    /** @title Datepicker with custom icon */\n    var DatepickerCustomIconExample = /** @class */ (function () {\n        function DatepickerCustomIconExample() {\n        }\n        DatepickerCustomIconExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'datepicker-custom-icon-example',\n                        template: \"<mat-form-field class=\\\"example-full-width\\\">\\n  <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Choose a date\\\">\\n  <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\">\\n    <mat-icon matDatepickerToggleIcon>keyboard_arrow_down</mat-icon>\\n  </mat-datepicker-toggle>\\n  <mat-datepicker #picker></mat-datepicker>\\n</mat-form-field>\\n\",\n                        styles: [\"/** No CSS for this example */\\n\"]\n                    }] }\n        ];\n        return DatepickerCustomIconExample;\n    }());\n\n    /** @title Datepicker with custom date classes */\n    var DatepickerDateClassExample = /** @class */ (function () {\n        function DatepickerDateClassExample() {\n            this.dateClass = function (d) {\n                var date = d.getDate();\n                // Highlight the 1st and 20th day of each month.\n                return (date === 1 || date === 20) ? 'example-custom-date-class' : undefined;\n            };\n        }\n        DatepickerDateClassExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'datepicker-date-class-example',\n                        template: \"<mat-form-field class=\\\"example-full-width\\\">\\n  <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Choose a date\\\">\\n  <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n  <mat-datepicker [dateClass]=\\\"dateClass\\\" #picker></mat-datepicker>\\n</mat-form-field>\\n\",\n                        encapsulation: core.ViewEncapsulation.None,\n                        styles: [\".example-custom-date-class {\\n  background: orange;\\n  border-radius: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        return DatepickerDateClassExample;\n    }());\n\n    /** @title Disabled datepicker */\n    var DatepickerDisabledExample = /** @class */ (function () {\n        function DatepickerDisabledExample() {\n        }\n        DatepickerDisabledExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'datepicker-disabled-example',\n                        template: \"<p>\\n  <mat-form-field>\\n    <input matInput [matDatepicker]=\\\"dp1\\\" placeholder=\\\"Completely disabled\\\" disabled>\\n    <mat-datepicker-toggle matSuffix [for]=\\\"dp1\\\"></mat-datepicker-toggle>\\n    <mat-datepicker #dp1></mat-datepicker>\\n  </mat-form-field>\\n</p>\\n\\n<p>\\n  <mat-form-field>\\n    <input matInput [matDatepicker]=\\\"dp2\\\" placeholder=\\\"Popup disabled\\\">\\n    <mat-datepicker-toggle matSuffix [for]=\\\"dp2\\\" disabled></mat-datepicker-toggle>\\n    <mat-datepicker #dp2></mat-datepicker>\\n  </mat-form-field>\\n</p>\\n\\n<p>\\n  <mat-form-field>\\n    <input matInput [matDatepicker]=\\\"dp3\\\" placeholder=\\\"Input disabled\\\" disabled>\\n    <mat-datepicker-toggle matSuffix [for]=\\\"dp3\\\"></mat-datepicker-toggle>\\n    <mat-datepicker #dp3 disabled=\\\"false\\\"></mat-datepicker>\\n  </mat-form-field>\\n</p>\\n\",\n                        styles: [\"/** No CSS for this example */\\n\"]\n                    }] }\n        ];\n        return DatepickerDisabledExample;\n    }());\n\n    /** @title Datepicker input and change events */\n    var DatepickerEventsExample = /** @class */ (function () {\n        function DatepickerEventsExample() {\n            this.events = [];\n        }\n        DatepickerEventsExample.prototype.addEvent = function (type, event) {\n            this.events.push(type + \": \" + event.value);\n        };\n        DatepickerEventsExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'datepicker-events-example',\n                        template: \"<mat-form-field>\\n  <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Input & change events\\\"\\n         (dateInput)=\\\"addEvent('input', $event)\\\" (dateChange)=\\\"addEvent('change', $event)\\\">\\n  <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n  <mat-datepicker #picker></mat-datepicker>\\n</mat-form-field>\\n\\n<div class=\\\"example-events\\\">\\n  <div *ngFor=\\\"let e of events\\\">{{e}}</div>\\n</div>\\n\",\n                        styles: [\".example-events {\\n  width: 400px;\\n  height: 200px;\\n  border: 1px solid #555;\\n  overflow: auto;\\n}\\n\"]\n                    }] }\n        ];\n        return DatepickerEventsExample;\n    }());\n\n    /** @title Datepicker with filter validation */\n    var DatepickerFilterExample = /** @class */ (function () {\n        function DatepickerFilterExample() {\n            this.myFilter = function (d) {\n                var day = d.getDay();\n                // Prevent Saturday and Sunday from being selected.\n                return day !== 0 && day !== 6;\n            };\n        }\n        DatepickerFilterExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'datepicker-filter-example',\n                        template: \"<mat-form-field class=\\\"example-full-width\\\">\\n  <input matInput [matDatepickerFilter]=\\\"myFilter\\\" [matDatepicker]=\\\"picker\\\" placeholder=\\\"Choose a date\\\">\\n  <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n  <mat-datepicker #picker></mat-datepicker>\\n</mat-form-field>\\n\",\n                        styles: [\"/** No CSS for this example */\\n\"]\n                    }] }\n        ];\n        return DatepickerFilterExample;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var moment = _rollupMoment__default || _rollupMoment;\n    /** InjectionToken for moment date adapter to configure options. */\n    var MAT_MOMENT_DATE_ADAPTER_OPTIONS = new core.InjectionToken('MAT_MOMENT_DATE_ADAPTER_OPTIONS', {\n        providedIn: 'root',\n        factory: MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY\n    });\n    /** @docs-private */\n    function MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY() {\n        return {\n            useUtc: false\n        };\n    }\n    /** Creates an array and fills it with values. */\n    function range(length, valueFunction) {\n        var valuesArray = Array(length);\n        for (var i = 0; i < length; i++) {\n            valuesArray[i] = valueFunction(i);\n        }\n        return valuesArray;\n    }\n    /** Adapts Moment.js Dates for use with Angular Material. */\n    var MomentDateAdapter = /** @class */ (function (_super) {\n        tslib_1.__extends(MomentDateAdapter, _super);\n        function MomentDateAdapter(dateLocale, _options) {\n            var _this = _super.call(this) || this;\n            _this._options = _options;\n            _this.setLocale(dateLocale || moment.locale());\n            return _this;\n        }\n        MomentDateAdapter.prototype.setLocale = function (locale) {\n            var _this = this;\n            _super.prototype.setLocale.call(this, locale);\n            var momentLocaleData = moment.localeData(locale);\n            this._localeData = {\n                firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\n                longMonths: momentLocaleData.months(),\n                shortMonths: momentLocaleData.monthsShort(),\n                dates: range(31, function (i) { return _this.createDate(2017, 0, i + 1).format('D'); }),\n                longDaysOfWeek: momentLocaleData.weekdays(),\n                shortDaysOfWeek: momentLocaleData.weekdaysShort(),\n                narrowDaysOfWeek: momentLocaleData.weekdaysMin(),\n            };\n        };\n        MomentDateAdapter.prototype.getYear = function (date) {\n            return this.clone(date).year();\n        };\n        MomentDateAdapter.prototype.getMonth = function (date) {\n            return this.clone(date).month();\n        };\n        MomentDateAdapter.prototype.getDate = function (date) {\n            return this.clone(date).date();\n        };\n        MomentDateAdapter.prototype.getDayOfWeek = function (date) {\n            return this.clone(date).day();\n        };\n        MomentDateAdapter.prototype.getMonthNames = function (style) {\n            // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.\n            return style == 'long' ? this._localeData.longMonths : this._localeData.shortMonths;\n        };\n        MomentDateAdapter.prototype.getDateNames = function () {\n            return this._localeData.dates;\n        };\n        MomentDateAdapter.prototype.getDayOfWeekNames = function (style) {\n            if (style == 'long') {\n                return this._localeData.longDaysOfWeek;\n            }\n            if (style == 'short') {\n                return this._localeData.shortDaysOfWeek;\n            }\n            return this._localeData.narrowDaysOfWeek;\n        };\n        MomentDateAdapter.prototype.getYearName = function (date) {\n            return this.clone(date).format('YYYY');\n        };\n        MomentDateAdapter.prototype.getFirstDayOfWeek = function () {\n            return this._localeData.firstDayOfWeek;\n        };\n        MomentDateAdapter.prototype.getNumDaysInMonth = function (date) {\n            return this.clone(date).daysInMonth();\n        };\n        MomentDateAdapter.prototype.clone = function (date) {\n            return date.clone().locale(this.locale);\n        };\n        MomentDateAdapter.prototype.createDate = function (year, month, date) {\n            // Moment.js will create an invalid date if any of the components are out of bounds, but we\n            // explicitly check each case so we can throw more descriptive errors.\n            if (month < 0 || month > 11) {\n                throw Error(\"Invalid month index \\\"\" + month + \"\\\". Month index has to be between 0 and 11.\");\n            }\n            if (date < 1) {\n                throw Error(\"Invalid date \\\"\" + date + \"\\\". Date has to be greater than 0.\");\n            }\n            var result = this._createMoment({ year: year, month: month, date: date }).locale(this.locale);\n            // If the result isn't valid, the date must have been out of bounds for this month.\n            if (!result.isValid()) {\n                throw Error(\"Invalid date \\\"\" + date + \"\\\" for month with index \\\"\" + month + \"\\\".\");\n            }\n            return result;\n        };\n        MomentDateAdapter.prototype.today = function () {\n            return this._createMoment().locale(this.locale);\n        };\n        MomentDateAdapter.prototype.parse = function (value, parseFormat) {\n            if (value && typeof value == 'string') {\n                return this._createMoment(value, parseFormat, this.locale);\n            }\n            return value ? this._createMoment(value).locale(this.locale) : null;\n        };\n        MomentDateAdapter.prototype.format = function (date, displayFormat) {\n            date = this.clone(date);\n            if (!this.isValid(date)) {\n                throw Error('MomentDateAdapter: Cannot format invalid date.');\n            }\n            return date.format(displayFormat);\n        };\n        MomentDateAdapter.prototype.addCalendarYears = function (date, years) {\n            return this.clone(date).add({ years: years });\n        };\n        MomentDateAdapter.prototype.addCalendarMonths = function (date, months) {\n            return this.clone(date).add({ months: months });\n        };\n        MomentDateAdapter.prototype.addCalendarDays = function (date, days) {\n            return this.clone(date).add({ days: days });\n        };\n        MomentDateAdapter.prototype.toIso8601 = function (date) {\n            return this.clone(date).format();\n        };\n        /**\n         * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\n         * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\n         * string into null. Returns an invalid date for all other values.\n         */\n        MomentDateAdapter.prototype.deserialize = function (value) {\n            var date;\n            if (value instanceof Date) {\n                date = this._createMoment(value).locale(this.locale);\n            }\n            else if (this.isDateInstance(value)) {\n                // Note: assumes that cloning also sets the correct locale.\n                return this.clone(value);\n            }\n            if (typeof value === 'string') {\n                if (!value) {\n                    return null;\n                }\n                date = this._createMoment(value, moment.ISO_8601).locale(this.locale);\n            }\n            if (date && this.isValid(date)) {\n                return this._createMoment(date).locale(this.locale);\n            }\n            return _super.prototype.deserialize.call(this, value);\n        };\n        MomentDateAdapter.prototype.isDateInstance = function (obj) {\n            return moment.isMoment(obj);\n        };\n        MomentDateAdapter.prototype.isValid = function (date) {\n            return this.clone(date).isValid();\n        };\n        MomentDateAdapter.prototype.invalid = function () {\n            return moment.invalid();\n        };\n        /** Creates a Moment instance while respecting the current UTC settings. */\n        MomentDateAdapter.prototype._createMoment = function (date, format, locale) {\n            var _a = this._options || {}, strict = _a.strict, useUtc = _a.useUtc;\n            return useUtc\n                ? moment.utc(date, format, locale, strict)\n                : moment(date, format, locale, strict);\n        };\n        MomentDateAdapter = tslib_1.__decorate([\n            core.Injectable(),\n            tslib_1.__param(0, core.Optional()), tslib_1.__param(0, core.Inject(core$1.MAT_DATE_LOCALE)),\n            tslib_1.__param(1, core.Optional()), tslib_1.__param(1, core.Inject(MAT_MOMENT_DATE_ADAPTER_OPTIONS)),\n            tslib_1.__metadata(\"design:paramtypes\", [String, Object])\n        ], MomentDateAdapter);\n        return MomentDateAdapter;\n    }(core$1.DateAdapter));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MAT_MOMENT_DATE_FORMATS = {\n        parse: {\n            dateInput: 'l',\n        },\n        display: {\n            dateInput: 'l',\n            monthYearLabel: 'MMM YYYY',\n            dateA11yLabel: 'LL',\n            monthYearA11yLabel: 'MMMM YYYY',\n        },\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MomentDateModule = /** @class */ (function () {\n        function MomentDateModule() {\n        }\n        MomentDateModule = tslib_1.__decorate([\n            core.NgModule({\n                providers: [\n                    {\n                        provide: core$1.DateAdapter,\n                        useClass: MomentDateAdapter,\n                        deps: [core$1.MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n                    }\n                ],\n            })\n        ], MomentDateModule);\n        return MomentDateModule;\n    }());\n    var ɵ0 = MAT_MOMENT_DATE_FORMATS;\n    var MatMomentDateModule = /** @class */ (function () {\n        function MatMomentDateModule() {\n        }\n        MatMomentDateModule = tslib_1.__decorate([\n            core.NgModule({\n                imports: [MomentDateModule],\n                providers: [{ provide: core$1.MAT_DATE_FORMATS, useValue: ɵ0 }],\n            })\n        ], MatMomentDateModule);\n        return MatMomentDateModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    var moment$1 = _rollupMoment__default || _rollupMoment;\n    // See the Moment.js docs for the meaning of these formats:\n    // https://momentjs.com/docs/#/displaying/format/\n    var MY_FORMATS = {\n        parse: {\n            dateInput: 'LL',\n        },\n        display: {\n            dateInput: 'LL',\n            monthYearLabel: 'MMM YYYY',\n            dateA11yLabel: 'LL',\n            monthYearA11yLabel: 'MMMM YYYY',\n        },\n    };\n    /** @title Datepicker with custom formats */\n    var DatepickerFormatsExample = /** @class */ (function () {\n        function DatepickerFormatsExample() {\n            this.date = new forms.FormControl(moment$1());\n        }\n        DatepickerFormatsExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'datepicker-formats-example',\n                        template: \"<mat-form-field>\\n  <input matInput [matDatepicker]=\\\"dp\\\" placeholder=\\\"Verbose datepicker\\\" [formControl]=\\\"date\\\">\\n  <mat-datepicker-toggle matSuffix [for]=\\\"dp\\\"></mat-datepicker-toggle>\\n  <mat-datepicker #dp></mat-datepicker>\\n</mat-form-field>\\n\",\n                        providers: [\n                            // `MomentDateAdapter` can be automatically provided by importing `MomentDateModule` in your\n                            // application's root module. We provide it at the component level here, due to limitations of\n                            // our example generation script.\n                            { provide: core$1.DateAdapter, useClass: MomentDateAdapter, deps: [core$1.MAT_DATE_LOCALE] },\n                            { provide: core$1.MAT_DATE_FORMATS, useValue: MY_FORMATS },\n                        ],\n                        styles: [\"/** No CSS for this example */\\n\"]\n                    }] }\n        ];\n        return DatepickerFormatsExample;\n    }());\n\n    var ɵ0$1 = MAT_MOMENT_DATE_FORMATS;\n    /** @title Datepicker with different locale */\n    var DatepickerLocaleExample = /** @class */ (function () {\n        function DatepickerLocaleExample(_adapter) {\n            this._adapter = _adapter;\n        }\n        DatepickerLocaleExample.prototype.french = function () {\n            this._adapter.setLocale('fr');\n        };\n        DatepickerLocaleExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'datepicker-locale-example',\n                        template: \"<mat-form-field>\\n  <input matInput [matDatepicker]=\\\"dp\\\" placeholder=\\\"Different locale\\\">\\n  <mat-datepicker-toggle matSuffix [for]=\\\"dp\\\"></mat-datepicker-toggle>\\n  <mat-datepicker #dp></mat-datepicker>\\n</mat-form-field>\\n\\n<button mat-button (click)=\\\"french()\\\">Dynamically switch to French</button>\\n\",\n                        providers: [\n                            // The locale would typically be provided on the root module of your application. We do it at\n                            // the component level here, due to limitations of our example generation script.\n                            { provide: core$1.MAT_DATE_LOCALE, useValue: 'ja-JP' },\n                            // `MomentDateAdapter` and `MAT_MOMENT_DATE_FORMATS` can be automatically provided by importing\n                            // `MatMomentDateModule` in your applications root module. We provide it at the component level\n                            // here, due to limitations of our example generation script.\n                            { provide: core$1.DateAdapter, useClass: MomentDateAdapter, deps: [core$1.MAT_DATE_LOCALE] },\n                            { provide: core$1.MAT_DATE_FORMATS, useValue: ɵ0$1 },\n                        ],\n                        styles: [\"mat-form-field {\\n  margin-right: 12px;\\n}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        DatepickerLocaleExample.ctorParameters = function () { return [\n            { type: core$1.DateAdapter }\n        ]; };\n        return DatepickerLocaleExample;\n    }());\n\n    /** @title Datepicker with min & max validation */\n    var DatepickerMinMaxExample = /** @class */ (function () {\n        function DatepickerMinMaxExample() {\n            this.minDate = new Date(2000, 0, 1);\n            this.maxDate = new Date(2020, 0, 1);\n        }\n        DatepickerMinMaxExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'datepicker-min-max-example',\n                        template: \"<mat-form-field class=\\\"example-full-width\\\">\\n  <input matInput [min]=\\\"minDate\\\" [max]=\\\"maxDate\\\" [matDatepicker]=\\\"picker\\\" placeholder=\\\"Choose a date\\\">\\n  <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n  <mat-datepicker #picker></mat-datepicker>\\n</mat-form-field>\\n\",\n                        styles: [\"/** No CSS for this example */\\n\"]\n                    }] }\n        ];\n        return DatepickerMinMaxExample;\n    }());\n\n    var moment$2 = _rollupMoment__default || _rollupMoment;\n    var ɵ0$2 = MAT_MOMENT_DATE_FORMATS;\n    /** @title Datepicker that uses Moment.js dates */\n    var DatepickerMomentExample = /** @class */ (function () {\n        function DatepickerMomentExample() {\n            // Datepicker takes `Moment` objects instead of `Date` objects.\n            this.date = new forms.FormControl(moment$2([2017, 0, 1]));\n        }\n        DatepickerMomentExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'datepicker-moment-example',\n                        template: \"<mat-form-field>\\n  <input matInput [matDatepicker]=\\\"dp\\\" placeholder=\\\"Moment.js datepicker\\\" [formControl]=\\\"date\\\">\\n  <mat-datepicker-toggle matSuffix [for]=\\\"dp\\\"></mat-datepicker-toggle>\\n  <mat-datepicker #dp></mat-datepicker>\\n</mat-form-field>\\n\",\n                        providers: [\n                            // `MomentDateAdapter` and `MAT_MOMENT_DATE_FORMATS` can be automatically provided by importing\n                            // `MatMomentDateModule` in your applications root module. We provide it at the component level\n                            // here, due to limitations of our example generation script.\n                            { provide: core$1.DateAdapter, useClass: MomentDateAdapter, deps: [core$1.MAT_DATE_LOCALE] },\n                            { provide: core$1.MAT_DATE_FORMATS, useValue: ɵ0$2 },\n                        ],\n                        styles: [\"/** No CSS for this example */\\n\"]\n                    }] }\n        ];\n        return DatepickerMomentExample;\n    }());\n\n    /** @title Basic datepicker */\n    var DatepickerOverviewExample = /** @class */ (function () {\n        function DatepickerOverviewExample() {\n        }\n        DatepickerOverviewExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'datepicker-overview-example',\n                        template: \"<mat-form-field>\\n  <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Choose a date\\\">\\n  <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n  <mat-datepicker #picker></mat-datepicker>\\n</mat-form-field>\\n\",\n                        styles: [\"/** No CSS for this example */\\n\"]\n                    }] }\n        ];\n        return DatepickerOverviewExample;\n    }());\n\n    /** @title Datepicker start date */\n    var DatepickerStartViewExample = /** @class */ (function () {\n        function DatepickerStartViewExample() {\n            this.startDate = new Date(1990, 0, 1);\n        }\n        DatepickerStartViewExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'datepicker-start-view-example',\n                        template: \"<mat-form-field>\\n  <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Choose a date\\\">\\n  <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n  <mat-datepicker #picker startView=\\\"year\\\" [startAt]=\\\"startDate\\\"></mat-datepicker>\\n</mat-form-field>\\n\",\n                        styles: [\"/** No CSS for this example */\\n\"]\n                    }] }\n        ];\n        return DatepickerStartViewExample;\n    }());\n\n    /** @title Datepicker touch UI */\n    var DatepickerTouchExample = /** @class */ (function () {\n        function DatepickerTouchExample() {\n        }\n        DatepickerTouchExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'datepicker-touch-example',\n                        template: \"<mat-form-field class=\\\"example-full-width\\\">\\n  <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Choose a date\\\">\\n  <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n  <mat-datepicker touchUi #picker></mat-datepicker>\\n</mat-form-field>\\n\",\n                        styles: [\"/** No CSS for this example */\\n\"]\n                    }] }\n        ];\n        return DatepickerTouchExample;\n    }());\n\n    /** @title Datepicker selected value */\n    var DatepickerValueExample = /** @class */ (function () {\n        function DatepickerValueExample() {\n            this.date = new forms.FormControl(new Date());\n            this.serializedDate = new forms.FormControl((new Date()).toISOString());\n        }\n        DatepickerValueExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'datepicker-value-example',\n                        template: \"<mat-form-field>\\n  <input matInput [matDatepicker]=\\\"picker1\\\" placeholder=\\\"Angular forms\\\" [formControl]=\\\"date\\\">\\n  <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\n  <mat-datepicker #picker1></mat-datepicker>\\n</mat-form-field>\\n\\n<mat-form-field>\\n  <input matInput [matDatepicker]=\\\"picker2\\\" placeholder=\\\"Angular forms (w/ deserialization)\\\"\\n         [formControl]=\\\"serializedDate\\\">\\n  <mat-datepicker-toggle matSuffix [for]=\\\"picker2\\\"></mat-datepicker-toggle>\\n  <mat-datepicker #picker2></mat-datepicker>\\n</mat-form-field>\\n\\n<mat-form-field>\\n  <input matInput [matDatepicker]=\\\"picker3\\\" placeholder=\\\"Value binding\\\" [value]=\\\"date.value\\\">\\n  <mat-datepicker-toggle matSuffix [for]=\\\"picker3\\\"></mat-datepicker-toggle>\\n  <mat-datepicker #picker3></mat-datepicker>\\n</mat-form-field>\\n\",\n                        styles: [\"mat-form-field {\\n  margin-right: 12px;\\n}\\n\"]\n                    }] }\n        ];\n        return DatepickerValueExample;\n    }());\n\n    var moment$3 = _rollupMoment__default || _rollupMoment;\n    // See the Moment.js docs for the meaning of these formats:\n    // https://momentjs.com/docs/#/displaying/format/\n    var MY_FORMATS$1 = {\n        parse: {\n            dateInput: 'MM/YYYY',\n        },\n        display: {\n            dateInput: 'MM/YYYY',\n            monthYearLabel: 'MMM YYYY',\n            dateA11yLabel: 'LL',\n            monthYearA11yLabel: 'MMMM YYYY',\n        },\n    };\n    /** @title Datepicker emulating a Year and month picker */\n    var DatepickerViewsSelectionExample = /** @class */ (function () {\n        function DatepickerViewsSelectionExample() {\n            this.date = new forms.FormControl(moment$3());\n        }\n        DatepickerViewsSelectionExample.prototype.chosenYearHandler = function (normalizedYear) {\n            var ctrlValue = this.date.value;\n            ctrlValue.year(normalizedYear.year());\n            this.date.setValue(ctrlValue);\n        };\n        DatepickerViewsSelectionExample.prototype.chosenMonthHandler = function (normalizedMonth, datepicker) {\n            var ctrlValue = this.date.value;\n            ctrlValue.month(normalizedMonth.month());\n            this.date.setValue(ctrlValue);\n            datepicker.close();\n        };\n        DatepickerViewsSelectionExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'datepicker-views-selection-example',\n                        template: \"<mat-form-field>\\n  <input matInput [matDatepicker]=\\\"dp\\\" placeholder=\\\"Month and Year\\\" [formControl]=\\\"date\\\">\\n  <mat-datepicker-toggle matSuffix [for]=\\\"dp\\\"></mat-datepicker-toggle>\\n  <mat-datepicker #dp\\n                  startView=\\\"multi-year\\\"\\n                  (yearSelected)=\\\"chosenYearHandler($event)\\\"\\n                  (monthSelected)=\\\"chosenMonthHandler($event, dp)\\\"\\n                  panelClass=\\\"example-month-picker\\\">\\n  </mat-datepicker>\\n</mat-form-field>\\n\",\n                        providers: [\n                            // `MomentDateAdapter` can be automatically provided by importing `MomentDateModule` in your\n                            // application's root module. We provide it at the component level here, due to limitations of\n                            // our example generation script.\n                            { provide: core$1.DateAdapter, useClass: MomentDateAdapter, deps: [core$1.MAT_DATE_LOCALE] },\n                            { provide: core$1.MAT_DATE_FORMATS, useValue: MY_FORMATS$1 },\n                        ],\n                        styles: [\".example-month-picker .mat-calendar-period-button {\\n  pointer-events: none;\\n}\\n\\n.example-month-picker .mat-calendar-arrow {\\n  display: none;\\n}\\n\"]\n                    }] }\n        ];\n        return DatepickerViewsSelectionExample;\n    }());\n\n    var EXAMPLES = [\n        DatepickerApiExample,\n        DatepickerColorExample,\n        DatepickerCustomHeaderExample,\n        DatepickerCustomIconExample,\n        DatepickerDateClassExample,\n        DatepickerDisabledExample,\n        DatepickerEventsExample,\n        DatepickerFilterExample,\n        DatepickerFormatsExample,\n        DatepickerLocaleExample,\n        DatepickerMinMaxExample,\n        DatepickerMomentExample,\n        DatepickerOverviewExample,\n        DatepickerStartViewExample,\n        DatepickerTouchExample,\n        DatepickerValueExample,\n        DatepickerViewsSelectionExample,\n        ExampleHeader,\n    ];\n    var DatepickerExamplesModule = /** @class */ (function () {\n        function DatepickerExamplesModule() {\n        }\n        DatepickerExamplesModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            common.CommonModule,\n                            button.MatButtonModule,\n                            datepicker.MatDatepickerModule,\n                            input.MatInputModule,\n                            icon.MatIconModule,\n                            core$1.MatNativeDateModule,\n                            forms.ReactiveFormsModule,\n                        ],\n                        declarations: EXAMPLES,\n                        exports: EXAMPLES,\n                    },] }\n        ];\n        return DatepickerExamplesModule;\n    }());\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.ɵangular_material_src_material_examples_material_datepicker_datepicker_a = MY_FORMATS;\n    exports.ɵangular_material_src_material_examples_material_datepicker_datepicker_b = MY_FORMATS$1;\n    exports.DatepickerApiExample = DatepickerApiExample;\n    exports.DatepickerColorExample = DatepickerColorExample;\n    exports.DatepickerCustomHeaderExample = DatepickerCustomHeaderExample;\n    exports.DatepickerCustomIconExample = DatepickerCustomIconExample;\n    exports.DatepickerDateClassExample = DatepickerDateClassExample;\n    exports.DatepickerDisabledExample = DatepickerDisabledExample;\n    exports.DatepickerEventsExample = DatepickerEventsExample;\n    exports.DatepickerFilterExample = DatepickerFilterExample;\n    exports.DatepickerFormatsExample = DatepickerFormatsExample;\n    exports.DatepickerLocaleExample = DatepickerLocaleExample;\n    exports.DatepickerMinMaxExample = DatepickerMinMaxExample;\n    exports.DatepickerMomentExample = DatepickerMomentExample;\n    exports.DatepickerOverviewExample = DatepickerOverviewExample;\n    exports.DatepickerStartViewExample = DatepickerStartViewExample;\n    exports.DatepickerTouchExample = DatepickerTouchExample;\n    exports.DatepickerValueExample = DatepickerValueExample;\n    exports.DatepickerViewsSelectionExample = DatepickerViewsSelectionExample;\n    exports.ExampleHeader = ExampleHeader;\n    exports.DatepickerExamplesModule = DatepickerExamplesModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-examples-material-datepicker.umd.js.map\n"]}