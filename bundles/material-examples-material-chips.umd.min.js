!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/cdk/drag-drop"),require("@angular/common"),require("@angular/core"),require("@angular/forms"),require("@angular/material/autocomplete"),require("@angular/material/chips"),require("@angular/material/form-field"),require("@angular/material/icon"),require("@angular/cdk/keycodes"),require("rxjs/operators")):"function"==typeof define&&define.amd?define("@angular/material-examples/material/chips",["exports","@angular/cdk/drag-drop","@angular/common","@angular/core","@angular/forms","@angular/material/autocomplete","@angular/material/chips","@angular/material/form-field","@angular/material/icon","@angular/cdk/keycodes","rxjs/operators"],t):t(((e=e||self).ng=e.ng||{},e.ng.materialExamples=e.ng.materialExamples||{},e.ng.materialExamples.material=e.ng.materialExamples.material||{},e.ng.materialExamples.material.chips={}),e.ng.cdk.dragDrop,e.ng.common,e.ng.core,e.ng.forms,e.ng.material.autocomplete,e.ng.material.chips,e.ng.material.formField,e.ng.material.icon,e.ng.cdk.keycodes,e.rxjs.operators)}(this,function(e,t,a,r,i,n,o,l,s,p,m){"use strict";var c=function(){function e(){var e=this;this.visible=!0,this.selectable=!0,this.removable=!0,this.addOnBlur=!0,this.separatorKeysCodes=[p.ENTER,p.COMMA],this.fruitCtrl=new i.FormControl,this.fruits=["Lemon"],this.allFruits=["Apple","Lemon","Lime","Orange","Strawberry"],this.filteredFruits=this.fruitCtrl.valueChanges.pipe(m.startWith(null),m.map(function(t){return t?e._filter(t):e.allFruits.slice()}))}return e.prototype.add=function(e){if(!this.matAutocomplete.isOpen){var t=e.input,a=e.value;(a||"").trim()&&this.fruits.push(a.trim()),t&&(t.value=""),this.fruitCtrl.setValue(null)}},e.prototype.remove=function(e){var t=this.fruits.indexOf(e);t>=0&&this.fruits.splice(t,1)},e.prototype.selected=function(e){this.fruits.push(e.option.viewValue),this.fruitInput.nativeElement.value="",this.fruitCtrl.setValue(null)},e.prototype._filter=function(e){var t=e.toLowerCase();return this.allFruits.filter(function(e){return 0===e.toLowerCase().indexOf(t)})},e.decorators=[{type:r.Component,args:[{selector:"chips-autocomplete-example",template:'<mat-form-field class="example-chip-list">\n  <mat-chip-list #chipList aria-label="Fruit selection">\n    <mat-chip\n      *ngFor="let fruit of fruits"\n      [selectable]="selectable"\n      [removable]="removable"\n      (removed)="remove(fruit)">\n      {{fruit}}\n      <mat-icon matChipRemove *ngIf="removable">cancel</mat-icon>\n    </mat-chip>\n    <input\n      placeholder="New fruit..."\n      #fruitInput\n      [formControl]="fruitCtrl"\n      [matAutocomplete]="auto"\n      [matChipInputFor]="chipList"\n      [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n      [matChipInputAddOnBlur]="addOnBlur"\n      (matChipInputTokenEnd)="add($event)">\n  </mat-chip-list>\n  <mat-autocomplete #auto="matAutocomplete" (optionSelected)="selected($event)">\n    <mat-option *ngFor="let fruit of filteredFruits | async" [value]="fruit">\n      {{fruit}}\n    </mat-option>\n  </mat-autocomplete>\n</mat-form-field>\n',styles:[".example-chip-list {\n  width: 100%;\n}\n"]}]}],e.ctorParameters=function(){return[]},e.propDecorators={fruitInput:[{type:r.ViewChild,args:["fruitInput",{static:!1}]}],matAutocomplete:[{type:r.ViewChild,args:["auto",{static:!1}]}]},e}(),u=function(){function e(){this.vegetables=[{name:"apple"},{name:"banana"},{name:"strawberry"},{name:"orange"},{name:"kiwi"},{name:"cherry"}]}return e.prototype.drop=function(e){t.moveItemInArray(this.vegetables,e.previousIndex,e.currentIndex)},e.decorators=[{type:r.Component,args:[{selector:"chips-drag-drop-example",template:'<mat-chip-list\n  class="example-chip"\n  cdkDropList \n  cdkDropListOrientation="horizontal"\n  (cdkDropListDropped)="drop($event)">\n  <mat-chip\n    class="example-box"\n    cdkDrag\n    *ngFor="let vegetable of vegetables">\n    {{vegetable.name}}\n  </mat-chip>\n</mat-chip-list>\n',styles:[".example-box.cdk-drag-animating {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n\n.example-chip .cdk-drop-list-dragging {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n"]}]}],e}(),h=function(){function e(){this.visible=!0,this.selectable=!0,this.removable=!0,this.addOnBlur=!0,this.separatorKeysCodes=[p.ENTER,p.COMMA],this.fruits=[{name:"Lemon"},{name:"Lime"},{name:"Apple"}]}return e.prototype.add=function(e){var t=e.input,a=e.value;(a||"").trim()&&this.fruits.push({name:a.trim()}),t&&(t.value="")},e.prototype.remove=function(e){var t=this.fruits.indexOf(e);t>=0&&this.fruits.splice(t,1)},e.decorators=[{type:r.Component,args:[{selector:"chips-input-example",template:'<mat-form-field class="example-chip-list">\n  <mat-chip-list #chipList aria-label="Fruit selection">\n    <mat-chip *ngFor="let fruit of fruits" [selectable]="selectable"\n             [removable]="removable" (removed)="remove(fruit)">\n      {{fruit.name}}\n      <mat-icon matChipRemove *ngIf="removable">cancel</mat-icon>\n    </mat-chip>\n    <input placeholder="New fruit..."\n           [matChipInputFor]="chipList"\n           [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n           [matChipInputAddOnBlur]="addOnBlur"\n           (matChipInputTokenEnd)="add($event)">\n  </mat-chip-list>\n</mat-form-field>\n',styles:[".example-chip-list {\n  width: 100%;\n}\n"]}]}],e}(),d=function(){function e(){}return e.decorators=[{type:r.Component,args:[{selector:"chips-overview-example",template:'<mat-chip-list aria-label="Fish selection">\n  <mat-chip>One fish</mat-chip>\n  <mat-chip>Two fish</mat-chip>\n  <mat-chip color="primary" selected>Primary fish</mat-chip>\n  <mat-chip color="accent" selected>Accent fish</mat-chip>\n</mat-chip-list>\n',styles:["/** No CSS for this example */\n"]}]}],e}(),f=function(){function e(){this.availableColors=[{name:"none",color:void 0},{name:"Primary",color:"primary"},{name:"Accent",color:"accent"},{name:"Warn",color:"warn"}]}return e.decorators=[{type:r.Component,args:[{selector:"chips-stacked-example",template:'<mat-chip-list class="mat-chip-list-stacked" aria-label="Color selection">\n  <mat-chip *ngFor="let chip of availableColors" selected [color]="chip.color">\n    {{chip.name}}\n  </mat-chip>\n</mat-chip-list>\n',styles:["mat-chip {\n  max-width: 200px;\n}\n"]}]}],e}(),g=[c,u,h,d,f],v=function(){function e(){}return e.decorators=[{type:r.NgModule,args:[{imports:[a.CommonModule,t.DragDropModule,n.MatAutocompleteModule,o.MatChipsModule,s.MatIconModule,l.MatFormFieldModule,i.ReactiveFormsModule],declarations:g,exports:g}]}],e}();e.ChipsAutocompleteExample=c,e.ChipsDragDropExample=u,e.ChipsInputExample=h,e.ChipsOverviewExample=d,e.ChipsStackedExample=f,e.ChipsExamplesModule=v,Object.defineProperty(e,"__esModule",{value:!0})});