{"version":3,"sources":["src/material-examples/material-examples-material-input.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","materialExamples","material","input","common","core","forms","button","icon","this","InputClearableExample","value","decorators","type","Component","args","selector","template","styles","MyErrorStateMatcher","prototype","isErrorState","control","form","invalid","dirty","touched","submitted","InputErrorStateMatcherExample","emailFormControl","FormControl","Validators","required","email","matcher","InputErrorsExample","InputFormExample","InputHintExample","InputOverviewExample","InputPrefixSuffixExample","EXAMPLES","InputExamplesModule","NgModule","imports","CommonModule","MatButtonModule","MatIconModule","MatInputModule","FormsModule","ReactiveFormsModule","declarations","Object","defineProperty"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/forms'), require('@angular/material/button'), require('@angular/material/icon'), require('@angular/material/input')) :\n    typeof define === 'function' && define.amd ? define('@angular/material-examples/material/input', ['exports', '@angular/common', '@angular/core', '@angular/forms', '@angular/material/button', '@angular/material/icon', '@angular/material/input'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.materialExamples = global.ng.materialExamples || {}, global.ng.materialExamples.material = global.ng.materialExamples.material || {}, global.ng.materialExamples.material.input = {}), global.ng.common, global.ng.core, global.ng.forms, global.ng.material.button, global.ng.material.icon, global.ng.material.input));\n}(this, function (exports, common, core, forms, button, icon, input) { 'use strict';\n\n    /**\n     * @title Input with a clear button\n     */\n    var InputClearableExample = /** @class */ (function () {\n        function InputClearableExample() {\n            this.value = 'Clear me';\n        }\n        InputClearableExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'input-clearable-example',\n                        template: \"<mat-form-field class=\\\"example-form-field\\\">\\n  <input matInput type=\\\"text\\\" placeholder=\\\"Clearable input\\\" [(ngModel)]=\\\"value\\\">\\n  <button mat-button *ngIf=\\\"value\\\" matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"value=''\\\">\\n    <mat-icon>close</mat-icon>\\n  </button>\\n</mat-form-field>\\n\",\n                        styles: [\".example-form-field {\\n  width: 200px;\\n}\\n\"]\n                    }] }\n        ];\n        return InputClearableExample;\n    }());\n\n    /** Error when invalid control is dirty, touched, or submitted. */\n    var MyErrorStateMatcher = /** @class */ (function () {\n        function MyErrorStateMatcher() {\n        }\n        MyErrorStateMatcher.prototype.isErrorState = function (control, form) {\n            var isSubmitted = form && form.submitted;\n            return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n        };\n        return MyErrorStateMatcher;\n    }());\n    /** @title Input with a custom ErrorStateMatcher */\n    var InputErrorStateMatcherExample = /** @class */ (function () {\n        function InputErrorStateMatcherExample() {\n            this.emailFormControl = new forms.FormControl('', [\n                forms.Validators.required,\n                forms.Validators.email,\n            ]);\n            this.matcher = new MyErrorStateMatcher();\n        }\n        InputErrorStateMatcherExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'input-error-state-matcher-example',\n                        template: \"<form class=\\\"example-form\\\">\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput placeholder=\\\"Email\\\" [formControl]=\\\"emailFormControl\\\"\\n           [errorStateMatcher]=\\\"matcher\\\">\\n    <mat-hint>Errors appear instantly!</mat-hint>\\n    <mat-error *ngIf=\\\"emailFormControl.hasError('email') && !emailFormControl.hasError('required')\\\">\\n      Please enter a valid email address\\n    </mat-error>\\n    <mat-error *ngIf=\\\"emailFormControl.hasError('required')\\\">\\n      Email is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n</form>\\n\",\n                        styles: [\".example-form {\\n  min-width: 150px;\\n  max-width: 500px;\\n  width: 100%;\\n}\\n\\n.example-full-width {\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        return InputErrorStateMatcherExample;\n    }());\n\n    /**\n     * @title Input with error messages\n     */\n    var InputErrorsExample = /** @class */ (function () {\n        function InputErrorsExample() {\n            this.emailFormControl = new forms.FormControl('', [\n                forms.Validators.required,\n                forms.Validators.email,\n            ]);\n        }\n        InputErrorsExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'input-errors-example',\n                        template: \"<form class=\\\"example-form\\\">\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput placeholder=\\\"Email\\\" [formControl]=\\\"emailFormControl\\\">\\n    <mat-error *ngIf=\\\"emailFormControl.hasError('email') && !emailFormControl.hasError('required')\\\">\\n      Please enter a valid email address\\n    </mat-error>\\n    <mat-error *ngIf=\\\"emailFormControl.hasError('required')\\\">\\n      Email is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n</form>\\n\",\n                        styles: [\".example-form {\\n  min-width: 150px;\\n  max-width: 500px;\\n  width: 100%;\\n}\\n\\n.example-full-width {\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        return InputErrorsExample;\n    }());\n\n    /**\n     * @title Inputs in a form\n     */\n    var InputFormExample = /** @class */ (function () {\n        function InputFormExample() {\n        }\n        InputFormExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'input-form-example',\n                        template: \"<form class=\\\"example-form\\\">\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput placeholder=\\\"Company (disabled)\\\" disabled value=\\\"Google\\\">\\n  </mat-form-field>\\n\\n  <table class=\\\"example-full-width\\\" cellspacing=\\\"0\\\"><tr>\\n    <td><mat-form-field class=\\\"example-full-width\\\">\\n      <input matInput placeholder=\\\"First name\\\">\\n    </mat-form-field></td>\\n    <td><mat-form-field class=\\\"example-full-width\\\">\\n      <input matInput placeholder=\\\"Long Last Name That Will Be Truncated\\\">\\n    </mat-form-field></td>\\n  </tr></table>\\n\\n  <p>\\n    <mat-form-field class=\\\"example-full-width\\\">\\n      <textarea matInput placeholder=\\\"Address\\\">1600 Amphitheatre Pkwy</textarea>\\n    </mat-form-field>\\n    <mat-form-field class=\\\"example-full-width\\\">\\n      <textarea matInput placeholder=\\\"Address 2\\\"></textarea>\\n    </mat-form-field>\\n  </p>\\n\\n  <table class=\\\"example-full-width\\\" cellspacing=\\\"0\\\"><tr>\\n    <td><mat-form-field class=\\\"example-full-width\\\">\\n      <input matInput placeholder=\\\"City\\\">\\n    </mat-form-field></td>\\n    <td><mat-form-field class=\\\"example-full-width\\\">\\n      <input matInput placeholder=\\\"State\\\">\\n    </mat-form-field></td>\\n    <td><mat-form-field class=\\\"example-full-width\\\">\\n      <input matInput #postalCode maxlength=\\\"5\\\" placeholder=\\\"Postal Code\\\" value=\\\"94043\\\">\\n      <mat-hint align=\\\"end\\\">{{postalCode.value.length}} / 5</mat-hint>\\n    </mat-form-field></td>\\n  </tr></table>\\n</form>\\n\",\n                        styles: [\".example-form {\\n  min-width: 150px;\\n  max-width: 500px;\\n  width: 100%;\\n}\\n\\n.example-full-width {\\n  width: 100%;\\n}\\n\\ntd {\\n  padding-right: 8px;\\n}\\n\"]\n                    }] }\n        ];\n        return InputFormExample;\n    }());\n\n    /**\n     * @title Input with hints\n     */\n    var InputHintExample = /** @class */ (function () {\n        function InputHintExample() {\n        }\n        InputHintExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'input-hint-example',\n                        template: \"<form class=\\\"example-form\\\">\\n\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput #message maxlength=\\\"256\\\" placeholder=\\\"Message\\\">\\n    <mat-hint align=\\\"start\\\"><strong>Don't disclose personal info</strong> </mat-hint>\\n    <mat-hint align=\\\"end\\\">{{message.value.length}} / 256</mat-hint>\\n  </mat-form-field>\\n  \\n</form>\\n\",\n                        styles: [\".example-form {\\n  min-width: 150px;\\n  max-width: 500px;\\n  width: 100%;\\n}\\n\\n.example-full-width {\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        return InputHintExample;\n    }());\n\n    /**\n     * @title Basic Inputs\n     */\n    var InputOverviewExample = /** @class */ (function () {\n        function InputOverviewExample() {\n        }\n        InputOverviewExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'input-overview-example',\n                        template: \"<form class=\\\"example-form\\\">\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput placeholder=\\\"Favorite food\\\" value=\\\"Sushi\\\">\\n  </mat-form-field>\\n\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <textarea matInput placeholder=\\\"Leave a comment\\\"></textarea>\\n  </mat-form-field>\\n</form>\\n\",\n                        styles: [\".example-form {\\n  min-width: 150px;\\n  max-width: 500px;\\n  width: 100%;\\n}\\n\\n.example-full-width {\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        return InputOverviewExample;\n    }());\n\n    /**\n     * @title Inputs with prefixes and suffixes\n     */\n    var InputPrefixSuffixExample = /** @class */ (function () {\n        function InputPrefixSuffixExample() {\n        }\n        InputPrefixSuffixExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'input-prefix-suffix-example',\n                        template: \"<form class=\\\"example-form\\\">\\n\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <span matPrefix>+1 &nbsp;</span>\\n    <input type=\\\"tel\\\" matInput placeholder=\\\"Telephone\\\">\\n    <mat-icon matSuffix>mode_edit</mat-icon>\\n  </mat-form-field>\\n  \\n</form>\\n\",\n                        styles: [\".example-form {\\n  min-width: 150px;\\n  max-width: 500px;\\n  width: 100%;\\n}\\n\\n.example-full-width {\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        return InputPrefixSuffixExample;\n    }());\n\n    var EXAMPLES = [\n        InputClearableExample,\n        InputErrorStateMatcherExample,\n        InputErrorsExample,\n        InputFormExample,\n        InputHintExample,\n        InputOverviewExample,\n        InputPrefixSuffixExample,\n    ];\n    var InputExamplesModule = /** @class */ (function () {\n        function InputExamplesModule() {\n        }\n        InputExamplesModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            common.CommonModule,\n                            button.MatButtonModule,\n                            icon.MatIconModule,\n                            input.MatInputModule,\n                            forms.FormsModule,\n                            forms.ReactiveFormsModule,\n                        ],\n                        declarations: EXAMPLES,\n                        exports: EXAMPLES,\n                    },] }\n        ];\n        return InputExamplesModule;\n    }());\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.InputClearableExample = InputClearableExample;\n    exports.InputErrorStateMatcherExample = InputErrorStateMatcherExample;\n    exports.InputErrorsExample = InputErrorsExample;\n    exports.InputFormExample = InputFormExample;\n    exports.InputHintExample = InputHintExample;\n    exports.InputOverviewExample = InputOverviewExample;\n    exports.InputPrefixSuffixExample = InputPrefixSuffixExample;\n    exports.InputExamplesModule = InputExamplesModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-examples-material-input.umd.js.map\n"]}