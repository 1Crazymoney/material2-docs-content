!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/common"),require("@angular/core"),require("@angular/forms"),require("@angular/material/autocomplete"),require("@angular/material/form-field"),require("@angular/material/input"),require("@angular/material/slide-toggle"),require("rxjs/operators")):"function"==typeof define&&define.amd?define("@angular/material-examples/material/autocomplete",["exports","@angular/common","@angular/core","@angular/forms","@angular/material/autocomplete","@angular/material/form-field","@angular/material/input","@angular/material/slide-toggle","rxjs/operators"],e):e(((t=t||self).ng=t.ng||{},t.ng.materialExamples=t.ng.materialExamples||{},t.ng.materialExamples.material=t.ng.materialExamples.material||{},t.ng.materialExamples.material.autocomplete={}),t.ng.common,t.ng.core,t.ng.forms,t.ng.material.autocomplete,t.ng.material["form-field"],t.ng.material.input,t.ng.material["slide-toggle"],t.rxjs.operators)}(this,function(t,e,o,n,a,r,i,l,m){"use strict";var p=function(){function t(){this.myControl=new n.FormControl,this.options=["One","Two","Three"]}return t.prototype.ngOnInit=function(){var t=this;this.filteredOptions=this.myControl.valueChanges.pipe(m.startWith(""),m.map(function(e){return t._filter(e)}))},t.prototype._filter=function(t){var e=t.toLowerCase();return this.options.filter(function(t){return 0===t.toLowerCase().indexOf(e)})},t.decorators=[{type:o.Component,args:[{selector:"autocomplete-auto-active-first-option-example",template:'<form class="example-form">\n  <mat-form-field class="example-full-width">\n    <input type="text" placeholder="Pick one" aria-label="Number" matInput [formControl]="myControl" [matAutocomplete]="auto">\n    <mat-autocomplete autoActiveFirstOption #auto="matAutocomplete">\n      <mat-option *ngFor="let option of filteredOptions | async" [value]="option">\n        {{option}}\n      </mat-option>\n    </mat-autocomplete>\n  </mat-form-field>\n</form>\n',styles:[".example-form {\n  min-width: 150px;\n  max-width: 500px;\n  width: 100%;\n}\n\n.example-full-width {\n  width: 100%;\n}\n"]}]}],t}(),s=function(){function t(){this.myControl=new n.FormControl,this.options=[{name:"Mary"},{name:"Shelley"},{name:"Igor"}]}return t.prototype.ngOnInit=function(){var t=this;this.filteredOptions=this.myControl.valueChanges.pipe(m.startWith(""),m.map(function(t){return"string"==typeof t?t:t.name}),m.map(function(e){return e?t._filter(e):t.options.slice()}))},t.prototype.displayFn=function(t){return t?t.name:void 0},t.prototype._filter=function(t){var e=t.toLowerCase();return this.options.filter(function(t){return 0===t.name.toLowerCase().indexOf(e)})},t.decorators=[{type:o.Component,args:[{selector:"autocomplete-display-example",template:'<form class="example-form">\n  <mat-form-field class="example-full-width">\n    <input type="text" placeholder="Assignee" aria-label="Assignee" matInput [formControl]="myControl" [matAutocomplete]="auto">\n    <mat-autocomplete #auto="matAutocomplete" [displayWith]="displayFn">\n      <mat-option *ngFor="let option of filteredOptions | async" [value]="option">\n        {{option.name}}\n      </mat-option>\n    </mat-autocomplete>\n  </mat-form-field>\n</form>\n',styles:[".example-form {\n  min-width: 150px;\n  max-width: 500px;\n  width: 100%;\n}\n\n.example-full-width {\n  width: 100%;\n}\n"]}]}],t}(),u=function(){function t(){this.myControl=new n.FormControl,this.options=["One","Two","Three"]}return t.prototype.ngOnInit=function(){var t=this;this.filteredOptions=this.myControl.valueChanges.pipe(m.startWith(""),m.map(function(e){return t._filter(e)}))},t.prototype._filter=function(t){var e=t.toLowerCase();return this.options.filter(function(t){return t.toLowerCase().includes(e)})},t.decorators=[{type:o.Component,args:[{selector:"autocomplete-filter-example",template:'<form class="example-form">\n  <mat-form-field class="example-full-width">\n    <input type="text" placeholder="Pick one" aria-label="Number" matInput [formControl]="myControl" [matAutocomplete]="auto">\n    <mat-autocomplete #auto="matAutocomplete">\n      <mat-option *ngFor="let option of filteredOptions | async" [value]="option">\n        {{option}}\n      </mat-option>\n    </mat-autocomplete>\n  </mat-form-field>\n</form>\n',styles:[".example-form {\n  min-width: 150px;\n  max-width: 500px;\n  width: 100%;\n}\n\n.example-full-width {\n  width: 100%;\n}\n"]}]}],t}(),f=function(t,e){var o=e.toLowerCase();return t.filter(function(t){return 0===t.toLowerCase().indexOf(o)})},c=function(){function t(t){this._formBuilder=t,this.stateForm=this._formBuilder.group({stateGroup:""}),this.stateGroups=[{letter:"A",names:["Alabama","Alaska","Arizona","Arkansas"]},{letter:"C",names:["California","Colorado","Connecticut"]},{letter:"D",names:["Delaware"]},{letter:"F",names:["Florida"]},{letter:"G",names:["Georgia"]},{letter:"H",names:["Hawaii"]},{letter:"I",names:["Idaho","Illinois","Indiana","Iowa"]},{letter:"K",names:["Kansas","Kentucky"]},{letter:"L",names:["Louisiana"]},{letter:"M",names:["Maine","Maryland","Massachusetts","Michigan","Minnesota","Mississippi","Missouri","Montana"]},{letter:"N",names:["Nebraska","Nevada","New Hampshire","New Jersey","New Mexico","New York","North Carolina","North Dakota"]},{letter:"O",names:["Ohio","Oklahoma","Oregon"]},{letter:"P",names:["Pennsylvania"]},{letter:"R",names:["Rhode Island"]},{letter:"S",names:["South Carolina","South Dakota"]},{letter:"T",names:["Tennessee","Texas"]},{letter:"U",names:["Utah"]},{letter:"V",names:["Vermont","Virginia"]},{letter:"W",names:["Washington","West Virginia","Wisconsin","Wyoming"]}]}return t.prototype.ngOnInit=function(){var t=this;this.stateGroupOptions=this.stateForm.get("stateGroup").valueChanges.pipe(m.startWith(""),m.map(function(e){return t._filterGroup(e)}))},t.prototype._filterGroup=function(t){return t?this.stateGroups.map(function(e){return{letter:e.letter,names:f(e.names,t)}}).filter(function(t){return t.names.length>0}):this.stateGroups},t.decorators=[{type:o.Component,args:[{selector:"autocomplete-optgroup-example",template:'<form [formGroup]="stateForm">\n  <mat-form-field>\n    <input type="text" matInput placeholder="States Group" formControlName="stateGroup" required [matAutocomplete]="autoGroup">\n      <mat-autocomplete #autoGroup="matAutocomplete">\n        <mat-optgroup *ngFor="let group of stateGroupOptions | async" [label]="group.letter">\n          <mat-option *ngFor="let name of group.names" [value]="name">\n            {{name}}\n          </mat-option>\n      </mat-optgroup>\n    </mat-autocomplete>\n  </mat-form-field>\n</form>\n',styles:["/** No CSS for this example */\n"]}]}],t.ctorParameters=function(){return[{type:n.FormBuilder}]},t}(),d=function(){function t(){var t=this;this.stateCtrl=new n.FormControl,this.states=[{name:"Arkansas",population:"2.978M",flag:"https://upload.wikimedia.org/wikipedia/commons/9/9d/Flag_of_Arkansas.svg"},{name:"California",population:"39.14M",flag:"https://upload.wikimedia.org/wikipedia/commons/0/01/Flag_of_California.svg"},{name:"Florida",population:"20.27M",flag:"https://upload.wikimedia.org/wikipedia/commons/f/f7/Flag_of_Florida.svg"},{name:"Texas",population:"27.47M",flag:"https://upload.wikimedia.org/wikipedia/commons/f/f7/Flag_of_Texas.svg"}],this.filteredStates=this.stateCtrl.valueChanges.pipe(m.startWith(""),m.map(function(e){return e?t._filterStates(e):t.states.slice()}))}return t.prototype._filterStates=function(t){var e=t.toLowerCase();return this.states.filter(function(t){return 0===t.name.toLowerCase().indexOf(e)})},t.decorators=[{type:o.Component,args:[{selector:"autocomplete-overview-example",template:'<form class="example-form">\n  <mat-form-field class="example-full-width">\n    <input matInput placeholder="State" aria-label="State" [matAutocomplete]="auto" [formControl]="stateCtrl">\n    <mat-autocomplete #auto="matAutocomplete">\n      <mat-option *ngFor="let state of filteredStates | async" [value]="state.name">\n        <img class="example-option-img" aria-hidden [src]="state.flag" height="25">\n        <span>{{state.name}}</span> |\n        <small>Population: {{state.population}}</small>\n      </mat-option>\n    </mat-autocomplete>\n  </mat-form-field>\n\n  <br>\n\n  <mat-slide-toggle\n    [checked]="stateCtrl.disabled"\n    (change)="stateCtrl.disabled ? stateCtrl.enable() : stateCtrl.disable()">\n    Disable Input?\n  </mat-slide-toggle>\n</form>\n',styles:[".example-form {\n  min-width: 150px;\n  max-width: 500px;\n  width: 100%;\n}\n\n.example-full-width {\n  width: 100%;\n}\n\n.example-option-img {\n  vertical-align: middle;\n  margin-right: 8px;\n}\n\n[dir='rtl'] .example-option-img {\n  margin-right: 0;\n  margin-left: 8px;\n}\n"]}]}],t.ctorParameters=function(){return[]},t}(),h=function(){function t(){this.control=new n.FormControl,this.streets=["Champs-Élysées","Lombard Street","Abbey Road","Fifth Avenue"]}return t.prototype.ngOnInit=function(){var t=this;this.filteredStreets=this.control.valueChanges.pipe(m.startWith(""),m.map(function(e){return t._filter(e)}))},t.prototype._filter=function(t){var e=this,o=this._normalizeValue(t);return this.streets.filter(function(t){return e._normalizeValue(t).includes(o)})},t.prototype._normalizeValue=function(t){return t.toLowerCase().replace(/\s/g,"")},t.decorators=[{type:o.Component,args:[{selector:"autocomplete-plain-input-example",template:'<form class="example-form">\n  <input type="text" placeholder="Search for a street" [formControl]="control" [matAutocomplete]="auto">\n  <mat-autocomplete #auto="matAutocomplete">\n    <mat-option *ngFor="let street of filteredStreets | async" [value]="street">\n      {{street}}\n    </mat-option>\n  </mat-autocomplete>\n</form>\n',styles:[".example-form {\n  min-width: 150px;\n  max-width: 500px;\n  width: 100%;\n}\n\n.example-full-width {\n  width: 100%;\n}\n"]}]}],t}(),g=function(){function t(){this.myControl=new n.FormControl,this.options=["One","Two","Three"]}return t.decorators=[{type:o.Component,args:[{selector:"autocomplete-simple-example",template:'<form class="example-form">\n  <mat-form-field class="example-full-width">\n    <input type="text" placeholder="Pick one" aria-label="Number" matInput [formControl]="myControl" [matAutocomplete]="auto">\n    <mat-autocomplete #auto="matAutocomplete">\n      <mat-option *ngFor="let option of options" [value]="option">\n        {{option}}\n      </mat-option>\n    </mat-autocomplete>\n  </mat-form-field>\n</form>\n',styles:[".example-form {\n  min-width: 150px;\n  max-width: 500px;\n  width: 100%;\n}\n\n.example-full-width {\n  width: 100%;\n}\n"]}]}],t}(),x=[p,s,u,c,d,h,g],w=function(){function t(){}return t.decorators=[{type:o.NgModule,args:[{imports:[e.CommonModule,a.MatAutocompleteModule,r.MatFormFieldModule,i.MatInputModule,l.MatSlideToggleModule,n.FormsModule,n.ReactiveFormsModule],declarations:x,exports:x}]}],t}();t.AutocompleteAutoActiveFirstOptionExample=p,t.AutocompleteDisplayExample=s,t.AutocompleteFilterExample=u,t.AutocompleteOptgroupExample=c,t.AutocompleteOverviewExample=d,t.AutocompletePlainInputExample=h,t.AutocompleteSimpleExample=g,t.AutocompleteExamplesModule=w,Object.defineProperty(t,"__esModule",{value:!0})});