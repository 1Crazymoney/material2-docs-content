{"version":3,"sources":["src/material-examples/material-examples-material-form-field.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","materialExamples","material","formField","tslib","common","core","forms","button","checkbox","icon","input","radio","select","cdk","a11y","coercion","rxjs","this","tslib_1","FormFieldAppearanceExample","decorators","type","Component","args","selector","template","styles","FormFieldCustomControlExample","MyTel","area","exchange","subscriber","MyTelInput","formBuilder","_focusMonitor","_elementRef","ngControl","_this","stateChanges","Subject","focused","errorState","controlType","id","nextId","describedBy","onChange","_","onTouched","_required","_disabled","parts","group","monitor","subscribe","origin","next","valueAccessor","Object","defineProperty","prototype","get","_a","value","enumerable","configurable","empty","_placeholder","set","coerceBooleanProperty","disable","enable","length","tel","setValue","ngOnDestroy","complete","stopMonitoring","setDescribedByIds","ids","join","onContainerClick","event","target","tagName","toLowerCase","nativeElement","querySelector","focus","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_handleInput","providers","provide","MatFormFieldControl","useExisting","host","[class.example-floating]","[id]","[attr.aria-describedby]","ctorParameters","FormBuilder","FocusMonitor","ElementRef","NgControl","Optional","Self","propDecorators","placeholder","Input","required","FormFieldErrorExample","email","FormControl","Validators","getErrorMessage","hasError","FormFieldHintExample","FormFieldLabelExample","fb","options","hideRequired","floatLabel","FormFieldOverviewExample","FormFieldPrefixSuffixExample","hide","FormFieldThemingExample","color","fontSize","min","getFontSize","Math","max","EXAMPLES","FormFieldExamplesModule","NgModule","imports","CommonModule","MatButtonModule","MatCheckboxModule","MatFormFieldModule","MatIconModule","MatInputModule","MatRadioModule","MatSelectModule","ReactiveFormsModule","declarations","__spread"],"mappings":"CAAC,SAAUA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,SAAUA,QAAQ,mBAAoBA,QAAQ,iBAAkBA,QAAQ,kBAAmBA,QAAQ,4BAA6BA,QAAQ,8BAA+BA,QAAQ,gCAAiCA,QAAQ,0BAA2BA,QAAQ,2BAA4BA,QAAQ,2BAA4BA,QAAQ,4BAA6BA,QAAQ,qBAAsBA,QAAQ,yBAA0BA,QAAQ,SAC9e,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,iDAAkD,CAAC,UAAW,QAAS,kBAAmB,gBAAiB,iBAAkB,2BAA4B,6BAA8B,+BAAgC,yBAA0B,0BAA2B,0BAA2B,2BAA4B,oBAAqB,wBAAyB,QAASJ,GACpZA,IAAzBD,EAASA,GAAUO,MAAsBC,GAAKR,EAAOQ,IAAM,GAAIR,EAAOQ,GAAGC,iBAAmBT,EAAOQ,GAAGC,kBAAoB,GAAIT,EAAOQ,GAAGC,iBAAiBC,SAAWV,EAAOQ,GAAGC,iBAAiBC,UAAY,GAAIV,EAAOQ,GAAGC,iBAAiBC,SAASC,UAAY,IAAKX,EAAOY,MAAOZ,EAAOQ,GAAGK,OAAQb,EAAOQ,GAAGM,KAAMd,EAAOQ,GAAGO,MAAOf,EAAOQ,GAAGE,SAASM,OAAQhB,EAAOQ,GAAGE,SAASO,SAAUjB,EAAOQ,GAAGE,SAASC,UAAWX,EAAOQ,GAAGE,SAASQ,KAAMlB,EAAOQ,GAAGE,SAASS,MAAOnB,EAAOQ,GAAGE,SAASU,MAAOpB,EAAOQ,GAAGE,SAASW,OAAQrB,EAAOQ,GAAGc,IAAIC,KAAMvB,EAAOQ,GAAGc,IAAIE,SAAUxB,EAAOyB,MAH3jB,CAIEC,KAAM,SAAUxB,EAASyB,EAASd,EAAQC,EAAMC,EAAOC,EAAQC,EAAUN,EAAWO,EAAMC,EAAOC,EAAOC,EAAQE,EAAMC,EAAUC,GAAQ,aAGtI,IAAIG,EAA4C,WAC5C,SAASA,KAST,OAPAA,EAA2BC,WAAa,CACpC,CAAEC,KAAMhB,EAAKiB,UAAWC,KAAM,CAAC,CACnBC,SAAU,gCACVC,SAAU,6gCACVC,OAAQ,CAAC,wCAGlBP,EAVoC,GAc3CQ,EAA+C,WAC/C,SAASA,KAST,OAPAA,EAA8BP,WAAa,CACvC,CAAEC,KAAMhB,EAAKiB,UAAWC,KAAM,CAAC,CACnBC,SAAU,oCACVC,SAAU,yMACVC,OAAQ,CAAC,wCAGlBC,EAVuC,GAa9CC,EACA,SAASA,EAAMC,EAAMC,EAAUC,GAC3Bd,KAAKY,KAAOA,EACZZ,KAAKa,SAAWA,EAChBb,KAAKc,WAAaA,GAKtBC,EAA4B,WAC5B,SAASA,EAAWC,EAAaC,EAAeC,EAAaC,GACzD,IAAIC,EAAQpB,KACZA,KAAKiB,cAAgBA,EACrBjB,KAAKkB,YAAcA,EACnBlB,KAAKmB,UAAYA,EACjBnB,KAAKqB,aAAe,IAAItB,EAAKuB,QAC7BtB,KAAKuB,SAAU,EACfvB,KAAKwB,YAAa,EAClBxB,KAAKyB,YAAc,oBACnBzB,KAAK0B,GAAK,qBAAuBX,EAAWY,SAC5C3B,KAAK4B,YAAc,GACnB5B,KAAK6B,SAAW,SAAUC,KAC1B9B,KAAK+B,UAAY,aACjB/B,KAAKgC,WAAY,EACjBhC,KAAKiC,WAAY,EACjBjC,KAAKkC,MAAQlB,EAAYmB,MAAM,CAC3BvB,KAAM,GACNC,SAAU,GACVC,WAAY,KAEhBG,EAAcmB,QAAQlB,GAAa,GAAMmB,UAAU,SAAUC,GACrDlB,EAAMG,UAAYe,GAClBlB,EAAMW,YAEVX,EAAMG,UAAYe,EAClBlB,EAAMC,aAAakB,SAED,MAAlBvC,KAAKmB,YACLnB,KAAKmB,UAAUqB,cAAgBxC,MAkHvC,OA/GAyC,OAAOC,eAAe3B,EAAW4B,UAAW,QAAS,CACjDC,IAAK,WACD,IAAIC,EAAK7C,KAAKkC,MAAMY,MACpB,OADkCD,EAAGjC,OAAiBiC,EAAGhC,WAAuBgC,EAAG/B,YAGvFiC,YAAY,EACZC,cAAc,IAElBP,OAAOC,eAAe3B,EAAW4B,UAAW,mBAAoB,CAC5DC,IAAK,WAAc,OAAO5C,KAAKuB,UAAYvB,KAAKiD,OAChDF,YAAY,EACZC,cAAc,IAElBP,OAAOC,eAAe3B,EAAW4B,UAAW,cAAe,CACvDC,IAAK,WAAc,OAAO5C,KAAKkD,cAC/BC,IAAK,SAAUL,GACX9C,KAAKkD,aAAeJ,EACpB9C,KAAKqB,aAAakB,QAEtBQ,YAAY,EACZC,cAAc,IAElBP,OAAOC,eAAe3B,EAAW4B,UAAW,WAAY,CACpDC,IAAK,WAAc,OAAO5C,KAAKgC,WAC/BmB,IAAK,SAAUL,GACX9C,KAAKgC,UAAYlC,EAASsD,sBAAsBN,GAChD9C,KAAKqB,aAAakB,QAEtBQ,YAAY,EACZC,cAAc,IAElBP,OAAOC,eAAe3B,EAAW4B,UAAW,WAAY,CACpDC,IAAK,WAAc,OAAO5C,KAAKiC,WAC/BkB,IAAK,SAAUL,GACX9C,KAAKiC,UAAYnC,EAASsD,sBAAsBN,GAChD9C,KAAKiC,UAAYjC,KAAKkC,MAAMmB,UAAYrD,KAAKkC,MAAMoB,SACnDtD,KAAKqB,aAAakB,QAEtBQ,YAAY,EACZC,cAAc,IAElBP,OAAOC,eAAe3B,EAAW4B,UAAW,QAAS,CACjDC,IAAK,WACD,IAAIC,EAAK7C,KAAKkC,MAAMY,MAAOlC,EAAOiC,EAAGjC,KAAMC,EAAWgC,EAAGhC,SAAUC,EAAa+B,EAAG/B,WACnF,OAAoB,IAAhBF,EAAK2C,QAAoC,IAApB1C,EAAS0C,QAAsC,IAAtBzC,EAAWyC,OAClD,IAAI5C,EAAMC,EAAMC,EAAUC,GAE9B,MAEXqC,IAAK,SAAUK,GACX,IAAIX,EAAKW,GAAO,IAAI7C,EAAM,GAAI,GAAI,IAClCX,KAAKkC,MAAMuB,SAAS,CAAE7C,KADwBiC,EAAGjC,KACfC,SADgCgC,EAAGhC,SACfC,WADsC+B,EAAG/B,aAE/Fd,KAAKqB,aAAakB,QAEtBQ,YAAY,EACZC,cAAc,IAElBjC,EAAW4B,UAAUe,YAAc,WAC/B1D,KAAKqB,aAAasC,WAClB3D,KAAKiB,cAAc2C,eAAe5D,KAAKkB,cAE3CH,EAAW4B,UAAUkB,kBAAoB,SAAUC,GAC/C9D,KAAK4B,YAAckC,EAAIC,KAAK,MAEhChD,EAAW4B,UAAUqB,iBAAmB,SAAUC,GACJ,SAAtCA,EAAMC,OAAOC,QAAQC,eACrBpE,KAAKkB,YAAYmD,cAAcC,cAAc,SAASC,SAG9DxD,EAAW4B,UAAU6B,WAAa,SAAUhB,GACxCxD,KAAK8C,MAAQU,GAEjBzC,EAAW4B,UAAU8B,iBAAmB,SAAUC,GAC9C1E,KAAK6B,SAAW6C,GAEpB3D,EAAW4B,UAAUgC,kBAAoB,SAAUD,GAC/C1E,KAAK+B,UAAY2C,GAErB3D,EAAW4B,UAAUiC,iBAAmB,SAAUC,GAC9C7E,KAAK8E,SAAWD,GAEpB9D,EAAW4B,UAAUoC,aAAe,WAChC/E,KAAK6B,SAAS7B,KAAKkC,MAAMY,QAE7B/B,EAAWY,OAAS,EACpBZ,EAAWZ,WAAa,CACpB,CAAEC,KAAMhB,EAAKiB,UAAWC,KAAM,CAAC,CACnBC,SAAU,oBACVC,SAAU,ykBACVwE,UAAW,CAAC,CAAEC,QAAShG,EAAUiG,oBAAqBC,YAAapE,IACnEqE,KAAM,CACFC,2BAA4B,mBAC5BC,OAAQ,KACRC,0BAA2B,eAE/B9E,OAAQ,CAAC,uWAIzBM,EAAWyE,eAAiB,WAAc,MAAO,CAC7C,CAAEpF,KAAMf,EAAMoG,aACd,CAAErF,KAAMP,EAAK6F,cACb,CAAEtF,KAAMhB,EAAKuG,YACb,CAAEvF,KAAMf,EAAMuG,UAAWzF,WAAY,CAAC,CAAEC,KAAMhB,EAAKyG,UAAY,CAAEzF,KAAMhB,EAAK0G,UAEhF/E,EAAWgF,eAAiB,CACxBC,YAAa,CAAC,CAAE5F,KAAMhB,EAAK6G,QAC3BC,SAAU,CAAC,CAAE9F,KAAMhB,EAAK6G,QACxBnB,SAAU,CAAC,CAAE1E,KAAMhB,EAAK6G,QACxBnD,MAAO,CAAC,CAAE1C,KAAMhB,EAAK6G,SAElBlF,EA/IoB,GAmJ3BoF,EAAuC,WACvC,SAASA,IACLnG,KAAKoG,MAAQ,IAAI/G,EAAMgH,YAAY,GAAI,CAAChH,EAAMiH,WAAWJ,SAAU7G,EAAMiH,WAAWF,QAcxF,OAZAD,EAAsBxD,UAAU4D,gBAAkB,WAC9C,OAAOvG,KAAKoG,MAAMI,SAAS,YAAc,yBACrCxG,KAAKoG,MAAMI,SAAS,SAAW,oBAC3B,IAEZL,EAAsBhG,WAAa,CAC/B,CAAEC,KAAMhB,EAAKiB,UAAWC,KAAM,CAAC,CACnBC,SAAU,2BACVC,SAAU,iPACVC,OAAQ,CAAC,6HAGlB0F,EAhB+B,GAoBtCM,EAAsC,WACtC,SAASA,KAST,OAPAA,EAAqBtG,WAAa,CAC9B,CAAEC,KAAMhB,EAAKiB,UAAWC,KAAM,CAAC,CACnBC,SAAU,0BACVC,SAAU,qeACVC,OAAQ,CAAC,6HAGlBgG,EAV8B,GAcrCC,EAAuC,WACvC,SAASA,EAAsBC,GAC3B3G,KAAK4G,QAAUD,EAAGxE,MAAM,CACpB0E,cAAc,EACdC,WAAY,SAcpB,OAXAJ,EAAsBvG,WAAa,CAC/B,CAAEC,KAAMhB,EAAKiB,UAAWC,KAAM,CAAC,CACnBC,SAAU,2BACVC,SAAU,wyCACVC,OAAQ,CAAC,2SAIzBiG,EAAsBlB,eAAiB,WAAc,MAAO,CACxD,CAAEpF,KAAMf,EAAMoG,eAEXiB,EAlB+B,GAsBtCK,EAA0C,WAC1C,SAASA,KAST,OAPAA,EAAyB5G,WAAa,CAClC,CAAEC,KAAMhB,EAAKiB,UAAWC,KAAM,CAAC,CACnBC,SAAU,8BACVC,SAAU,gYACVC,OAAQ,CAAC,6HAGlBsG,EAVkC,GAczCC,EAA8C,WAC9C,SAASA,IACLhH,KAAKiH,MAAO,EAShB,OAPAD,EAA6B7G,WAAa,CACtC,CAAEC,KAAMhB,EAAKiB,UAAWC,KAAM,CAAC,CACnBC,SAAU,mCACVC,SAAU,ilBACVC,OAAQ,CAAC,uXAGlBuG,EAXsC,GAe7CE,EAAyC,WACzC,SAASA,EAAwBP,GAC7B3G,KAAK4G,QAAUD,EAAGxE,MAAM,CACpBgF,MAAO,UACPC,SAAU,CAAC,GAAI/H,EAAMiH,WAAWe,IAAI,OAiB5C,OAdAH,EAAwBvE,UAAU2E,YAAc,WAC5C,OAAOC,KAAKC,IAAI,GAAIxH,KAAK4G,QAAQ9D,MAAMsE,WAE3CF,EAAwB/G,WAAa,CACjC,CAAEC,KAAMhB,EAAKiB,UAAWC,KAAM,CAAC,CACnBC,SAAU,6BACVC,SAAU,oqBACVC,OAAQ,CAAC,6HAIzByG,EAAwB1B,eAAiB,WAAc,MAAO,CAC1D,CAAEpF,KAAMf,EAAMoG,eAEXyB,EArBiC,GAwBxCO,EAAW,CACXvH,EACAQ,EACAyF,EACAM,EACAC,EACAK,EACAC,EACAE,GAEAQ,EAAyC,WACzC,SAASA,KAmBT,OAjBAA,EAAwBvH,WAAa,CACjC,CAAEC,KAAMhB,EAAKuI,SAAUrH,KAAM,CAAC,CAClBsH,QAAS,CACLzI,EAAO0I,aACPvI,EAAOwI,gBACPvI,EAASwI,kBACT9I,EAAU+I,mBACVxI,EAAKyI,cACLxI,EAAMyI,eACNxI,EAAMyI,eACNxI,EAAOyI,gBACP/I,EAAMgJ,qBAEVC,aAAcrI,EAAQsI,SAASd,EAAU,CAAC1G,IAC1CvC,QAASiJ,MAGlBC,EApBiC,GA2B5ClJ,EAAQ0B,2BAA6BA,EACrC1B,EAAQkC,8BAAgCA,EACxClC,EAAQ2H,sBAAwBA,EAChC3H,EAAQiI,qBAAuBA,EAC/BjI,EAAQkI,sBAAwBA,EAChClI,EAAQuI,yBAA2BA,EACnCvI,EAAQwI,6BAA+BA,EACvCxI,EAAQ0I,wBAA0BA,EAClC1I,EAAQuC,WAAaA,EACrBvC,EAAQkJ,wBAA0BA,EAElCjF,OAAOC,eAAelE,EAAS,aAAc,CAAEsE,OAAO","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/common'), require('@angular/core'), require('@angular/forms'), require('@angular/material/button'), require('@angular/material/checkbox'), require('@angular/material/form-field'), require('@angular/material/icon'), require('@angular/material/input'), require('@angular/material/radio'), require('@angular/material/select'), require('@angular/cdk/a11y'), require('@angular/cdk/coercion'), require('rxjs')) :\n    typeof define === 'function' && define.amd ? define('@angular/material-examples/material/form-field', ['exports', 'tslib', '@angular/common', '@angular/core', '@angular/forms', '@angular/material/button', '@angular/material/checkbox', '@angular/material/form-field', '@angular/material/icon', '@angular/material/input', '@angular/material/radio', '@angular/material/select', '@angular/cdk/a11y', '@angular/cdk/coercion', 'rxjs'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.materialExamples = global.ng.materialExamples || {}, global.ng.materialExamples.material = global.ng.materialExamples.material || {}, global.ng.materialExamples.material.formField = {}), global.tslib, global.ng.common, global.ng.core, global.ng.forms, global.ng.material.button, global.ng.material.checkbox, global.ng.material.formField, global.ng.material.icon, global.ng.material.input, global.ng.material.radio, global.ng.material.select, global.ng.cdk.a11y, global.ng.cdk.coercion, global.rxjs));\n}(this, function (exports, tslib_1, common, core, forms, button, checkbox, formField, icon, input, radio, select, a11y, coercion, rxjs) { 'use strict';\n\n    /** @title Form field appearance variants */\n    var FormFieldAppearanceExample = /** @class */ (function () {\n        function FormFieldAppearanceExample() {\n        }\n        FormFieldAppearanceExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'form-field-appearance-example',\n                        template: \"<p>\\n  <mat-form-field appearance=\\\"legacy\\\">\\n    <mat-label>Legacy form field</mat-label>\\n    <input matInput placeholder=\\\"Placeholder\\\">\\n    <mat-icon matSuffix>sentiment_very_satisfied</mat-icon>\\n    <mat-hint>Hint</mat-hint>\\n  </mat-form-field>\\n</p>\\n<p>\\n  <mat-form-field appearance=\\\"standard\\\">\\n    <mat-label>Standard form field</mat-label>\\n    <input matInput placeholder=\\\"Placeholder\\\">\\n    <mat-icon matSuffix>sentiment_very_satisfied</mat-icon>\\n    <mat-hint>Hint</mat-hint>\\n  </mat-form-field>\\n</p>\\n<p>\\n  <mat-form-field appearance=\\\"fill\\\">\\n    <mat-label>Fill form field</mat-label>\\n    <input matInput placeholder=\\\"Placeholder\\\">\\n    <mat-icon matSuffix>sentiment_very_satisfied</mat-icon>\\n    <mat-hint>Hint</mat-hint>\\n  </mat-form-field>\\n</p>\\n<p>\\n  <mat-form-field appearance=\\\"outline\\\">\\n    <mat-label>Outline form field</mat-label>\\n    <input matInput placeholder=\\\"Placeholder\\\">\\n    <mat-icon matSuffix>sentiment_very_satisfied</mat-icon>\\n    <mat-hint>Hint</mat-hint>\\n  </mat-form-field>\\n</p>\\n\",\n                        styles: [\"/** No CSS for this example */\\n\"]\n                    }] }\n        ];\n        return FormFieldAppearanceExample;\n    }());\n\n    /** @title Form field with custom telephone number input control. */\n    var FormFieldCustomControlExample = /** @class */ (function () {\n        function FormFieldCustomControlExample() {\n        }\n        FormFieldCustomControlExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'form-field-custom-control-example',\n                        template: \"<mat-form-field>\\n  <example-tel-input placeholder=\\\"Phone number\\\" required></example-tel-input>\\n  <mat-icon matSuffix>phone</mat-icon>\\n  <mat-hint>Include area code</mat-hint>\\n</mat-form-field>\\n\",\n                        styles: [\"/** No CSS for this example */\\n\"]\n                    }] }\n        ];\n        return FormFieldCustomControlExample;\n    }());\n    /** Data structure for holding telephone number. */\n    var MyTel = /** @class */ (function () {\n        function MyTel(area, exchange, subscriber) {\n            this.area = area;\n            this.exchange = exchange;\n            this.subscriber = subscriber;\n        }\n        return MyTel;\n    }());\n    /** Custom `MatFormFieldControl` for telephone number input. */\n    var MyTelInput = /** @class */ (function () {\n        function MyTelInput(formBuilder, _focusMonitor, _elementRef, ngControl) {\n            var _this = this;\n            this._focusMonitor = _focusMonitor;\n            this._elementRef = _elementRef;\n            this.ngControl = ngControl;\n            this.stateChanges = new rxjs.Subject();\n            this.focused = false;\n            this.errorState = false;\n            this.controlType = 'example-tel-input';\n            this.id = \"example-tel-input-\" + MyTelInput.nextId++;\n            this.describedBy = '';\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n            this._required = false;\n            this._disabled = false;\n            this.parts = formBuilder.group({\n                area: '',\n                exchange: '',\n                subscriber: '',\n            });\n            _focusMonitor.monitor(_elementRef, true).subscribe(function (origin) {\n                if (_this.focused && !origin) {\n                    _this.onTouched();\n                }\n                _this.focused = !!origin;\n                _this.stateChanges.next();\n            });\n            if (this.ngControl != null) {\n                this.ngControl.valueAccessor = this;\n            }\n        }\n        Object.defineProperty(MyTelInput.prototype, \"empty\", {\n            get: function () {\n                var _a = this.parts.value, area = _a.area, exchange = _a.exchange, subscriber = _a.subscriber;\n                return !area && !exchange && !subscriber;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MyTelInput.prototype, \"shouldLabelFloat\", {\n            get: function () { return this.focused || !this.empty; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MyTelInput.prototype, \"placeholder\", {\n            get: function () { return this._placeholder; },\n            set: function (value) {\n                this._placeholder = value;\n                this.stateChanges.next();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MyTelInput.prototype, \"required\", {\n            get: function () { return this._required; },\n            set: function (value) {\n                this._required = coercion.coerceBooleanProperty(value);\n                this.stateChanges.next();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MyTelInput.prototype, \"disabled\", {\n            get: function () { return this._disabled; },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n                this._disabled ? this.parts.disable() : this.parts.enable();\n                this.stateChanges.next();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MyTelInput.prototype, \"value\", {\n            get: function () {\n                var _a = this.parts.value, area = _a.area, exchange = _a.exchange, subscriber = _a.subscriber;\n                if (area.length === 3 && exchange.length === 3 && subscriber.length === 4) {\n                    return new MyTel(area, exchange, subscriber);\n                }\n                return null;\n            },\n            set: function (tel) {\n                var _a = tel || new MyTel('', '', ''), area = _a.area, exchange = _a.exchange, subscriber = _a.subscriber;\n                this.parts.setValue({ area: area, exchange: exchange, subscriber: subscriber });\n                this.stateChanges.next();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MyTelInput.prototype.ngOnDestroy = function () {\n            this.stateChanges.complete();\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        };\n        MyTelInput.prototype.setDescribedByIds = function (ids) {\n            this.describedBy = ids.join(' ');\n        };\n        MyTelInput.prototype.onContainerClick = function (event) {\n            if (event.target.tagName.toLowerCase() != 'input') {\n                this._elementRef.nativeElement.querySelector('input').focus();\n            }\n        };\n        MyTelInput.prototype.writeValue = function (tel) {\n            this.value = tel;\n        };\n        MyTelInput.prototype.registerOnChange = function (fn) {\n            this.onChange = fn;\n        };\n        MyTelInput.prototype.registerOnTouched = function (fn) {\n            this.onTouched = fn;\n        };\n        MyTelInput.prototype.setDisabledState = function (isDisabled) {\n            this.disabled = isDisabled;\n        };\n        MyTelInput.prototype._handleInput = function () {\n            this.onChange(this.parts.value);\n        };\n        MyTelInput.nextId = 0;\n        MyTelInput.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'example-tel-input',\n                        template: \"<div [formGroup]=\\\"parts\\\" class=\\\"example-tel-input-container\\\">\\n  <input class=\\\"example-tel-input-element\\\" formControlName=\\\"area\\\" size=\\\"3\\\" aria-label=\\\"Area code\\\" (input)=\\\"_handleInput()\\\">\\n  <span class=\\\"example-tel-input-spacer\\\">&ndash;</span>\\n  <input class=\\\"example-tel-input-element\\\" formControlName=\\\"exchange\\\" size=\\\"3\\\" aria-label=\\\"Exchange code\\\" (input)=\\\"_handleInput()\\\">\\n  <span class=\\\"example-tel-input-spacer\\\">&ndash;</span>\\n  <input class=\\\"example-tel-input-element\\\" formControlName=\\\"subscriber\\\" size=\\\"4\\\" aria-label=\\\"Subscriber number\\\" (input)=\\\"_handleInput()\\\">\\n</div>\\n\",\n                        providers: [{ provide: formField.MatFormFieldControl, useExisting: MyTelInput }],\n                        host: {\n                            '[class.example-floating]': 'shouldLabelFloat',\n                            '[id]': 'id',\n                            '[attr.aria-describedby]': 'describedBy',\n                        },\n                        styles: [\".example-tel-input-container {\\n  display: flex;\\n}\\n\\n.example-tel-input-element {\\n  border: none;\\n  background: none;\\n  padding: 0;\\n  outline: none;\\n  font: inherit;\\n  text-align: center;\\n}\\n\\n.example-tel-input-spacer {\\n  opacity: 0;\\n  transition: opacity 200ms;\\n}\\n\\n:host.example-floating .example-tel-input-spacer {\\n  opacity: 1;\\n}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MyTelInput.ctorParameters = function () { return [\n            { type: forms.FormBuilder },\n            { type: a11y.FocusMonitor },\n            { type: core.ElementRef },\n            { type: forms.NgControl, decorators: [{ type: core.Optional }, { type: core.Self }] }\n        ]; };\n        MyTelInput.propDecorators = {\n            placeholder: [{ type: core.Input }],\n            required: [{ type: core.Input }],\n            disabled: [{ type: core.Input }],\n            value: [{ type: core.Input }]\n        };\n        return MyTelInput;\n    }());\n\n    /** @title Form field with error messages */\n    var FormFieldErrorExample = /** @class */ (function () {\n        function FormFieldErrorExample() {\n            this.email = new forms.FormControl('', [forms.Validators.required, forms.Validators.email]);\n        }\n        FormFieldErrorExample.prototype.getErrorMessage = function () {\n            return this.email.hasError('required') ? 'You must enter a value' :\n                this.email.hasError('email') ? 'Not a valid email' :\n                    '';\n        };\n        FormFieldErrorExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'form-field-error-example',\n                        template: \"<div class=\\\"example-container\\\">\\n  <mat-form-field>\\n    <input matInput placeholder=\\\"Enter your email\\\" [formControl]=\\\"email\\\" required>\\n    <mat-error *ngIf=\\\"email.invalid\\\">{{getErrorMessage()}}</mat-error>\\n  </mat-form-field>\\n</div>\\n\",\n                        styles: [\".example-container {\\n  display: flex;\\n  flex-direction: column;\\n}\\n\\n.example-container > * {\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        return FormFieldErrorExample;\n    }());\n\n    /** @title Form field with hints */\n    var FormFieldHintExample = /** @class */ (function () {\n        function FormFieldHintExample() {\n        }\n        FormFieldHintExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'form-field-hint-example',\n                        template: \"<div class=\\\"example-container\\\">\\n  <mat-form-field hintLabel=\\\"Max 10 characters\\\">\\n    <input matInput #input maxlength=\\\"10\\\" placeholder=\\\"Enter some input\\\">\\n    <mat-hint align=\\\"end\\\">{{input.value?.length || 0}}/10</mat-hint>\\n  </mat-form-field>\\n\\n  <mat-form-field>\\n    <mat-select placeholder=\\\"Select me\\\">\\n      <mat-option value=\\\"option\\\">Option</mat-option>\\n    </mat-select>\\n    <mat-hint align=\\\"end\\\">Here's the dropdown arrow ^</mat-hint>\\n  </mat-form-field>\\n</div>\\n\",\n                        styles: [\".example-container {\\n  display: flex;\\n  flex-direction: column;\\n}\\n\\n.example-container > * {\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        return FormFieldHintExample;\n    }());\n\n    /** @title Form field with label */\n    var FormFieldLabelExample = /** @class */ (function () {\n        function FormFieldLabelExample(fb) {\n            this.options = fb.group({\n                hideRequired: false,\n                floatLabel: 'auto',\n            });\n        }\n        FormFieldLabelExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'form-field-label-example',\n                        template: \"<div class=\\\"example-container\\\">\\n  <form class=\\\"example-container\\\" [formGroup]=\\\"options\\\">\\n    <mat-checkbox formControlName=\\\"hideRequired\\\">Hide required marker</mat-checkbox>\\n    <div>\\n      <label>Float label: </label>\\n      <mat-radio-group formControlName=\\\"floatLabel\\\">\\n        <mat-radio-button value=\\\"auto\\\">Auto</mat-radio-button>\\n        <mat-radio-button value=\\\"always\\\">Always</mat-radio-button>\\n        <mat-radio-button value=\\\"never\\\">Never</mat-radio-button>\\n      </mat-radio-group>\\n    </div>\\n  </form>\\n\\n  <mat-form-field\\n      [hideRequiredMarker]=\\\"options.value.hideRequired\\\"\\n      [floatLabel]=\\\"options.value.floatLabel\\\">\\n    <input matInput placeholder=\\\"Simple placeholder\\\" required>\\n  </mat-form-field>\\n\\n  <mat-form-field [floatLabel]=\\\"options.value.floatLabel\\\">\\n    <mat-label>Both a label and a placeholder</mat-label>\\n    <input matInput placeholder=\\\"Simple placeholder\\\">\\n  </mat-form-field>\\n\\n  <mat-form-field\\n      [hideRequiredMarker]=\\\"options.value.hideRequired\\\"\\n      [floatLabel]=\\\"options.value.floatLabel\\\">\\n    <mat-select required>\\n      <mat-option>-- None --</mat-option>\\n      <mat-option value=\\\"option\\\">Option</mat-option>\\n    </mat-select>\\n    <mat-label><mat-icon>favorite</mat-icon> <b> Fancy</b> <i> label</i></mat-label>\\n  </mat-form-field>\\n</div>\\n\",\n                        styles: [\".example-container {\\n  display: flex;\\n  flex-direction: column;\\n}\\n\\n.example-container > * {\\n  width: 100%;\\n}\\n\\n.example-container form {\\n  margin-bottom: 20px;\\n}\\n\\n.example-container form > * {\\n  margin: 5px 0;\\n}\\n\\n.example-container .mat-radio-button {\\n  margin: 0 12px;\\n}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        FormFieldLabelExample.ctorParameters = function () { return [\n            { type: forms.FormBuilder }\n        ]; };\n        return FormFieldLabelExample;\n    }());\n\n    /** @title Simple form field */\n    var FormFieldOverviewExample = /** @class */ (function () {\n        function FormFieldOverviewExample() {\n        }\n        FormFieldOverviewExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'form-field-overview-example',\n                        template: \"<div class=\\\"example-container\\\">\\n  <mat-form-field>\\n    <input matInput placeholder=\\\"Input\\\">\\n  </mat-form-field>\\n\\n  <mat-form-field>\\n    <textarea matInput placeholder=\\\"Textarea\\\"></textarea>\\n  </mat-form-field>\\n\\n  <mat-form-field>\\n    <mat-select placeholder=\\\"Select\\\">\\n      <mat-option value=\\\"option\\\">Option</mat-option>\\n    </mat-select>\\n  </mat-form-field>\\n</div>\\n\",\n                        styles: [\".example-container {\\n  display: flex;\\n  flex-direction: column;\\n}\\n\\n.example-container > * {\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        return FormFieldOverviewExample;\n    }());\n\n    /** @title Form field with prefix & suffix */\n    var FormFieldPrefixSuffixExample = /** @class */ (function () {\n        function FormFieldPrefixSuffixExample() {\n            this.hide = true;\n        }\n        FormFieldPrefixSuffixExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'form-field-prefix-suffix-example',\n                        template: \"<div class=\\\"example-container\\\">\\n  <mat-form-field>\\n    <input matInput placeholder=\\\"Enter your password\\\" [type]=\\\"hide ? 'password' : 'text'\\\">\\n    <button mat-icon-button matSuffix (click)=\\\"hide = !hide\\\" [attr.aria-label]=\\\"'Hide password'\\\" [attr.aria-pressed]=\\\"hide\\\">\\n    <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\n    </button>\\n  </mat-form-field>\\n\\n  <mat-form-field>\\n    <input matInput placeholder=\\\"Amount\\\" type=\\\"number\\\" class=\\\"example-right-align\\\">\\n    <span matPrefix>$&nbsp;</span>\\n    <span matSuffix>.00</span>\\n  </mat-form-field>\\n</div>\\n\",\n                        styles: [\".example-container {\\n  display: flex;\\n  flex-direction: column;\\n}\\n\\n.example-container > * {\\n  width: 100%;\\n}\\n\\n.example-right-align {\\n  text-align: right;\\n}\\n\\ninput.example-right-align::-webkit-outer-spin-button,\\ninput.example-right-align::-webkit-inner-spin-button {\\n  display: none;\\n}\\n\\ninput.example-right-align {\\n  -moz-appearance: textfield;\\n}\\n\"]\n                    }] }\n        ];\n        return FormFieldPrefixSuffixExample;\n    }());\n\n    /** @title Form field theming */\n    var FormFieldThemingExample = /** @class */ (function () {\n        function FormFieldThemingExample(fb) {\n            this.options = fb.group({\n                color: 'primary',\n                fontSize: [16, forms.Validators.min(10)],\n            });\n        }\n        FormFieldThemingExample.prototype.getFontSize = function () {\n            return Math.max(10, this.options.value.fontSize);\n        };\n        FormFieldThemingExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'form-field-theming-example',\n                        template: \"<form class=\\\"example-container\\\" [formGroup]=\\\"options\\\" [style.fontSize.px]=\\\"getFontSize()\\\">\\n  <mat-form-field [color]=\\\"options.value.color\\\">\\n    <mat-select placeholder=\\\"Color\\\" formControlName=\\\"color\\\">\\n      <mat-option value=\\\"primary\\\">Primary</mat-option>\\n      <mat-option value=\\\"accent\\\">Accent</mat-option>\\n      <mat-option value=\\\"warn\\\">Warn</mat-option>\\n    </mat-select>\\n  </mat-form-field>\\n\\n  <mat-form-field [color]=\\\"options.value.color\\\">\\n    <input matInput type=\\\"number\\\" placeholder=\\\"Font size (px)\\\" formControlName=\\\"fontSize\\\" min=\\\"10\\\">\\n    <mat-error *ngIf=\\\"options.get('fontSize')?.invalid\\\">Min size: 10px</mat-error>\\n  </mat-form-field>\\n</form>\\n\",\n                        styles: [\".example-container {\\n  display: flex;\\n  flex-direction: column;\\n}\\n\\n.example-container > * {\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        FormFieldThemingExample.ctorParameters = function () { return [\n            { type: forms.FormBuilder }\n        ]; };\n        return FormFieldThemingExample;\n    }());\n\n    var EXAMPLES = [\n        FormFieldAppearanceExample,\n        FormFieldCustomControlExample,\n        FormFieldErrorExample,\n        FormFieldHintExample,\n        FormFieldLabelExample,\n        FormFieldOverviewExample,\n        FormFieldPrefixSuffixExample,\n        FormFieldThemingExample,\n    ];\n    var FormFieldExamplesModule = /** @class */ (function () {\n        function FormFieldExamplesModule() {\n        }\n        FormFieldExamplesModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            common.CommonModule,\n                            button.MatButtonModule,\n                            checkbox.MatCheckboxModule,\n                            formField.MatFormFieldModule,\n                            icon.MatIconModule,\n                            input.MatInputModule,\n                            radio.MatRadioModule,\n                            select.MatSelectModule,\n                            forms.ReactiveFormsModule,\n                        ],\n                        declarations: tslib_1.__spread(EXAMPLES, [MyTelInput]),\n                        exports: EXAMPLES,\n                    },] }\n        ];\n        return FormFieldExamplesModule;\n    }());\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.FormFieldAppearanceExample = FormFieldAppearanceExample;\n    exports.FormFieldCustomControlExample = FormFieldCustomControlExample;\n    exports.FormFieldErrorExample = FormFieldErrorExample;\n    exports.FormFieldHintExample = FormFieldHintExample;\n    exports.FormFieldLabelExample = FormFieldLabelExample;\n    exports.FormFieldOverviewExample = FormFieldOverviewExample;\n    exports.FormFieldPrefixSuffixExample = FormFieldPrefixSuffixExample;\n    exports.FormFieldThemingExample = FormFieldThemingExample;\n    exports.MyTelInput = MyTelInput;\n    exports.FormFieldExamplesModule = FormFieldExamplesModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-examples-material-form-field.umd.js.map\n"]}