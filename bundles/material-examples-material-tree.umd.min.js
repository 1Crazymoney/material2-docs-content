!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/common"),require("@angular/core"),require("@angular/material/button"),require("@angular/material/checkbox"),require("@angular/material/icon"),require("@angular/material/input"),require("@angular/material/progress-bar"),require("@angular/material/tree"),require("tslib"),require("@angular/cdk/collections"),require("@angular/cdk/tree"),require("rxjs"),require("rxjs/operators")):"function"==typeof define&&define.amd?define("@angular/material-examples/material/tree",["exports","@angular/common","@angular/core","@angular/material/button","@angular/material/checkbox","@angular/material/icon","@angular/material/input","@angular/material/progress-bar","@angular/material/tree","tslib","@angular/cdk/collections","@angular/cdk/tree","rxjs","rxjs/operators"],t):t(((e=e||self).ng=e.ng||{},e.ng.materialExamples=e.ng.materialExamples||{},e.ng.materialExamples.material=e.ng.materialExamples.material||{},e.ng.materialExamples.material.tree={}),e.ng.common,e.ng.core,e.ng.material.button,e.ng.material.checkbox,e.ng.material.icon,e.ng.material.input,e.ng.material.progressBar,e.ng.material.tree,e.tslib,e.ng.cdk.collections,e.ng.cdk.tree,e.rxjs,e.rxjs.operators)}(this,function(e,t,n,a,r,o,i,l,d,s,c,u,h,m){"use strict";var p=function p(){},g=function g(){},f={Groceries:{"Almond Meal flour":null,"Organic eggs":null,"Protein Powder":null,Fruits:{Apple:null,Berries:["Blueberry","Raspberry"],Orange:null}},Reminders:["Cook dinner","Read the Material Design spec","Upgrade Application to Angular"]},b=function(){function e(){this.dataChange=new h.BehaviorSubject([]),this.initialize()}return Object.defineProperty(e.prototype,"data",{get:function(){return this.dataChange.value},enumerable:!0,configurable:!0}),e.prototype.initialize=function(){var e=this.buildFileTree(f,0);this.dataChange.next(e)},e.prototype.buildFileTree=function(e,t){var n=this;return Object.keys(e).reduce(function(a,r){var o=e[r],i=new p;return i.item=r,null!=o&&("object"==typeof o?i.children=n.buildFileTree(o,t+1):i.item=o),a.concat(i)},[])},e.prototype.insertItem=function(e,t){e.children&&(e.children.push({item:t}),this.dataChange.next(this.data))},e.prototype.updateItem=function(e,t){e.item=t,this.dataChange.next(this.data)},e.decorators=[{type:n.Injectable}],e.ctorParameters=function(){return[]},e}(),x=function(){function e(e){var t=this;this._database=e,this.flatNodeMap=new Map,this.nestedNodeMap=new Map,this.selectedParent=null,this.newItemName="",this.checklistSelection=new c.SelectionModel(!0),this.getLevel=function(e){return e.level},this.isExpandable=function(e){return e.expandable},this.getChildren=function(e){return e.children},this.hasChild=function(e,t){return t.expandable},this.hasNoContent=function(e,t){return""===t.item},this.transformer=function(e,n){var a=t.nestedNodeMap.get(e),r=a&&a.item===e.item?a:new g;return r.item=e.item,r.level=n,r.expandable=!!e.children,t.flatNodeMap.set(r,e),t.nestedNodeMap.set(e,r),r},this.treeFlattener=new d.MatTreeFlattener(this.transformer,this.getLevel,this.isExpandable,this.getChildren),this.treeControl=new u.FlatTreeControl(this.getLevel,this.isExpandable),this.dataSource=new d.MatTreeFlatDataSource(this.treeControl,this.treeFlattener),e.dataChange.subscribe(function(e){t.dataSource.data=e})}return e.prototype.descendantsAllSelected=function(e){var t=this;return this.treeControl.getDescendants(e).every(function(e){return t.checklistSelection.isSelected(e)})},e.prototype.descendantsPartiallySelected=function(e){var t=this;return this.treeControl.getDescendants(e).some(function(e){return t.checklistSelection.isSelected(e)})&&!this.descendantsAllSelected(e)},e.prototype.todoItemSelectionToggle=function(e){var t,n,a=this;this.checklistSelection.toggle(e);var r=this.treeControl.getDescendants(e);this.checklistSelection.isSelected(e)?(t=this.checklistSelection).select.apply(t,s.__spread(r)):(n=this.checklistSelection).deselect.apply(n,s.__spread(r)),r.every(function(e){return a.checklistSelection.isSelected(e)}),this.checkAllParentsSelection(e)},e.prototype.todoLeafItemSelectionToggle=function(e){this.checklistSelection.toggle(e),this.checkAllParentsSelection(e)},e.prototype.checkAllParentsSelection=function(e){for(var t=this.getParentNode(e);t;)this.checkRootNodeSelection(t),t=this.getParentNode(t)},e.prototype.checkRootNodeSelection=function(e){var t=this,n=this.checklistSelection.isSelected(e),a=this.treeControl.getDescendants(e).every(function(e){return t.checklistSelection.isSelected(e)});n&&!a?this.checklistSelection.deselect(e):!n&&a&&this.checklistSelection.select(e)},e.prototype.getParentNode=function(e){var t=this.getLevel(e);if(t<1)return null;for(var n=this.treeControl.dataNodes.indexOf(e)-1;n>=0;n--){var a=this.treeControl.dataNodes[n];if(this.getLevel(a)<t)return a}return null},e.prototype.addNewItem=function(e){var t=this.flatNodeMap.get(e);this._database.insertItem(t,""),this.treeControl.expand(e)},e.prototype.saveNode=function(e,t){var n=this.flatNodeMap.get(e);this._database.updateItem(n,t)},e.decorators=[{type:n.Component,args:[{selector:"tree-checklist-example",template:'<mat-tree [dataSource]="dataSource" [treeControl]="treeControl">\n  <mat-tree-node *matTreeNodeDef="let node" matTreeNodeToggle matTreeNodePadding>\n    <button mat-icon-button disabled></button>\n    <mat-checkbox class="checklist-leaf-node"\n                  [checked]="checklistSelection.isSelected(node)"\n                  (change)="todoLeafItemSelectionToggle(node)">{{node.item}}</mat-checkbox>\n  </mat-tree-node>\n\n  <mat-tree-node *matTreeNodeDef="let node; when: hasNoContent" matTreeNodePadding>\n    <button mat-icon-button disabled></button>\n    <mat-form-field>\n      <input matInput #itemValue placeholder="New item...">\n    </mat-form-field>\n    <button mat-button (click)="saveNode(node, itemValue.value)">Save</button>\n  </mat-tree-node>\n\n  <mat-tree-node *matTreeNodeDef="let node; when: hasChild" matTreeNodePadding>\n    <button mat-icon-button matTreeNodeToggle\n            [attr.aria-label]="\'toggle \' + node.filename">\n      <mat-icon class="mat-icon-rtl-mirror">\n        {{treeControl.isExpanded(node) ? \'expand_more\' : \'chevron_right\'}}\n      </mat-icon>\n    </button>\n    <mat-checkbox [checked]="descendantsAllSelected(node)"\n                  [indeterminate]="descendantsPartiallySelected(node)"\n                  (change)="todoItemSelectionToggle(node)">{{node.item}}</mat-checkbox>\n    <button mat-icon-button (click)="addNewItem(node)"><mat-icon>add</mat-icon></button>\n  </mat-tree-node>\n</mat-tree>\n',providers:[b],styles:[""]}]}],e.ctorParameters=function(){return[{type:b}]},e}(),v=function v(e,t,n,a){void 0===t&&(t=1),void 0===n&&(n=!1),void 0===a&&(a=!1),this.item=e,this.level=t,this.expandable=n,this.isLoading=a},C=function(){function e(){this.dataMap=new Map([["Fruits",["Apple","Orange","Banana"]],["Vegetables",["Tomato","Potato","Onion"]],["Apple",["Fuji","Macintosh"]],["Onion",["Yellow","White","Purple"]]]),this.rootLevelNodes=["Fruits","Vegetables"]}return e.prototype.initialData=function(){return this.rootLevelNodes.map(function(e){return new v(e,0,!0)})},e.prototype.getChildren=function(e){return this.dataMap.get(e)},e.prototype.isExpandable=function(e){return this.dataMap.has(e)},e}(),T=function(){function e(e,t){this._treeControl=e,this._database=t,this.dataChange=new h.BehaviorSubject([])}return Object.defineProperty(e.prototype,"data",{get:function(){return this.dataChange.value},set:function(e){this._treeControl.dataNodes=e,this.dataChange.next(e)},enumerable:!0,configurable:!0}),e.prototype.connect=function(e){var t=this;return this._treeControl.expansionModel.onChange.subscribe(function(e){(e.added||e.removed)&&t.handleTreeControl(e)}),h.merge(e.viewChange,this.dataChange).pipe(m.map(function(){return t.data}))},e.prototype.handleTreeControl=function(e){var t=this;e.added&&e.added.forEach(function(e){return t.toggleNode(e,!0)}),e.removed&&e.removed.slice().reverse().forEach(function(e){return t.toggleNode(e,!1)})},e.prototype.toggleNode=function(e,t){var n=this,a=this._database.getChildren(e.item),r=this.data.indexOf(e);!a||r<0||(e.isLoading=!0,setTimeout(function(){var o;if(t){var i=a.map(function(t){return new v(t,e.level+1,n._database.isExpandable(t))});(o=n.data).splice.apply(o,s.__spread([r+1,0],i))}else{for(var l=0,d=r+1;d<n.data.length&&n.data[d].level>e.level;d++,l++);n.data.splice(r+1,l)}n.dataChange.next(n.data),e.isLoading=!1},1e3))},e.decorators=[{type:n.Injectable}],e.ctorParameters=function(){return[{type:u.FlatTreeControl},{type:C}]},e}(),y=function(){function e(e){this.getLevel=function(e){return e.level},this.isExpandable=function(e){return e.expandable},this.hasChild=function(e,t){return t.expandable},this.treeControl=new u.FlatTreeControl(this.getLevel,this.isExpandable),this.dataSource=new T(this.treeControl,e),this.dataSource.data=e.initialData()}return e.decorators=[{type:n.Component,args:[{selector:"tree-dynamic-example",template:'<mat-tree [dataSource]="dataSource" [treeControl]="treeControl">\n  <mat-tree-node *matTreeNodeDef="let node" matTreeNodePadding>\n    <button mat-icon-button disabled></button>\n    {{node.item}}\n  </mat-tree-node>\n  <mat-tree-node *matTreeNodeDef="let node; when: hasChild" matTreeNodePadding>\n    <button mat-icon-button\n            [attr.aria-label]="\'toggle \' + node.filename" matTreeNodeToggle>\n      <mat-icon class="mat-icon-rtl-mirror">\n        {{treeControl.isExpanded(node) ? \'expand_more\' : \'chevron_right\'}}\n      </mat-icon>\n    </button>\n    {{node.item}}\n    <mat-progress-bar *ngIf="node.isLoading"\n                      mode="indeterminate"\n                      class="example-tree-progress-bar"></mat-progress-bar>\n  </mat-tree-node>\n</mat-tree>\n',providers:[C],styles:[".example-tree-progress-bar {\n  margin-left: 30px;\n}\n"]}]}],e.ctorParameters=function(){return[{type:C}]},e}(),M=[{name:"Fruit",children:[{name:"Apple"},{name:"Banana"},{name:"Fruit loops"}]},{name:"Vegetables",children:[{name:"Green",children:[{name:"Broccoli"},{name:"Brussel sprouts"}]},{name:"Orange",children:[{name:"Pumpkins"},{name:"Carrots"}]}]}],N=function(){function e(){this._transformer=function(e,t){return{expandable:!!e.children&&e.children.length>0,name:e.name,level:t}},this.treeControl=new u.FlatTreeControl(function(e){return e.level},function(e){return e.expandable}),this.treeFlattener=new d.MatTreeFlattener(this._transformer,function(e){return e.level},function(e){return e.expandable},function(e){return e.children}),this.dataSource=new d.MatTreeFlatDataSource(this.treeControl,this.treeFlattener),this.hasChild=function(e,t){return t.expandable},this.dataSource.data=M}return e.decorators=[{type:n.Component,args:[{selector:"tree-flat-overview-example",template:'<mat-tree [dataSource]="dataSource" [treeControl]="treeControl">\n  \x3c!-- This is the tree node template for leaf nodes --\x3e\n  <mat-tree-node *matTreeNodeDef="let node" matTreeNodePadding>\n    \x3c!-- use a disabled button to provide padding for tree leaf --\x3e\n    <button mat-icon-button disabled></button>\n    {{node.name}}\n  </mat-tree-node>\n  \x3c!-- This is the tree node template for expandable nodes --\x3e\n  <mat-tree-node *matTreeNodeDef="let node;when: hasChild" matTreeNodePadding>\n    <button mat-icon-button matTreeNodeToggle\n            [attr.aria-label]="\'toggle \' + node.name">\n      <mat-icon class="mat-icon-rtl-mirror">\n        {{treeControl.isExpanded(node) ? \'expand_more\' : \'chevron_right\'}}\n      </mat-icon>\n    </button>\n    {{node.name}}\n  </mat-tree-node>\n</mat-tree>\n',styles:[""]}]}],e.ctorParameters=function(){return[]},e}(),S="LOAD_MORE",_=function(){function e(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=null),this.item=e,this.hasChildren=t,this.loadMoreParentItem=n,this.childrenChange=new h.BehaviorSubject([])}return Object.defineProperty(e.prototype,"children",{get:function(){return this.childrenChange.value},enumerable:!0,configurable:!0}),e}(),w=function w(e,t,n,a){void 0===t&&(t=1),void 0===n&&(n=!1),void 0===a&&(a=null),this.item=e,this.level=t,this.expandable=n,this.loadMoreParentItem=a},k=function(){function e(){this.batchNumber=5,this.dataChange=new h.BehaviorSubject([]),this.nodeMap=new Map,this.rootLevelNodes=["Vegetables","Fruits"],this.dataMap=new Map([["Fruits",["Apple","Orange","Banana"]],["Vegetables",["Tomato","Potato","Onion"]],["Apple",["Fuji","Macintosh"]],["Onion",["Yellow","White","Purple","Green","Shallot","Sweet","Red","Leek"]]])}return e.prototype.initialize=function(){var e=this,t=this.rootLevelNodes.map(function(t){return e._generateNode(t)});this.dataChange.next(t)},e.prototype.loadMore=function(e,t){var n=this;if(void 0===t&&(t=!1),this.nodeMap.has(e)&&this.dataMap.has(e)){var a=this.nodeMap.get(e),r=this.dataMap.get(e);if(!(t&&a.children.length>0)){var o=a.children.length+this.batchNumber,i=r.slice(0,o).map(function(e){return n._generateNode(e)});o<r.length&&i.push(new _(S,!1,e)),a.childrenChange.next(i),this.dataChange.next(this.dataChange.value)}}},e.prototype._generateNode=function(e){if(this.nodeMap.has(e))return this.nodeMap.get(e);var t=new _(e,this.dataMap.has(e));return this.nodeMap.set(e,t),t},e.decorators=[{type:n.Injectable}],e}(),P=function(){function e(e){var t=this;this._database=e,this.nodeMap=new Map,this.getChildren=function(e){return e.childrenChange},this.transformer=function(e,n){var a=t.nodeMap.get(e.item);if(a)return a;var r=new w(e.item,n,e.hasChildren,e.loadMoreParentItem);return t.nodeMap.set(e.item,r),r},this.getLevel=function(e){return e.level},this.isExpandable=function(e){return e.expandable},this.hasChild=function(e,t){return t.expandable},this.isLoadMore=function(e,t){return t.item===S},this.treeFlattener=new d.MatTreeFlattener(this.transformer,this.getLevel,this.isExpandable,this.getChildren),this.treeControl=new u.FlatTreeControl(this.getLevel,this.isExpandable),this.dataSource=new d.MatTreeFlatDataSource(this.treeControl,this.treeFlattener),e.dataChange.subscribe(function(e){t.dataSource.data=e}),e.initialize()}return e.prototype.loadMore=function(e){this._database.loadMore(e)},e.prototype.loadChildren=function(e){this._database.loadMore(e.item,!0)},e.decorators=[{type:n.Component,args:[{selector:"tree-loadmore-example",template:'<mat-tree [dataSource]="dataSource" [treeControl]="treeControl">\n  \x3c!-- Leaf node --\x3e\n  <mat-tree-node *matTreeNodeDef="let node" matTreeNodePadding>\n    <button mat-icon-button disabled></button>\n    {{node.item}}\n  </mat-tree-node>\n\n  \x3c!-- expandable node --\x3e\n  <mat-tree-node *matTreeNodeDef="let node; when: hasChild" matTreeNodePadding>\n    <button mat-icon-button\n            [attr.aria-label]="\'toggle \' + node.filename"\n            (click)="loadChildren(node)"\n            matTreeNodeToggle>\n      <mat-icon class="mat-icon-rtl-mirror">\n        {{treeControl.isExpanded(node) ? \'expand_more\' : \'chevron_right\'}}\n      </mat-icon>\n    </button>\n    {{node.item}}\n  </mat-tree-node>\n\n  <mat-tree-node *matTreeNodeDef="let node; when: isLoadMore">\n    <button mat-button (click)="loadMore(node.loadMoreParentItem)">\n      Load more...\n    </button>\n  </mat-tree-node>\n</mat-tree>\n',providers:[k],styles:[""]}]}],e.ctorParameters=function(){return[{type:k}]},e}(),F=[{name:"Fruit",children:[{name:"Apple"},{name:"Banana"},{name:"Fruit loops"}]},{name:"Vegetables",children:[{name:"Green",children:[{name:"Broccoli"},{name:"Brussel sprouts"}]},{name:"Orange",children:[{name:"Pumpkins"},{name:"Carrots"}]}]}],E=function(){function e(){this.treeControl=new u.NestedTreeControl(function(e){return e.children}),this.dataSource=new d.MatTreeNestedDataSource,this.hasChild=function(e,t){return!!t.children&&t.children.length>0},this.dataSource.data=F}return e.decorators=[{type:n.Component,args:[{selector:"tree-nested-overview-example",template:'<mat-tree [dataSource]="dataSource" [treeControl]="treeControl" class="example-tree">\n  \x3c!-- This is the tree node template for leaf nodes --\x3e\n  <mat-tree-node *matTreeNodeDef="let node" matTreeNodeToggle>\n    <li class="mat-tree-node">\n      \x3c!-- use a disabled button to provide padding for tree leaf --\x3e\n      <button mat-icon-button disabled></button>\n      {{node.name}}\n    </li>\n  </mat-tree-node>\n  \x3c!-- This is the tree node template for expandable nodes --\x3e\n  <mat-nested-tree-node *matTreeNodeDef="let node; when: hasChild">\n    <li>\n      <div class="mat-tree-node">\n        <button mat-icon-button matTreeNodeToggle\n                [attr.aria-label]="\'toggle \' + node.name">\n          <mat-icon class="mat-icon-rtl-mirror">\n            {{treeControl.isExpanded(node) ? \'expand_more\' : \'chevron_right\'}}\n          </mat-icon>\n        </button>\n        {{node.name}}\n      </div>\n      <ul [class.example-tree-invisible]="!treeControl.isExpanded(node)">\n        <ng-container matTreeNodeOutlet></ng-container>\n      </ul>\n    </li>\n  </mat-nested-tree-node>\n</mat-tree>\n',styles:[".example-tree-invisible {\n  display: none;\n}\n\n.example-tree ul,\n.example-tree li {\n  margin-top: 0;\n  margin-bottom: 0;\n  list-style-type: none;\n}\n"]}]}],e.ctorParameters=function(){return[]},e}(),L=[x,y,N,P,E],D=function(){function e(){}return e.decorators=[{type:n.NgModule,args:[{imports:[t.CommonModule,a.MatButtonModule,r.MatCheckboxModule,o.MatIconModule,i.MatInputModule,l.MatProgressBarModule,d.MatTreeModule],declarations:L,exports:L}]}],e}();e.ɵangular_material_src_material_examples_material_tree_tree_a=b,e.ɵangular_material_src_material_examples_material_tree_tree_b=C,e.ɵangular_material_src_material_examples_material_tree_tree_c=k,e.TreeChecklistExample=x,e.TreeDynamicExample=y,e.TreeFlatOverviewExample=N,e.TreeLoadmoreExample=P,e.TreeNestedOverviewExample=E,e.TreeExamplesModule=D,Object.defineProperty(e,"__esModule",{value:!0})});