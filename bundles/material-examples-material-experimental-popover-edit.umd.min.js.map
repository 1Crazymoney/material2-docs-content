{"version":3,"sources":["src/material-examples/material-examples-material-experimental-popover-edit.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","materialExamples","materialExperimental","popoverEdit","core","forms","material","button","icon","input","table","tslib","cdk","collections","rxjs","cdkExperimental","this","snackBar","tslib_1","popoverEdit$1","PERSON_DATA","id","firstName","middleName","lastName","PopoverEditCellSpanMatTableExample","displayedColumns","dataSource","ExampleDataSource","preservedValues","WeakMap","prototype","onSubmit","person","f","valid","value","decorators","type","Component","args","selector","template","styles","_super","_this","apply","arguments","data","BehaviorSubject","__extends","connect","disconnect","DataSource","ELEMENT_DATA","position","name","weight","symbol","PopoverEditMatTableFlexExample","ExampleDataSource$1","preservedNameValues","preservedWeightValues","onSubmitName","element","onSubmitWeight","ELEMENT_DATA$1","PopoverEditMatTableExample","_snackBar","ExampleDataSource$2","nameValues","FormValueContainer","weightValues","goodJob","open","undefined","duration","badJob","ctorParameters","MatSnackBar","ELEMENT_DATA$2","PopoverEditTabOutMatTableExample","ExampleDataSource$3","EXAMPLES","PopoverEditExamplesModule","NgModule","imports","MatButtonModule","MatIconModule","MatInputModule","MatPopoverEditModule","MatSnackBarModule","MatTableModule","FormsModule","declarations","Object","defineProperty"],"mappings":"CAAC,SAAUA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,iBAAkBA,QAAQ,kBAAmBA,QAAQ,+CAAgDA,QAAQ,4BAA6BA,QAAQ,0BAA2BA,QAAQ,2BAA4BA,QAAQ,+BAAgCA,QAAQ,2BAA4BA,QAAQ,SAAUA,QAAQ,4BAA6BA,QAAQ,QAASA,QAAQ,2CACnb,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,gEAAiE,CAAC,UAAW,gBAAiB,iBAAkB,8CAA+C,2BAA4B,yBAA0B,0BAA2B,8BAA+B,0BAA2B,QAAS,2BAA4B,OAAQ,0CAA2CJ,GAC5ZA,IAAzBD,EAASA,GAAUO,MAAsBC,GAAKR,EAAOQ,IAAM,GAAIR,EAAOQ,GAAGC,iBAAmBT,EAAOQ,GAAGC,kBAAoB,GAAIT,EAAOQ,GAAGC,iBAAiBC,qBAAuBV,EAAOQ,GAAGC,iBAAiBC,sBAAwB,GAAIV,EAAOQ,GAAGC,iBAAiBC,qBAAqBC,YAAc,IAAKX,EAAOQ,GAAGI,KAAMZ,EAAOQ,GAAGK,MAAOb,EAAOQ,GAAGE,qBAAqB,gBAAiBV,EAAOQ,GAAGM,SAASC,OAAQf,EAAOQ,GAAGM,SAASE,KAAMhB,EAAOQ,GAAGM,SAASG,MAAOjB,EAAOQ,GAAGM,SAAS,aAAcd,EAAOQ,GAAGM,SAASI,MAAOlB,EAAOmB,MAAOnB,EAAOQ,GAAGY,IAAIC,YAAarB,EAAOsB,KAAMtB,EAAOQ,GAAGe,gBAAgB,iBAHzlB,CAIEC,KAAM,SAAUtB,EAASU,EAAMC,EAAOF,EAAaI,EAAQC,EAAMC,EAAOQ,EAAUP,EAAOQ,EAASL,EAAaC,EAAMK,GAAiB,aAEpI,IAAIC,EAAc,CACd,CAAEC,GAAI,EAAGC,UAAW,QAASC,WAAY,SAAUC,SAAU,YAC7D,CAAEH,GAAI,EAAGC,UAAW,QAASC,WAAY,GAAIC,SAAU,QACvD,CAAEH,GAAI,EAAGC,UAAW,QAASC,WAAY,UAAWC,SAAU,SAC9D,CAAEH,GAAI,EAAGC,UAAW,QAASC,WAAY,OAAQC,SAAU,UAC3D,CAAEH,GAAI,EAAGC,UAAW,QAASC,WAAY,OAAQC,SAAU,UAC3D,CAAEH,GAAI,EAAGC,UAAW,QAASC,WAAY,WAAYC,SAAU,WAC/D,CAAEH,GAAI,EAAGC,UAAW,SAAUC,WAAY,GAAIC,SAAU,YACxD,CAAEH,GAAI,EAAGC,UAAW,MAAOC,WAAY,YAAaC,SAAU,WAC9D,CAAEH,GAAI,EAAGC,UAAW,MAAOC,WAAY,GAAIC,SAAU,aAKrDC,EAAoD,WACpD,SAASA,IACLT,KAAKU,iBAAmB,CAAC,KAAM,YAAa,aAAc,YAC1DV,KAAKW,WAAa,IAAIC,EACtBZ,KAAKa,gBAAkB,IAAIC,QAiB/B,OAfAL,EAAmCM,UAAUC,SAAW,SAAUC,EAAQC,GACjEA,EAAEC,QAGPF,EAAOX,UAAYY,EAAEE,MAAiB,UACtCH,EAAOV,WAAaW,EAAEE,MAAkB,WACxCH,EAAOT,SAAWU,EAAEE,MAAgB,WAExCX,EAAmCY,WAAa,CAC5C,CAAEC,KAAMlC,EAAKmC,UAAWC,KAAM,CAAC,CACnBC,SAAU,2CACVC,SAAU,4xGACVC,OAAQ,CAAC,0TAGlBlB,EArB4C,GA8BnDG,EAAmC,SAAUgB,GAE7C,SAAShB,IACL,IAAIiB,EAAmB,OAAXD,GAAmBA,EAAOE,MAAM9B,KAAM+B,YAAc/B,KAGhE,OADA6B,EAAMG,KAAO,IAAIlC,EAAKmC,gBAAgB7B,GAC/ByB,EAOX,OAZA3B,EAAQgC,UAAUtB,EAAmBgB,GAQrChB,EAAkBG,UAAUoB,QAAU,WAClC,OAAOnC,KAAKgC,MAEhBpB,EAAkBG,UAAUqB,WAAa,aAClCxB,EAb2B,CAcpCf,EAAYwC,YAEVC,EAAe,CACf,CAAEC,SAAU,EAAGC,KAAM,WAAYC,OAAQ,OAAQC,OAAQ,KACzD,CAAEH,SAAU,EAAGC,KAAM,SAAUC,OAAQ,OAAQC,OAAQ,MACvD,CAAEH,SAAU,EAAGC,KAAM,UAAWC,OAAQ,MAAOC,OAAQ,MACvD,CAAEH,SAAU,EAAGC,KAAM,YAAaC,OAAQ,OAAQC,OAAQ,MAC1D,CAAEH,SAAU,EAAGC,KAAM,QAASC,OAAQ,OAAQC,OAAQ,KACtD,CAAEH,SAAU,EAAGC,KAAM,SAAUC,OAAQ,QAASC,OAAQ,KACxD,CAAEH,SAAU,EAAGC,KAAM,WAAYC,OAAQ,QAASC,OAAQ,KAC1D,CAAEH,SAAU,EAAGC,KAAM,SAAUC,OAAQ,QAASC,OAAQ,KACxD,CAAEH,SAAU,EAAGC,KAAM,WAAYC,OAAQ,QAASC,OAAQ,KAC1D,CAAEH,SAAU,GAAIC,KAAM,OAAQC,OAAQ,QAASC,OAAQ,MACvD,CAAEH,SAAU,GAAIC,KAAM,SAAUC,OAAQ,QAASC,OAAQ,MACzD,CAAEH,SAAU,GAAIC,KAAM,YAAaC,OAAQ,OAAQC,OAAQ,MAC3D,CAAEH,SAAU,GAAIC,KAAM,WAAYC,OAAQ,QAASC,OAAQ,MAC3D,CAAEH,SAAU,GAAIC,KAAM,UAAWC,OAAQ,QAASC,OAAQ,MAC1D,CAAEH,SAAU,GAAIC,KAAM,aAAcC,OAAQ,QAASC,OAAQ,KAC7D,CAAEH,SAAU,GAAIC,KAAM,SAAUC,OAAQ,OAAQC,OAAQ,KACxD,CAAEH,SAAU,GAAIC,KAAM,WAAYC,OAAQ,OAAQC,OAAQ,MAC1D,CAAEH,SAAU,GAAIC,KAAM,QAASC,OAAQ,OAAQC,OAAQ,MACvD,CAAEH,SAAU,GAAIC,KAAM,YAAaC,OAAQ,QAASC,OAAQ,KAC5D,CAAEH,SAAU,GAAIC,KAAM,UAAWC,OAAQ,OAAQC,OAAQ,OAKzDC,EAAgD,WAChD,SAASA,IACL3C,KAAKU,iBAAmB,CAAC,WAAY,OAAQ,SAAU,UACvDV,KAAKW,WAAa,IAAIiC,EACtB5C,KAAK6C,oBAAsB,IAAI/B,QAC/Bd,KAAK8C,sBAAwB,IAAIhC,QAqBrC,OAnBA6B,EAA+B5B,UAAUgC,aAAe,SAAUC,EAAS9B,GAClEA,EAAEC,QAGP6B,EAAQR,KAAOtB,EAAEE,MAAMoB,OAE3BG,EAA+B5B,UAAUkC,eAAiB,SAAUD,EAAS9B,GACpEA,EAAEC,QAGP6B,EAAQP,OAASvB,EAAEE,MAAMqB,SAE7BE,EAA+BtB,WAAa,CACxC,CAAEC,KAAMlC,EAAKmC,UAAWC,KAAM,CAAC,CACnBC,SAAU,sCACVC,SAAU,usGACVC,OAAQ,CAAC,6JAGlBgB,EA1BwC,GAmC/CC,EAAqC,SAAUhB,GAE/C,SAAShB,IACL,IAAIiB,EAAmB,OAAXD,GAAmBA,EAAOE,MAAM9B,KAAM+B,YAAc/B,KAGhE,OADA6B,EAAMG,KAAO,IAAIlC,EAAKmC,gBAAgBK,GAC/BT,EAOX,OAZA3B,EAAQgC,UAAUtB,EAAmBgB,GAQrChB,EAAkBG,UAAUoB,QAAU,WAClC,OAAOnC,KAAKgC,MAEhBpB,EAAkBG,UAAUqB,WAAa,aAClCxB,EAb6B,CActCf,EAAYwC,YAEVa,EAAiB,CACjB,CAAEX,SAAU,EAAGC,KAAM,WAAYC,OAAQ,OAAQC,OAAQ,KACzD,CAAEH,SAAU,EAAGC,KAAM,SAAUC,OAAQ,OAAQC,OAAQ,MACvD,CAAEH,SAAU,EAAGC,KAAM,UAAWC,OAAQ,MAAOC,OAAQ,MACvD,CAAEH,SAAU,EAAGC,KAAM,YAAaC,OAAQ,OAAQC,OAAQ,MAC1D,CAAEH,SAAU,EAAGC,KAAM,QAASC,OAAQ,OAAQC,OAAQ,KACtD,CAAEH,SAAU,EAAGC,KAAM,SAAUC,OAAQ,QAASC,OAAQ,KACxD,CAAEH,SAAU,EAAGC,KAAM,WAAYC,OAAQ,QAASC,OAAQ,KAC1D,CAAEH,SAAU,EAAGC,KAAM,SAAUC,OAAQ,QAASC,OAAQ,KACxD,CAAEH,SAAU,EAAGC,KAAM,WAAYC,OAAQ,QAASC,OAAQ,KAC1D,CAAEH,SAAU,GAAIC,KAAM,OAAQC,OAAQ,QAASC,OAAQ,MACvD,CAAEH,SAAU,GAAIC,KAAM,SAAUC,OAAQ,QAASC,OAAQ,MACzD,CAAEH,SAAU,GAAIC,KAAM,YAAaC,OAAQ,OAAQC,OAAQ,MAC3D,CAAEH,SAAU,GAAIC,KAAM,WAAYC,OAAQ,QAASC,OAAQ,MAC3D,CAAEH,SAAU,GAAIC,KAAM,UAAWC,OAAQ,QAASC,OAAQ,MAC1D,CAAEH,SAAU,GAAIC,KAAM,aAAcC,OAAQ,QAASC,OAAQ,KAC7D,CAAEH,SAAU,GAAIC,KAAM,SAAUC,OAAQ,OAAQC,OAAQ,KACxD,CAAEH,SAAU,GAAIC,KAAM,WAAYC,OAAQ,OAAQC,OAAQ,MAC1D,CAAEH,SAAU,GAAIC,KAAM,QAASC,OAAQ,OAAQC,OAAQ,MACvD,CAAEH,SAAU,GAAIC,KAAM,YAAaC,OAAQ,QAASC,OAAQ,KAC5D,CAAEH,SAAU,GAAIC,KAAM,UAAWC,OAAQ,OAAQC,OAAQ,OAKzDS,EAA4C,WAC5C,SAASA,EAA2BC,GAChCpD,KAAKoD,UAAYA,EACjBpD,KAAKU,iBAAmB,CAAC,WAAY,OAAQ,SAAU,UACvDV,KAAKW,WAAa,IAAI0C,EACtBrD,KAAKsD,WAAa,IAAInD,EAAcoD,mBACpCvD,KAAKwD,aAAe,IAAIrD,EAAcoD,mBA+B1C,OA7BAJ,EAA2BpC,UAAUgC,aAAe,SAAUC,EAAS9B,GAC9DA,EAAEC,QAGP6B,EAAQR,KAAOtB,EAAEE,MAAMoB,OAE3BW,EAA2BpC,UAAUkC,eAAiB,SAAUD,EAAS9B,GAChEA,EAAEC,QAGP6B,EAAQP,OAASvB,EAAEE,MAAMqB,SAE7BU,EAA2BpC,UAAU0C,QAAU,SAAUT,GACrDhD,KAAKoD,UAAUM,KAAK,cAAgBV,EAAQR,KAAO,SAAKmB,EAAW,CAAEC,SAAU,OAEnFT,EAA2BpC,UAAU8C,OAAS,SAAUb,GACpDhD,KAAKoD,UAAUM,KAAK,0CAA4CV,EAAQT,SAAW,SAAKoB,EAAW,CAAEC,SAAU,OAEnHT,EAA2B9B,WAAa,CACpC,CAAEC,KAAMlC,EAAKmC,UAAWC,KAAM,CAAC,CACnBC,SAAU,iCACVC,SAAU,szGACVC,OAAQ,CAAC,yJAIzBwB,EAA2BW,eAAiB,WAAc,MAAO,CAC7D,CAAExC,KAAMrB,EAAS8D,eAEdZ,EArCoC,GA8C3CE,EAAqC,SAAUzB,GAE/C,SAAShB,IACL,IAAIiB,EAAmB,OAAXD,GAAmBA,EAAOE,MAAM9B,KAAM+B,YAAc/B,KAGhE,OADA6B,EAAMG,KAAO,IAAIlC,EAAKmC,gBAAgBiB,GAC/BrB,EAOX,OAZA3B,EAAQgC,UAAUtB,EAAmBgB,GAQrChB,EAAkBG,UAAUoB,QAAU,WAClC,OAAOnC,KAAKgC,MAEhBpB,EAAkBG,UAAUqB,WAAa,aAClCxB,EAb6B,CActCf,EAAYwC,YAEV2B,EAAiB,CACjB,CAAEzB,SAAU,EAAGC,KAAM,WAAYC,OAAQ,OAAQC,OAAQ,KACzD,CAAEH,SAAU,EAAGC,KAAM,SAAUC,OAAQ,OAAQC,OAAQ,MACvD,CAAEH,SAAU,EAAGC,KAAM,UAAWC,OAAQ,MAAOC,OAAQ,MACvD,CAAEH,SAAU,EAAGC,KAAM,YAAaC,OAAQ,OAAQC,OAAQ,MAC1D,CAAEH,SAAU,EAAGC,KAAM,QAASC,OAAQ,OAAQC,OAAQ,KACtD,CAAEH,SAAU,EAAGC,KAAM,SAAUC,OAAQ,QAASC,OAAQ,KACxD,CAAEH,SAAU,EAAGC,KAAM,WAAYC,OAAQ,QAASC,OAAQ,KAC1D,CAAEH,SAAU,EAAGC,KAAM,SAAUC,OAAQ,QAASC,OAAQ,KACxD,CAAEH,SAAU,EAAGC,KAAM,WAAYC,OAAQ,QAASC,OAAQ,KAC1D,CAAEH,SAAU,GAAIC,KAAM,OAAQC,OAAQ,QAASC,OAAQ,MACvD,CAAEH,SAAU,GAAIC,KAAM,SAAUC,OAAQ,QAASC,OAAQ,MACzD,CAAEH,SAAU,GAAIC,KAAM,YAAaC,OAAQ,OAAQC,OAAQ,MAC3D,CAAEH,SAAU,GAAIC,KAAM,WAAYC,OAAQ,QAASC,OAAQ,MAC3D,CAAEH,SAAU,GAAIC,KAAM,UAAWC,OAAQ,QAASC,OAAQ,MAC1D,CAAEH,SAAU,GAAIC,KAAM,aAAcC,OAAQ,QAASC,OAAQ,KAC7D,CAAEH,SAAU,GAAIC,KAAM,SAAUC,OAAQ,OAAQC,OAAQ,KACxD,CAAEH,SAAU,GAAIC,KAAM,WAAYC,OAAQ,OAAQC,OAAQ,MAC1D,CAAEH,SAAU,GAAIC,KAAM,QAASC,OAAQ,OAAQC,OAAQ,MACvD,CAAEH,SAAU,GAAIC,KAAM,YAAaC,OAAQ,QAASC,OAAQ,KAC5D,CAAEH,SAAU,GAAIC,KAAM,UAAWC,OAAQ,OAAQC,OAAQ,OAKzDuB,EAAkD,WAClD,SAASA,IACLjE,KAAKU,iBAAmB,CAAC,WAAY,OAAQ,SAAU,UACvDV,KAAKW,WAAa,IAAIuD,EACtBlE,KAAK6C,oBAAsB,IAAI/B,QAC/Bd,KAAK8C,sBAAwB,IAAIhC,QAqBrC,OAnBAmD,EAAiClD,UAAUgC,aAAe,SAAUC,EAAS9B,GACpEA,EAAEC,QAGP6B,EAAQR,KAAOtB,EAAEE,MAAMoB,OAE3ByB,EAAiClD,UAAUkC,eAAiB,SAAUD,EAAS9B,GACtEA,EAAEC,QAGP6B,EAAQP,OAASvB,EAAEE,MAAMqB,SAE7BwB,EAAiC5C,WAAa,CAC1C,CAAEC,KAAMlC,EAAKmC,UAAWC,KAAM,CAAC,CACnBC,SAAU,yCACVC,SAAU,88FACVC,OAAQ,CAAC,yJAGlBsC,EA1B0C,GAmCjDC,EAAqC,SAAUtC,GAE/C,SAAShB,IACL,IAAIiB,EAAmB,OAAXD,GAAmBA,EAAOE,MAAM9B,KAAM+B,YAAc/B,KAGhE,OADA6B,EAAMG,KAAO,IAAIlC,EAAKmC,gBAAgB+B,GAC/BnC,EAOX,OAZA3B,EAAQgC,UAAUtB,EAAmBgB,GAQrChB,EAAkBG,UAAUoB,QAAU,WAClC,OAAOnC,KAAKgC,MAEhBpB,EAAkBG,UAAUqB,WAAa,aAClCxB,EAb6B,CActCf,EAAYwC,YAEV8B,EAAW,CACX1D,EACA0C,EACAR,EACAsB,GAEAG,EAA2C,WAC3C,SAASA,KAiBT,OAfAA,EAA0B/C,WAAa,CACnC,CAAEC,KAAMlC,EAAKiF,SAAU7C,KAAM,CAAC,CAClB8C,QAAS,CACL/E,EAAOgF,gBACP/E,EAAKgF,cACL/E,EAAMgF,eACNtF,EAAYuF,qBACZzE,EAAS0E,kBACTjF,EAAMkF,eACNvF,EAAMwF,aAEVC,aAAcX,EACdzF,QAASyF,MAGlBC,EAlBmC,GAyB9C1F,EAAQ+B,mCAAqCA,EAC7C/B,EAAQyE,2BAA6BA,EACrCzE,EAAQiE,+BAAiCA,EACzCjE,EAAQuF,iCAAmCA,EAC3CvF,EAAQ0F,0BAA4BA,EAEpCW,OAAOC,eAAetG,EAAS,aAAc,CAAE0C,OAAO","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/material-experimental/popover-edit'), require('@angular/material/button'), require('@angular/material/icon'), require('@angular/material/input'), require('@angular/material/snack-bar'), require('@angular/material/table'), require('tslib'), require('@angular/cdk/collections'), require('rxjs'), require('@angular/cdk-experimental/popover-edit')) :\n    typeof define === 'function' && define.amd ? define('@angular/material-examples/material-experimental/popover-edit', ['exports', '@angular/core', '@angular/forms', '@angular/material-experimental/popover-edit', '@angular/material/button', '@angular/material/icon', '@angular/material/input', '@angular/material/snack-bar', '@angular/material/table', 'tslib', '@angular/cdk/collections', 'rxjs', '@angular/cdk-experimental/popover-edit'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.materialExamples = global.ng.materialExamples || {}, global.ng.materialExamples.materialExperimental = global.ng.materialExamples.materialExperimental || {}, global.ng.materialExamples.materialExperimental.popoverEdit = {}), global.ng.core, global.ng.forms, global.ng.materialExperimental['popover-edit'], global.ng.material.button, global.ng.material.icon, global.ng.material.input, global.ng.material['snack-bar'], global.ng.material.table, global.tslib, global.ng.cdk.collections, global.rxjs, global.ng.cdkExperimental['popover-edit']));\n}(this, function (exports, core, forms, popoverEdit, button, icon, input, snackBar, table, tslib_1, collections, rxjs, popoverEdit$1) { 'use strict';\n\n    var PERSON_DATA = [\n        { id: 1, firstName: 'Terra', middleName: 'Maduin', lastName: 'Branford' },\n        { id: 2, firstName: 'Locke', middleName: '', lastName: 'Cole' },\n        { id: 3, firstName: 'Celes', middleName: 'Gestahl', lastName: 'Chere' },\n        { id: 4, firstName: 'Edgar', middleName: 'Roni', lastName: 'Figaro' },\n        { id: 5, firstName: 'Sabin', middleName: 'Rene', lastName: 'Figaro' },\n        { id: 6, firstName: 'Clyde', middleName: '\"Shadow\"', lastName: 'Arrowny' },\n        { id: 7, firstName: 'Setzer', middleName: '', lastName: 'Gabbiani' },\n        { id: 8, firstName: 'Cid', middleName: 'Del Norte', lastName: 'Marquez' },\n        { id: 9, firstName: 'Mog', middleName: '', lastName: 'McMoogle' },\n    ];\n    /**\n     * @title Material Popover Edit spanning multiple columns on a Material data-table\n     */\n    var PopoverEditCellSpanMatTableExample = /** @class */ (function () {\n        function PopoverEditCellSpanMatTableExample() {\n            this.displayedColumns = ['id', 'firstName', 'middleName', 'lastName'];\n            this.dataSource = new ExampleDataSource();\n            this.preservedValues = new WeakMap();\n        }\n        PopoverEditCellSpanMatTableExample.prototype.onSubmit = function (person, f) {\n            if (!f.valid) {\n                return;\n            }\n            person.firstName = f.value['firstName'];\n            person.middleName = f.value['middleName'];\n            person.lastName = f.value['lastName'];\n        };\n        PopoverEditCellSpanMatTableExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'popover-edit-cell-span-mat-table-example',\n                        template: \"<table class=\\\"example-table\\\" mat-table editable [dataSource]=\\\"dataSource\\\">\\n  <ng-template #nameEdit let-ctx>\\n    <div>\\n      <form #f=\\\"ngForm\\\"\\n          matEditLens\\n          (ngSubmit)=\\\"onSubmit(ctx.person, f)\\\"\\n          [matEditLensPreservedFormValue]=\\\"preservedValues.get(ctx.person)\\\"\\n          (matEditLensPreservedFormValueChange)=\\\"preservedValues.set(ctx.person, $event)\\\">\\n        <div mat-edit-content class=\\\"example-input-container\\\">\\n          <mat-form-field>\\n            <input matInput [ngModel]=\\\"ctx.person.firstName\\\" name=\\\"firstName\\\" required\\n                [attr.cdkFocusInitial]=\\\"ctx.focus === 'firstName' || null\\\">\\n          </mat-form-field>\\n          <mat-form-field>\\n            <input matInput [ngModel]=\\\"ctx.person.middleName\\\" name=\\\"middleName\\\"\\n                [attr.cdkFocusInitial]=\\\"ctx.focus === 'middleName' || null\\\">\\n          </mat-form-field>\\n          <mat-form-field>\\n            <input matInput [ngModel]=\\\"ctx.person.lastName\\\" name=\\\"lastName\\\" required\\n                [attr.cdkFocusInitial]=\\\"ctx.focus === 'lastName' || null\\\">\\n          </mat-form-field>\\n        </div>\\n\\n        <div mat-edit-actions>\\n          <button mat-button type=\\\"submit\\\">Confirm</button>\\n          <button mat-button cdkEditRevert>Revert</button>\\n          <button mat-button cdkEditClose>Close</button>\\n        </div>\\n      </form>\\n    </div>\\n  </ng-template>\\n\\n  <!-- Position Column -->\\n  <ng-container matColumnDef=\\\"id\\\">\\n    <th mat-header-cell *matHeaderCellDef> No. </th>\\n    <td mat-cell *matCellDef=\\\"let person\\\"> {{person.id}} </td>\\n  </ng-container>\\n\\n  <!-- Name Column -->\\n  <ng-container matColumnDef=\\\"firstName\\\">\\n    <th mat-header-cell *matHeaderCellDef> First Name </th>\\n    <td mat-cell *matCellDef=\\\"let person\\\"\\n        [matPopoverEdit]=\\\"nameEdit\\\"\\n        [matPopoverEditContext]=\\\"{person: person, focus: 'firstName'}\\\"\\n        [matPopoverEditColspan]=\\\"{after: 2}\\\">\\n      {{person.firstName}}\\n\\n      <span *matRowHoverContent>\\n        <button mat-icon-button matEditOpen><mat-icon>edit</mat-icon></button>\\n      </span>\\n    </td>\\n  </ng-container>\\n\\n  <!-- Weight Column -->\\n  <ng-container matColumnDef=\\\"middleName\\\">\\n    <th mat-header-cell *matHeaderCellDef> Middle Name </th>\\n    <td mat-cell *matCellDef=\\\"let person\\\"\\n        [matPopoverEdit]=\\\"nameEdit\\\"\\n        [matPopoverEditContext]=\\\"{person: person, focus: 'middleName'}\\\"\\n        [matPopoverEditColspan]=\\\"{before:1 , after: 1}\\\">\\n      {{person.middleName}}\\n\\n      <span *matRowHoverContent>\\n        <button mat-icon-button matEditOpen><mat-icon>edit</mat-icon></button>\\n      </span>\\n    </td>\\n  </ng-container>\\n\\n  <!-- Symbol Column -->\\n  <ng-container matColumnDef=\\\"lastName\\\">\\n    <th mat-header-cell *matHeaderCellDef> Last Name </th>\\n    <td mat-cell *matCellDef=\\\"let person\\\"\\n        [matPopoverEdit]=\\\"nameEdit\\\"\\n        [matPopoverEditContext]=\\\"{person: person, focus: 'lastName'}\\\"\\n        [matPopoverEditColspan]=\\\"{before: 2}\\\">\\n      {{person.lastName}}\\n\\n      <span *matRowHoverContent>\\n        <button mat-icon-button matEditOpen><mat-icon>edit</mat-icon></button>\\n      </span>\\n    </td>\\n  </ng-container>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n</table>\\n\",\n                        styles: [\".example-table {\\n  width: 100%;\\n}\\n\\n.example-table th {\\n  text-align: left;\\n}\\n\\n.example-table td,\\n.example-table th {\\n  min-width: 300px;\\n  width: 25%;\\n}\\n\\n.example-input-container {\\n  display: flex;\\n  justify-content: stretch;\\n}\\n\\n.example-input-container mat-form-field {\\n  flex: 1;\\n}\\n\"]\n                    }] }\n        ];\n        return PopoverEditCellSpanMatTableExample;\n    }());\n    /**\n     * Data source to provide what data should be rendered in the table. Note that the data source\n     * can retrieve its data in any way. In this case, the data source is provided a reference\n     * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage\n     * the underlying data. Instead, it only needs to take the data and send the table exactly what\n     * should be rendered.\n     */\n    var ExampleDataSource = /** @class */ (function (_super) {\n        tslib_1.__extends(ExampleDataSource, _super);\n        function ExampleDataSource() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            /** Stream of data that is provided to the table. */\n            _this.data = new rxjs.BehaviorSubject(PERSON_DATA);\n            return _this;\n        }\n        /** Connect function called by the table to retrieve one stream containing the data to render. */\n        ExampleDataSource.prototype.connect = function () {\n            return this.data;\n        };\n        ExampleDataSource.prototype.disconnect = function () { };\n        return ExampleDataSource;\n    }(collections.DataSource));\n\n    var ELEMENT_DATA = [\n        { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n        { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n        { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n        { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n        { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n        { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n        { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n        { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n        { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n        { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n        { position: 11, name: 'Sodium', weight: 22.9897, symbol: 'Na' },\n        { position: 12, name: 'Magnesium', weight: 24.305, symbol: 'Mg' },\n        { position: 13, name: 'Aluminum', weight: 26.9815, symbol: 'Al' },\n        { position: 14, name: 'Silicon', weight: 28.0855, symbol: 'Si' },\n        { position: 15, name: 'Phosphorus', weight: 30.9738, symbol: 'P' },\n        { position: 16, name: 'Sulfur', weight: 32.065, symbol: 'S' },\n        { position: 17, name: 'Chlorine', weight: 35.453, symbol: 'Cl' },\n        { position: 18, name: 'Argon', weight: 39.948, symbol: 'Ar' },\n        { position: 19, name: 'Potassium', weight: 39.0983, symbol: 'K' },\n        { position: 20, name: 'Calcium', weight: 40.078, symbol: 'Ca' },\n    ];\n    /**\n     * @title Material Popover Edit on a flex Material data-table\n     */\n    var PopoverEditMatTableFlexExample = /** @class */ (function () {\n        function PopoverEditMatTableFlexExample() {\n            this.displayedColumns = ['position', 'name', 'weight', 'symbol'];\n            this.dataSource = new ExampleDataSource$1();\n            this.preservedNameValues = new WeakMap();\n            this.preservedWeightValues = new WeakMap();\n        }\n        PopoverEditMatTableFlexExample.prototype.onSubmitName = function (element, f) {\n            if (!f.valid) {\n                return;\n            }\n            element.name = f.value.name;\n        };\n        PopoverEditMatTableFlexExample.prototype.onSubmitWeight = function (element, f) {\n            if (!f.valid) {\n                return;\n            }\n            element.weight = f.value.weight;\n        };\n        PopoverEditMatTableFlexExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'popover-edit-mat-table-flex-example',\n                        template: \"<mat-table class=\\\"example-table\\\" editable [dataSource]=\\\"dataSource\\\">\\n  <!--\\n    This edit lens is specified outside of the cell and must explicitly declare\\n    its context. It could be reused in multiple cells.\\n  -->\\n  <ng-template #weightEdit let-element>\\n    <div>\\n      <form #f=\\\"ngForm\\\"\\n          matEditLens\\n          (ngSubmit)=\\\"onSubmitWeight(element, f)\\\"\\n          [matEditLensPreservedFormValue]=\\\"preservedWeightValues.get(element)\\\"\\n          (matEditLensPreservedFormValueChange)=\\\"preservedWeightValues.set(element, $event)\\\">\\n        <div mat-edit-content>\\n          <mat-form-field>\\n            <input matInput type=\\\"number\\\" [ngModel]=\\\"element.weight\\\" name=\\\"weight\\\" required>\\n          </mat-form-field>\\n        </div>\\n      </form>\\n    </div>\\n  </ng-template>\\n\\n  <!-- Position Column -->\\n  <ng-container matColumnDef=\\\"position\\\">\\n    <mat-header-cell *matHeaderCellDef> No. </mat-header-cell>\\n    <mat-cell *matCellDef=\\\"let element\\\"> {{element.position}} </mat-cell>\\n  </ng-container>\\n\\n  <!-- Name Column -->\\n  <ng-container matColumnDef=\\\"name\\\">\\n    <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\\n    <mat-cell *matCellDef=\\\"let element\\\"\\n        [matPopoverEdit]=\\\"nameEdit\\\">\\n      {{element.name}}\\n      \\n      <!-- This edit is defined in the cell and can implicitly access element -->\\n      <ng-template #nameEdit>\\n        <div>\\n          <form #f=\\\"ngForm\\\"\\n              matEditLens\\n              (ngSubmit)=\\\"onSubmitName(element, f)\\\"\\n              [matEditLensPreservedFormValue]=\\\"preservedNameValues.get(element)\\\"\\n              (matEditLensPreservedFormValueChange)=\\\"preservedNameValues.set(element, $event)\\\">\\n            <h2 mat-edit-title>Name</h2>\\n            <div mat-edit-content>\\n              <mat-form-field>\\n                <input matInput [ngModel]=\\\"element.name\\\" name=\\\"name\\\" required>\\n              </mat-form-field>\\n            </div>\\n            <div mat-edit-actions>\\n              <button mat-button type=\\\"submit\\\">Confirm</button>\\n              <button mat-button matEditRevert>Revert</button>\\n              <button mat-button matEditClose>Close</button>\\n            </div>\\n          </form>\\n        </div>\\n      </ng-template>\\n\\n      <span *matRowHoverContent>\\n        <button mat-icon-button matEditOpen><mat-icon>edit</mat-icon></button>\\n      </span>\\n    </mat-cell>\\n  </ng-container>\\n\\n  <!-- Weight Column -->\\n  <ng-container matColumnDef=\\\"weight\\\">\\n    <mat-header-cell *matHeaderCellDef> Weight </mat-header-cell>\\n    <mat-cell *matCellDef=\\\"let element\\\"\\n        [matPopoverEdit]=\\\"weightEdit\\\" [matPopoverEditContext]=\\\"element\\\">\\n      {{element.weight}}\\n      \\n      <span *matRowHoverContent>\\n        <button mat-icon-button matEditOpen><mat-icon>edit</mat-icon></button>\\n      </span>\\n      </mat-cell>\\n  </ng-container>\\n\\n  <!-- Symbol Column -->\\n  <ng-container matColumnDef=\\\"symbol\\\">\\n    <mat-header-cell *matHeaderCellDef> Symbol </mat-header-cell>\\n    <mat-cell *matCellDef=\\\"let element\\\"> {{element.symbol}} </mat-cell>\\n  </ng-container>\\n\\n  <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n  <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\n</mat-table>\\n\",\n                        styles: [\".example-table {\\n  width: 100%;\\n}\\n\\n/*.example-table th {\\n  text-align: left;\\n}\\n\\n.example-table td,\\n.example-table th {\\n  width: 25%;\\n}*/\\n\"]\n                    }] }\n        ];\n        return PopoverEditMatTableFlexExample;\n    }());\n    /**\n     * Data source to provide what data should be rendered in the table. Note that the data source\n     * can retrieve its data in any way. In this case, the data source is provided a reference\n     * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage\n     * the underlying data. Instead, it only needs to take the data and send the table exactly what\n     * should be rendered.\n     */\n    var ExampleDataSource$1 = /** @class */ (function (_super) {\n        tslib_1.__extends(ExampleDataSource, _super);\n        function ExampleDataSource() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            /** Stream of data that is provided to the table. */\n            _this.data = new rxjs.BehaviorSubject(ELEMENT_DATA);\n            return _this;\n        }\n        /** Connect function called by the table to retrieve one stream containing the data to render. */\n        ExampleDataSource.prototype.connect = function () {\n            return this.data;\n        };\n        ExampleDataSource.prototype.disconnect = function () { };\n        return ExampleDataSource;\n    }(collections.DataSource));\n\n    var ELEMENT_DATA$1 = [\n        { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n        { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n        { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n        { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n        { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n        { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n        { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n        { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n        { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n        { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n        { position: 11, name: 'Sodium', weight: 22.9897, symbol: 'Na' },\n        { position: 12, name: 'Magnesium', weight: 24.305, symbol: 'Mg' },\n        { position: 13, name: 'Aluminum', weight: 26.9815, symbol: 'Al' },\n        { position: 14, name: 'Silicon', weight: 28.0855, symbol: 'Si' },\n        { position: 15, name: 'Phosphorus', weight: 30.9738, symbol: 'P' },\n        { position: 16, name: 'Sulfur', weight: 32.065, symbol: 'S' },\n        { position: 17, name: 'Chlorine', weight: 35.453, symbol: 'Cl' },\n        { position: 18, name: 'Argon', weight: 39.948, symbol: 'Ar' },\n        { position: 19, name: 'Potassium', weight: 39.0983, symbol: 'K' },\n        { position: 20, name: 'Calcium', weight: 40.078, symbol: 'Ca' },\n    ];\n    /**\n     * @title Material Popover Edit on a Material data-table\n     */\n    var PopoverEditMatTableExample = /** @class */ (function () {\n        function PopoverEditMatTableExample(_snackBar) {\n            this._snackBar = _snackBar;\n            this.displayedColumns = ['position', 'name', 'weight', 'symbol'];\n            this.dataSource = new ExampleDataSource$2();\n            this.nameValues = new popoverEdit$1.FormValueContainer();\n            this.weightValues = new popoverEdit$1.FormValueContainer();\n        }\n        PopoverEditMatTableExample.prototype.onSubmitName = function (element, f) {\n            if (!f.valid) {\n                return;\n            }\n            element.name = f.value.name;\n        };\n        PopoverEditMatTableExample.prototype.onSubmitWeight = function (element, f) {\n            if (!f.valid) {\n                return;\n            }\n            element.weight = f.value.weight;\n        };\n        PopoverEditMatTableExample.prototype.goodJob = function (element) {\n            this._snackBar.open(\"Way to go, \" + element.name + \"!\", undefined, { duration: 2000 });\n        };\n        PopoverEditMatTableExample.prototype.badJob = function (element) {\n            this._snackBar.open(\"You have failed me for the last time, #\" + element.position + \".\", undefined, { duration: 2000 });\n        };\n        PopoverEditMatTableExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'popover-edit-mat-table-example',\n                        template: \"<table class=\\\"example-table\\\" mat-table editable [dataSource]=\\\"dataSource\\\">\\n  <!--\\n    This edit lens is specified outside of the cell and must explicitly declare\\n    its context. It could be reused in multiple cells.\\n  -->\\n  <ng-template #weightEdit let-element>\\n    <div>\\n      <form #f=\\\"ngForm\\\"\\n          matEditLens\\n          (ngSubmit)=\\\"onSubmitWeight(element, f)\\\"\\n          [(matEditLensPreservedFormValue)]=\\\"weightValues.for(element).value\\\">\\n        <div mat-edit-content>\\n          <mat-form-field>\\n            <input matInput type=\\\"number\\\" [ngModel]=\\\"element.weight\\\" name=\\\"weight\\\" required>\\n          </mat-form-field>\\n        </div>\\n      </form>\\n    </div>\\n  </ng-template>\\n\\n  <!-- Position Column -->\\n  <ng-container matColumnDef=\\\"position\\\">\\n    <th mat-header-cell *matHeaderCellDef> No. </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\">\\n      {{element.position}}\\n\\n      <!-- Row hover content in a non-edit cell. -->\\n      <span *matRowHoverContent>\\n        <button mat-icon-button (click)=\\\"goodJob(element)\\\">\\n          <mat-icon>thumb_up</mat-icon>\\n        </button>\\n        <button mat-icon-button (click)=\\\"badJob(element)\\\">\\n          <mat-icon>thumb_down</mat-icon>\\n        </button>\\n      </span>\\n    </td>\\n  </ng-container>\\n\\n  <!-- Name Column -->\\n  <ng-container matColumnDef=\\\"name\\\">\\n    <th mat-header-cell *matHeaderCellDef> Name </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"\\n        [matPopoverEdit]=\\\"nameEdit\\\">\\n      {{element.name}}\\n      \\n      <!-- This edit is defined in the cell and can implicitly access element -->\\n      <ng-template #nameEdit>\\n        <div>\\n          <form #f=\\\"ngForm\\\"\\n              matEditLens\\n              (ngSubmit)=\\\"onSubmitName(element, f)\\\"\\n              [(matEditLensPreservedFormValue)]=\\\"nameValues.for(element).value\\\">\\n            <h2 mat-edit-title>Name</h2>\\n            <div mat-edit-content>\\n              <mat-form-field>\\n                <input matInput [ngModel]=\\\"element.name\\\" name=\\\"name\\\" required>\\n              </mat-form-field>\\n            </div>\\n            <div mat-edit-actions>\\n              <button mat-button type=\\\"submit\\\">Confirm</button>\\n              <button mat-button matEditRevert>Revert</button>\\n              <button mat-button matEditClose>Close</button>\\n            </div>\\n          </form>\\n        </div>\\n      </ng-template>\\n\\n      <span *matRowHoverContent>\\n        <button mat-icon-button matEditOpen><mat-icon>edit</mat-icon></button>\\n      </span>\\n    </td>\\n  </ng-container>\\n\\n  <!-- Weight Column -->\\n  <ng-container matColumnDef=\\\"weight\\\">\\n    <th mat-header-cell *matHeaderCellDef> Weight </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"\\n        [matPopoverEdit]=\\\"weightEdit\\\" [matPopoverEditContext]=\\\"element\\\">\\n      {{element.weight}}\\n      \\n      <span *matRowHoverContent>\\n        <button mat-icon-button matEditOpen><mat-icon>edit</mat-icon></button>\\n      </span>\\n    </td>\\n  </ng-container>\\n\\n  <!-- Symbol Column -->\\n  <ng-container matColumnDef=\\\"symbol\\\">\\n    <th mat-header-cell *matHeaderCellDef> Symbol </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.symbol}} </td>\\n  </ng-container>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n</table>\\n\",\n                        styles: [\".example-table {\\n  width: 100%;\\n}\\n\\n.example-table th {\\n  text-align: left;\\n}\\n\\n.example-table td,\\n.example-table th {\\n  width: 25%;\\n}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        PopoverEditMatTableExample.ctorParameters = function () { return [\n            { type: snackBar.MatSnackBar }\n        ]; };\n        return PopoverEditMatTableExample;\n    }());\n    /**\n     * Data source to provide what data should be rendered in the table. Note that the data source\n     * can retrieve its data in any way. In this case, the data source is provided a reference\n     * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage\n     * the underlying data. Instead, it only needs to take the data and send the table exactly what\n     * should be rendered.\n     */\n    var ExampleDataSource$2 = /** @class */ (function (_super) {\n        tslib_1.__extends(ExampleDataSource, _super);\n        function ExampleDataSource() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            /** Stream of data that is provided to the table. */\n            _this.data = new rxjs.BehaviorSubject(ELEMENT_DATA$1);\n            return _this;\n        }\n        /** Connect function called by the table to retrieve one stream containing the data to render. */\n        ExampleDataSource.prototype.connect = function () {\n            return this.data;\n        };\n        ExampleDataSource.prototype.disconnect = function () { };\n        return ExampleDataSource;\n    }(collections.DataSource));\n\n    var ELEMENT_DATA$2 = [\n        { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n        { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n        { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n        { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n        { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n        { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n        { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n        { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n        { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n        { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n        { position: 11, name: 'Sodium', weight: 22.9897, symbol: 'Na' },\n        { position: 12, name: 'Magnesium', weight: 24.305, symbol: 'Mg' },\n        { position: 13, name: 'Aluminum', weight: 26.9815, symbol: 'Al' },\n        { position: 14, name: 'Silicon', weight: 28.0855, symbol: 'Si' },\n        { position: 15, name: 'Phosphorus', weight: 30.9738, symbol: 'P' },\n        { position: 16, name: 'Sulfur', weight: 32.065, symbol: 'S' },\n        { position: 17, name: 'Chlorine', weight: 35.453, symbol: 'Cl' },\n        { position: 18, name: 'Argon', weight: 39.948, symbol: 'Ar' },\n        { position: 19, name: 'Potassium', weight: 39.0983, symbol: 'K' },\n        { position: 20, name: 'Calcium', weight: 40.078, symbol: 'Ca' },\n    ];\n    /**\n     * @title Material Popover Edit with spreadsheet-like configuration on a Material data-table\n     */\n    var PopoverEditTabOutMatTableExample = /** @class */ (function () {\n        function PopoverEditTabOutMatTableExample() {\n            this.displayedColumns = ['position', 'name', 'weight', 'symbol'];\n            this.dataSource = new ExampleDataSource$3();\n            this.preservedNameValues = new WeakMap();\n            this.preservedWeightValues = new WeakMap();\n        }\n        PopoverEditTabOutMatTableExample.prototype.onSubmitName = function (element, f) {\n            if (!f.valid) {\n                return;\n            }\n            element.name = f.value.name;\n        };\n        PopoverEditTabOutMatTableExample.prototype.onSubmitWeight = function (element, f) {\n            if (!f.valid) {\n                return;\n            }\n            element.weight = f.value.weight;\n        };\n        PopoverEditTabOutMatTableExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'popover-edit-tab-out-mat-table-example',\n                        template: \"<table class=\\\"example-table\\\" mat-table editable [dataSource]=\\\"dataSource\\\">\\n  <!--\\n    This edit lens is specified outside of the cell and must explicitly declare\\n    its context. It could be reused in multiple cells.\\n  -->\\n  <ng-template #weightEdit let-element>\\n    <div>\\n      <form #f=\\\"ngForm\\\"\\n          matEditLens\\n          matEditLensClickOutBehavior=\\\"submit\\\"\\n          (ngSubmit)=\\\"onSubmitWeight(element, f)\\\"\\n          [matEditLensPreservedFormValue]=\\\"preservedWeightValues.get(element)\\\"\\n          (matEditLensPreservedFormValueChange)=\\\"preservedWeightValues.set(element, $event)\\\">\\n        <div mat-edit-content>\\n          <mat-form-field>\\n            <input matInput type=\\\"number\\\" [ngModel]=\\\"element.weight\\\" name=\\\"weight\\\" required>\\n          </mat-form-field>\\n        </div>\\n      </form>\\n    </div>\\n  </ng-template>\\n\\n  <!-- Position Column -->\\n  <ng-container matColumnDef=\\\"position\\\">\\n    <th mat-header-cell *matHeaderCellDef> No. </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.position}} </td>\\n  </ng-container>\\n\\n  <!-- Name Column -->\\n  <ng-container matColumnDef=\\\"name\\\">\\n    <th mat-header-cell *matHeaderCellDef> Name </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"\\n        [matPopoverEdit]=\\\"nameEdit\\\" matPopoverEditTabOut\\n        matEditOpen>\\n      {{element.name}}\\n      \\n      <!-- This edit is defined in the cell and can implicitly access element -->\\n      <ng-template #nameEdit>\\n        <div>\\n          <form #f=\\\"ngForm\\\"\\n              matEditLens\\n              matEditLensClickOutBehavior=\\\"submit\\\"\\n              (ngSubmit)=\\\"onSubmitName(element, f)\\\"\\n              [matEditLensPreservedFormValue]=\\\"preservedNameValues.get(element)\\\"\\n              (matEditLensPreservedFormValueChange)=\\\"preservedNameValues.set(element, $event)\\\">\\n            <div mat-edit-content>\\n              <mat-form-field>\\n                <input matInput [ngModel]=\\\"element.name\\\" name=\\\"name\\\" required>\\n              </mat-form-field>\\n            </div>\\n          </form>\\n        </div>\\n      </ng-template>\\n\\n      <span *matRowHoverContent>\\n        <mat-icon>edit</mat-icon>\\n      </span>\\n    </td>\\n  </ng-container>\\n\\n  <!-- Weight Column -->\\n  <ng-container matColumnDef=\\\"weight\\\">\\n    <th mat-header-cell *matHeaderCellDef> Weight </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"\\n        [matPopoverEdit]=\\\"weightEdit\\\" matPopoverEditTabOut\\n        [matPopoverEditContext]=\\\"element\\\"\\n        matEditOpen>\\n      {{element.weight}}\\n      \\n      <span *matRowHoverContent>\\n        <mat-icon>edit</mat-icon>\\n      </span>\\n    </td>\\n  </ng-container>\\n\\n  <!-- Symbol Column -->\\n  <ng-container matColumnDef=\\\"symbol\\\">\\n    <th mat-header-cell *matHeaderCellDef> Symbol </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.symbol}} </td>\\n  </ng-container>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n</table>\\n\",\n                        styles: [\".example-table {\\n  width: 100%;\\n}\\n\\n.example-table th {\\n  text-align: left;\\n}\\n\\n.example-table td,\\n.example-table th {\\n  width: 25%;\\n}\\n\"]\n                    }] }\n        ];\n        return PopoverEditTabOutMatTableExample;\n    }());\n    /**\n     * Data source to provide what data should be rendered in the table. Note that the data source\n     * can retrieve its data in any way. In this case, the data source is provided a reference\n     * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage\n     * the underlying data. Instead, it only needs to take the data and send the table exactly what\n     * should be rendered.\n     */\n    var ExampleDataSource$3 = /** @class */ (function (_super) {\n        tslib_1.__extends(ExampleDataSource, _super);\n        function ExampleDataSource() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            /** Stream of data that is provided to the table. */\n            _this.data = new rxjs.BehaviorSubject(ELEMENT_DATA$2);\n            return _this;\n        }\n        /** Connect function called by the table to retrieve one stream containing the data to render. */\n        ExampleDataSource.prototype.connect = function () {\n            return this.data;\n        };\n        ExampleDataSource.prototype.disconnect = function () { };\n        return ExampleDataSource;\n    }(collections.DataSource));\n\n    var EXAMPLES = [\n        PopoverEditCellSpanMatTableExample,\n        PopoverEditMatTableExample,\n        PopoverEditMatTableFlexExample,\n        PopoverEditTabOutMatTableExample,\n    ];\n    var PopoverEditExamplesModule = /** @class */ (function () {\n        function PopoverEditExamplesModule() {\n        }\n        PopoverEditExamplesModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            button.MatButtonModule,\n                            icon.MatIconModule,\n                            input.MatInputModule,\n                            popoverEdit.MatPopoverEditModule,\n                            snackBar.MatSnackBarModule,\n                            table.MatTableModule,\n                            forms.FormsModule,\n                        ],\n                        declarations: EXAMPLES,\n                        exports: EXAMPLES,\n                    },] }\n        ];\n        return PopoverEditExamplesModule;\n    }());\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.PopoverEditCellSpanMatTableExample = PopoverEditCellSpanMatTableExample;\n    exports.PopoverEditMatTableExample = PopoverEditMatTableExample;\n    exports.PopoverEditMatTableFlexExample = PopoverEditMatTableFlexExample;\n    exports.PopoverEditTabOutMatTableExample = PopoverEditTabOutMatTableExample;\n    exports.PopoverEditExamplesModule = PopoverEditExamplesModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-examples-material-experimental-popover-edit.umd.js.map\n"]}