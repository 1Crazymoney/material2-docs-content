{"version":3,"sources":["src/material-examples/material-examples-material-slide-toggle.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","materialExamples","material","slideToggle","core","forms","button","card","checkbox","radio","this","SlideToggleConfigurableExample","color","checked","disabled","decorators","type","Component","args","selector","template","styles","SlideToggleFormsExample","formBuilder","isChecked","formGroup","group","enableWifi","acceptTerms","Validators","requiredTrue","prototype","onFormSubmit","alert","JSON","stringify","value","ctorParameters","FormBuilder","SlideToggleOverviewExample","EXAMPLES","SlideToggleExamplesModule","NgModule","imports","FormsModule","MatButtonModule","MatCardModule","MatCheckboxModule","MatRadioModule","MatSlideToggleModule","ReactiveFormsModule","declarations","Object","defineProperty"],"mappings":"CAAC,SAAUA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,iBAAkBA,QAAQ,kBAAmBA,QAAQ,4BAA6BA,QAAQ,0BAA2BA,QAAQ,8BAA+BA,QAAQ,2BAA4BA,QAAQ,mCAC9Q,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,mDAAoD,CAAC,UAAW,gBAAiB,iBAAkB,2BAA4B,yBAA0B,6BAA8B,0BAA2B,kCAAmCJ,GAC/QA,IAAzBD,EAASA,GAAUO,MAAsBC,GAAKR,EAAOQ,IAAM,GAAIR,EAAOQ,GAAGC,iBAAmBT,EAAOQ,GAAGC,kBAAoB,GAAIT,EAAOQ,GAAGC,iBAAiBC,SAAWV,EAAOQ,GAAGC,iBAAiBC,UAAY,GAAIV,EAAOQ,GAAGC,iBAAiBC,SAASC,YAAc,IAAKX,EAAOQ,GAAGI,KAAMZ,EAAOQ,GAAGK,MAAOb,EAAOQ,GAAGE,SAASI,OAAQd,EAAOQ,GAAGE,SAASK,KAAMf,EAAOQ,GAAGE,SAASM,SAAUhB,EAAOQ,GAAGE,SAASO,MAAOjB,EAAOQ,GAAGE,SAAS,iBAH1a,CAIEQ,KAAM,SAAUhB,EAASU,EAAMC,EAAOC,EAAQC,EAAMC,EAAUC,EAAON,GAAe,aAKlF,IAAIQ,EAAgD,WAChD,SAASA,IACLD,KAAKE,MAAQ,SACbF,KAAKG,SAAU,EACfH,KAAKI,UAAW,EASpB,OAPAH,EAA+BI,WAAa,CACxC,CAAEC,KAAMZ,EAAKa,UAAWC,KAAM,CAAC,CACnBC,SAAU,oCACVC,SAAU,uyCACVC,OAAQ,CAAC,kMAGlBV,EAbwC,GAmB/CW,EAAyC,WACzC,SAASA,EAAwBC,GAC7Bb,KAAKc,WAAY,EACjBd,KAAKe,UAAYF,EAAYG,MAAM,CAC/BC,WAAY,GACZC,YAAa,CAAC,GAAIvB,EAAMwB,WAAWC,gBAiB3C,OAdAR,EAAwBS,UAAUC,aAAe,WAC7CC,MAAMC,KAAKC,UAAUzB,KAAKe,UAAUW,MAAO,KAAM,KAErDd,EAAwBP,WAAa,CACjC,CAAEC,KAAMZ,EAAKa,UAAWC,KAAM,CAAC,CACnBC,SAAU,6BACVC,SAAU,++BACVC,OAAQ,CAAC,kFAIzBC,EAAwBe,eAAiB,WAAc,MAAO,CAC1D,CAAErB,KAAMX,EAAMiC,eAEXhB,EAtBiC,GA4BxCiB,EAA4C,WAC5C,SAASA,KAST,OAPAA,EAA2BxB,WAAa,CACpC,CAAEC,KAAMZ,EAAKa,UAAWC,KAAM,CAAC,CACnBC,SAAU,gCACVC,SAAU,mDACVC,OAAQ,CAAC,wCAGlBkB,EAVoC,GAa3CC,EAAW,CACX7B,EACAW,EACAiB,GAEAE,EAA2C,WAC3C,SAASA,KAiBT,OAfAA,EAA0B1B,WAAa,CACnC,CAAEC,KAAMZ,EAAKsC,SAAUxB,KAAM,CAAC,CAClByB,QAAS,CACLtC,EAAMuC,YACNtC,EAAOuC,gBACPtC,EAAKuC,cACLtC,EAASuC,kBACTtC,EAAMuC,eACN7C,EAAY8C,qBACZ5C,EAAM6C,qBAEVC,aAAcX,EACd9C,QAAS8C,MAGlBC,EAlBmC,GAyB9C/C,EAAQiB,+BAAiCA,EACzCjB,EAAQ4B,wBAA0BA,EAClC5B,EAAQ6C,2BAA6BA,EACrC7C,EAAQ+C,0BAA4BA,EAEpCW,OAAOC,eAAe3D,EAAS,aAAc,CAAE0C,OAAO","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/material/button'), require('@angular/material/card'), require('@angular/material/checkbox'), require('@angular/material/radio'), require('@angular/material/slide-toggle')) :\n    typeof define === 'function' && define.amd ? define('@angular/material-examples/material/slide-toggle', ['exports', '@angular/core', '@angular/forms', '@angular/material/button', '@angular/material/card', '@angular/material/checkbox', '@angular/material/radio', '@angular/material/slide-toggle'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.materialExamples = global.ng.materialExamples || {}, global.ng.materialExamples.material = global.ng.materialExamples.material || {}, global.ng.materialExamples.material.slideToggle = {}), global.ng.core, global.ng.forms, global.ng.material.button, global.ng.material.card, global.ng.material.checkbox, global.ng.material.radio, global.ng.material['slide-toggle']));\n}(this, function (exports, core, forms, button, card, checkbox, radio, slideToggle) { 'use strict';\n\n    /**\n     * @title Configurable slide-toggle\n     */\n    var SlideToggleConfigurableExample = /** @class */ (function () {\n        function SlideToggleConfigurableExample() {\n            this.color = 'accent';\n            this.checked = false;\n            this.disabled = false;\n        }\n        SlideToggleConfigurableExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'slide-toggle-configurable-example',\n                        template: \"<mat-card>\\n  <mat-card-content>\\n    <h2 class=\\\"example-h2\\\">Slider configuration</h2>\\n\\n    <section class=\\\"example-section\\\">\\n      <label class=\\\"example-margin\\\">Color:</label>\\n      <mat-radio-group [(ngModel)]=\\\"color\\\">\\n        <mat-radio-button class=\\\"example-margin\\\" value=\\\"primary\\\">\\n          Primary\\n        </mat-radio-button>\\n        <mat-radio-button class=\\\"example-margin\\\" value=\\\"accent\\\">\\n          Accent\\n        </mat-radio-button>\\n        <mat-radio-button class=\\\"example-margin\\\" value=\\\"warn\\\">\\n          Warn\\n        </mat-radio-button>\\n      </mat-radio-group>\\n    </section>\\n\\n    <section class=\\\"example-section\\\">\\n      <mat-checkbox class=\\\"example-margin\\\" [(ngModel)]=\\\"checked\\\">Checked</mat-checkbox>\\n    </section>\\n\\n    <section class=\\\"example-section\\\">\\n      <mat-checkbox class=\\\"example-margin\\\" [(ngModel)]=\\\"disabled\\\">Disabled</mat-checkbox>\\n    </section>\\n  </mat-card-content>\\n</mat-card>\\n\\n<mat-card class=\\\"result\\\">\\n  <mat-card-content>\\n    <h2 class=\\\"example-h2\\\">Result</h2>\\n\\n    <section class=\\\"example-section\\\">\\n      <mat-slide-toggle\\n          class=\\\"example-margin\\\"\\n          [color]=\\\"color\\\"\\n          [checked]=\\\"checked\\\"\\n          [disabled]=\\\"disabled\\\">\\n        Slide me!\\n      </mat-slide-toggle>\\n    </section>\\n  </mat-card-content>\\n</mat-card>\\n\",\n                        styles: [\".example-h2 {\\n  margin: 10px;\\n}\\n\\n.example-section {\\n  display: flex;\\n  align-content: center;\\n  align-items: center;\\n  height: 60px;\\n}\\n\\n.example-margin {\\n  margin: 10px;\\n}\\n\"]\n                    }] }\n        ];\n        return SlideToggleConfigurableExample;\n    }());\n\n    /**\n     * @title Slide-toggle with forms\n     */\n    var SlideToggleFormsExample = /** @class */ (function () {\n        function SlideToggleFormsExample(formBuilder) {\n            this.isChecked = true;\n            this.formGroup = formBuilder.group({\n                enableWifi: '',\n                acceptTerms: ['', forms.Validators.requiredTrue]\n            });\n        }\n        SlideToggleFormsExample.prototype.onFormSubmit = function () {\n            alert(JSON.stringify(this.formGroup.value, null, 2));\n        };\n        SlideToggleFormsExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'slide-toggle-forms-example',\n                        template: \"<p>Slide Toggle using a simple NgModel.</p>\\n\\n<mat-slide-toggle [(ngModel)]=\\\"isChecked\\\">Slide Toggle Checked: {{isChecked}}</mat-slide-toggle>\\n\\n<p>Slide Toggle inside of a Template-driven form</p>\\n\\n<form class=\\\"example-form\\\" #form=\\\"ngForm\\\" (ngSubmit)=\\\"onFormSubmit()\\\" ngNativeValidate>\\n\\n  <mat-slide-toggle ngModel name=\\\"enableWifi\\\">Enable Wifi</mat-slide-toggle>\\n  <mat-slide-toggle ngModel name=\\\"acceptTerms\\\" required>Accept Terms of Service</mat-slide-toggle>\\n\\n  <button mat-raised-button type=\\\"submit\\\">Save Settings</button>\\n</form>\\n\\n<p>Slide Toggle inside of a Reactive form</p>\\n\\n<form class=\\\"example-form\\\" [formGroup]=\\\"formGroup\\\" (ngSubmit)=\\\"onFormSubmit()\\\" ngNativeValidate>\\n\\n  <mat-slide-toggle formControlName=\\\"enableWifi\\\">Enable Wifi</mat-slide-toggle>\\n  <mat-slide-toggle formControlName=\\\"acceptTerms\\\">Accept Terms of Service</mat-slide-toggle>\\n\\n  <p>Form Group Status: {{formGroup.status}}</p>\\n\\n  <button mat-rasied-button type=\\\"submit\\\">Save Settings</button>\\n</form>\\n\",\n                        styles: [\".example-form mat-slide-toggle {\\n  margin: 8px 0;\\n  display: block;\\n}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        SlideToggleFormsExample.ctorParameters = function () { return [\n            { type: forms.FormBuilder }\n        ]; };\n        return SlideToggleFormsExample;\n    }());\n\n    /**\n     * @title Basic slide-toggles\n     */\n    var SlideToggleOverviewExample = /** @class */ (function () {\n        function SlideToggleOverviewExample() {\n        }\n        SlideToggleOverviewExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'slide-toggle-overview-example',\n                        template: \"<mat-slide-toggle>Slide me!</mat-slide-toggle>\\n\",\n                        styles: [\"/** No CSS for this example */\\n\"]\n                    }] }\n        ];\n        return SlideToggleOverviewExample;\n    }());\n\n    var EXAMPLES = [\n        SlideToggleConfigurableExample,\n        SlideToggleFormsExample,\n        SlideToggleOverviewExample,\n    ];\n    var SlideToggleExamplesModule = /** @class */ (function () {\n        function SlideToggleExamplesModule() {\n        }\n        SlideToggleExamplesModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            forms.FormsModule,\n                            button.MatButtonModule,\n                            card.MatCardModule,\n                            checkbox.MatCheckboxModule,\n                            radio.MatRadioModule,\n                            slideToggle.MatSlideToggleModule,\n                            forms.ReactiveFormsModule,\n                        ],\n                        declarations: EXAMPLES,\n                        exports: EXAMPLES,\n                    },] }\n        ];\n        return SlideToggleExamplesModule;\n    }());\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.SlideToggleConfigurableExample = SlideToggleConfigurableExample;\n    exports.SlideToggleFormsExample = SlideToggleFormsExample;\n    exports.SlideToggleOverviewExample = SlideToggleOverviewExample;\n    exports.SlideToggleExamplesModule = SlideToggleExamplesModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-examples-material-slide-toggle.umd.js.map\n"]}