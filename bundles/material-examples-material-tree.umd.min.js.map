{"version":3,"sources":["src/material-examples/material-examples-material-tree.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","materialExamples","material","tree","common","core","button","checkbox","icon","input","tslib","cdk","collections","rxjs","operators","this","progressBar","tslib_1","tree$1","TodoItemNode","TodoItemFlatNode","TREE_DATA","Groceries","Almond Meal flour","Organic eggs","Protein Powder","Fruits","Apple","Berries","Orange","Reminders","ChecklistDatabase","dataChange","BehaviorSubject","initialize","Object","defineProperty","prototype","get","value","enumerable","configurable","data","buildFileTree","next","obj","level","_this","keys","reduce","accumulator","key","node","item","children","concat","insertItem","parent","name","push","updateItem","decorators","type","Injectable","ctorParameters","TreeChecklistExample","_database","flatNodeMap","Map","nestedNodeMap","selectedParent","newItemName","checklistSelection","SelectionModel","getLevel","isExpandable","expandable","getChildren","hasChild","_","_nodeData","hasNoContent","transformer","existingNode","flatNode","set","treeFlattener","MatTreeFlattener","treeControl","FlatTreeControl","dataSource","MatTreeFlatDataSource","subscribe","descendantsAllSelected","getDescendants","every","child","isSelected","descendantsPartiallySelected","some","todoItemSelectionToggle","_a","_b","toggle","descendants","select","apply","__spread","deselect","checkAllParentsSelection","todoLeafItemSelectionToggle","getParentNode","checkRootNodeSelection","nodeSelected","descAllSelected","currentLevel","i","dataNodes","indexOf","currentNode","addNewItem","parentNode","expand","saveNode","itemValue","nestedNode","Component","args","selector","template","providers","styles","DynamicFlatNode","isLoading","DynamicDatabase","dataMap","rootLevelNodes","initialData","map","has","DynamicDataSource","_treeControl","connect","collectionViewer","expansionModel","onChange","change","added","removed","handleTreeControl","merge","viewChange","pipe","forEach","toggleNode","slice","reverse","index","setTimeout","nodes","splice","count","length","TreeDynamicExample","database","TREE_DATA$1","TreeFlatOverviewExample","_transformer","LOAD_MORE","LoadmoreNode","hasChildren","loadMoreParentItem","childrenChange","LoadmoreFlatNode","LoadmoreDatabase","batchNumber","nodeMap","_generateNode","loadMore","onlyFirstTime","newChildrenNumber","result","TreeLoadmoreExample","newNode","isLoadMore","loadChildren","TREE_DATA$2","TreeNestedOverviewExample","NestedTreeControl","MatTreeNestedDataSource","EXAMPLES","TreeExamplesModule","NgModule","imports","CommonModule","MatButtonModule","MatCheckboxModule","MatIconModule","MatInputModule","MatProgressBarModule","MatTreeModule","declarations","ɵangular_material_src_material_examples_material_tree_tree_a","ɵangular_material_src_material_examples_material_tree_tree_b","ɵangular_material_src_material_examples_material_tree_tree_c"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/material/button'), require('@angular/material/checkbox'), require('@angular/material/icon'), require('@angular/material/input'), require('@angular/material/progress-bar'), require('@angular/material/tree'), require('tslib'), require('@angular/cdk/collections'), require('@angular/cdk/tree'), require('rxjs'), require('rxjs/operators')) :\n    typeof define === 'function' && define.amd ? define('@angular/material-examples/material/tree', ['exports', '@angular/common', '@angular/core', '@angular/material/button', '@angular/material/checkbox', '@angular/material/icon', '@angular/material/input', '@angular/material/progress-bar', '@angular/material/tree', 'tslib', '@angular/cdk/collections', '@angular/cdk/tree', 'rxjs', 'rxjs/operators'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.materialExamples = global.ng.materialExamples || {}, global.ng.materialExamples.material = global.ng.materialExamples.material || {}, global.ng.materialExamples.material.tree = {}), global.ng.common, global.ng.core, global.ng.material.button, global.ng.material.checkbox, global.ng.material.icon, global.ng.material.input, global.ng.material['progress-bar'], global.ng.material.tree, global.tslib, global.ng.cdk.collections, global.ng.cdk.tree, global.rxjs, global.rxjs.operators));\n}(this, function (exports, common, core, button, checkbox, icon, input, progressBar, tree, tslib_1, collections, tree$1, rxjs, operators) { 'use strict';\n\n    /**\n     * Node for to-do item\n     */\n    var TodoItemNode = /** @class */ (function () {\n        function TodoItemNode() {\n        }\n        return TodoItemNode;\n    }());\n    /** Flat to-do item node with expandable and level information */\n    var TodoItemFlatNode = /** @class */ (function () {\n        function TodoItemFlatNode() {\n        }\n        return TodoItemFlatNode;\n    }());\n    /**\n     * The Json object for to-do list data.\n     */\n    var TREE_DATA = {\n        Groceries: {\n            'Almond Meal flour': null,\n            'Organic eggs': null,\n            'Protein Powder': null,\n            Fruits: {\n                Apple: null,\n                Berries: ['Blueberry', 'Raspberry'],\n                Orange: null\n            }\n        },\n        Reminders: [\n            'Cook dinner',\n            'Read the Material Design spec',\n            'Upgrade Application to Angular'\n        ]\n    };\n    /**\n     * Checklist database, it can build a tree structured Json object.\n     * Each node in Json object represents a to-do item or a category.\n     * If a node is a category, it has children items and new items can be added under the category.\n     */\n    var ChecklistDatabase = /** @class */ (function () {\n        function ChecklistDatabase() {\n            this.dataChange = new rxjs.BehaviorSubject([]);\n            this.initialize();\n        }\n        Object.defineProperty(ChecklistDatabase.prototype, \"data\", {\n            get: function () { return this.dataChange.value; },\n            enumerable: true,\n            configurable: true\n        });\n        ChecklistDatabase.prototype.initialize = function () {\n            // Build the tree nodes from Json object. The result is a list of `TodoItemNode` with nested\n            //     file node as children.\n            var data = this.buildFileTree(TREE_DATA, 0);\n            // Notify the change.\n            this.dataChange.next(data);\n        };\n        /**\n         * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n         * The return value is the list of `TodoItemNode`.\n         */\n        ChecklistDatabase.prototype.buildFileTree = function (obj, level) {\n            var _this = this;\n            return Object.keys(obj).reduce(function (accumulator, key) {\n                var value = obj[key];\n                var node = new TodoItemNode();\n                node.item = key;\n                if (value != null) {\n                    if (typeof value === 'object') {\n                        node.children = _this.buildFileTree(value, level + 1);\n                    }\n                    else {\n                        node.item = value;\n                    }\n                }\n                return accumulator.concat(node);\n            }, []);\n        };\n        /** Add an item to to-do list */\n        ChecklistDatabase.prototype.insertItem = function (parent, name) {\n            if (parent.children) {\n                parent.children.push({ item: name });\n                this.dataChange.next(this.data);\n            }\n        };\n        ChecklistDatabase.prototype.updateItem = function (node, name) {\n            node.item = name;\n            this.dataChange.next(this.data);\n        };\n        ChecklistDatabase.decorators = [\n            { type: core.Injectable }\n        ];\n        /** @nocollapse */\n        ChecklistDatabase.ctorParameters = function () { return []; };\n        return ChecklistDatabase;\n    }());\n    /**\n     * @title Tree with checkboxes\n     */\n    var TreeChecklistExample = /** @class */ (function () {\n        function TreeChecklistExample(_database) {\n            var _this = this;\n            this._database = _database;\n            /** Map from flat node to nested node. This helps us finding the nested node to be modified */\n            this.flatNodeMap = new Map();\n            /** Map from nested node to flattened node. This helps us to keep the same object for selection */\n            this.nestedNodeMap = new Map();\n            /** A selected parent node to be inserted */\n            this.selectedParent = null;\n            /** The new item's name */\n            this.newItemName = '';\n            /** The selection for checklist */\n            this.checklistSelection = new collections.SelectionModel(true /* multiple */);\n            this.getLevel = function (node) { return node.level; };\n            this.isExpandable = function (node) { return node.expandable; };\n            this.getChildren = function (node) { return node.children; };\n            this.hasChild = function (_, _nodeData) { return _nodeData.expandable; };\n            this.hasNoContent = function (_, _nodeData) { return _nodeData.item === ''; };\n            /**\n             * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\n             */\n            this.transformer = function (node, level) {\n                var existingNode = _this.nestedNodeMap.get(node);\n                var flatNode = existingNode && existingNode.item === node.item\n                    ? existingNode\n                    : new TodoItemFlatNode();\n                flatNode.item = node.item;\n                flatNode.level = level;\n                flatNode.expandable = !!node.children;\n                _this.flatNodeMap.set(flatNode, node);\n                _this.nestedNodeMap.set(node, flatNode);\n                return flatNode;\n            };\n            this.treeFlattener = new tree.MatTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n            this.treeControl = new tree$1.FlatTreeControl(this.getLevel, this.isExpandable);\n            this.dataSource = new tree.MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n            _database.dataChange.subscribe(function (data) {\n                _this.dataSource.data = data;\n            });\n        }\n        /** Whether all the descendants of the node are selected. */\n        TreeChecklistExample.prototype.descendantsAllSelected = function (node) {\n            var _this = this;\n            var descendants = this.treeControl.getDescendants(node);\n            var descAllSelected = descendants.every(function (child) {\n                return _this.checklistSelection.isSelected(child);\n            });\n            return descAllSelected;\n        };\n        /** Whether part of the descendants are selected */\n        TreeChecklistExample.prototype.descendantsPartiallySelected = function (node) {\n            var _this = this;\n            var descendants = this.treeControl.getDescendants(node);\n            var result = descendants.some(function (child) { return _this.checklistSelection.isSelected(child); });\n            return result && !this.descendantsAllSelected(node);\n        };\n        /** Toggle the to-do item selection. Select/deselect all the descendants node */\n        TreeChecklistExample.prototype.todoItemSelectionToggle = function (node) {\n            var _a, _b;\n            var _this = this;\n            this.checklistSelection.toggle(node);\n            var descendants = this.treeControl.getDescendants(node);\n            this.checklistSelection.isSelected(node)\n                ? (_a = this.checklistSelection).select.apply(_a, tslib_1.__spread(descendants)) : (_b = this.checklistSelection).deselect.apply(_b, tslib_1.__spread(descendants));\n            // Force update for the parent\n            descendants.every(function (child) {\n                return _this.checklistSelection.isSelected(child);\n            });\n            this.checkAllParentsSelection(node);\n        };\n        /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\n        TreeChecklistExample.prototype.todoLeafItemSelectionToggle = function (node) {\n            this.checklistSelection.toggle(node);\n            this.checkAllParentsSelection(node);\n        };\n        /* Checks all the parents when a leaf node is selected/unselected */\n        TreeChecklistExample.prototype.checkAllParentsSelection = function (node) {\n            var parent = this.getParentNode(node);\n            while (parent) {\n                this.checkRootNodeSelection(parent);\n                parent = this.getParentNode(parent);\n            }\n        };\n        /** Check root node checked state and change it accordingly */\n        TreeChecklistExample.prototype.checkRootNodeSelection = function (node) {\n            var _this = this;\n            var nodeSelected = this.checklistSelection.isSelected(node);\n            var descendants = this.treeControl.getDescendants(node);\n            var descAllSelected = descendants.every(function (child) {\n                return _this.checklistSelection.isSelected(child);\n            });\n            if (nodeSelected && !descAllSelected) {\n                this.checklistSelection.deselect(node);\n            }\n            else if (!nodeSelected && descAllSelected) {\n                this.checklistSelection.select(node);\n            }\n        };\n        /* Get the parent node of a node */\n        TreeChecklistExample.prototype.getParentNode = function (node) {\n            var currentLevel = this.getLevel(node);\n            if (currentLevel < 1) {\n                return null;\n            }\n            var startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n            for (var i = startIndex; i >= 0; i--) {\n                var currentNode = this.treeControl.dataNodes[i];\n                if (this.getLevel(currentNode) < currentLevel) {\n                    return currentNode;\n                }\n            }\n            return null;\n        };\n        /** Select the category so we can insert the new item. */\n        TreeChecklistExample.prototype.addNewItem = function (node) {\n            var parentNode = this.flatNodeMap.get(node);\n            this._database.insertItem(parentNode, '');\n            this.treeControl.expand(node);\n        };\n        /** Save the node to database */\n        TreeChecklistExample.prototype.saveNode = function (node, itemValue) {\n            var nestedNode = this.flatNodeMap.get(node);\n            this._database.updateItem(nestedNode, itemValue);\n        };\n        TreeChecklistExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'tree-checklist-example',\n                        template: \"<mat-tree [dataSource]=\\\"dataSource\\\" [treeControl]=\\\"treeControl\\\">\\n  <mat-tree-node *matTreeNodeDef=\\\"let node\\\" matTreeNodeToggle matTreeNodePadding>\\n    <button mat-icon-button disabled></button>\\n    <mat-checkbox class=\\\"checklist-leaf-node\\\"\\n                  [checked]=\\\"checklistSelection.isSelected(node)\\\"\\n                  (change)=\\\"todoLeafItemSelectionToggle(node)\\\">{{node.item}}</mat-checkbox>\\n  </mat-tree-node>\\n\\n  <mat-tree-node *matTreeNodeDef=\\\"let node; when: hasNoContent\\\" matTreeNodePadding>\\n    <button mat-icon-button disabled></button>\\n    <mat-form-field>\\n      <input matInput #itemValue placeholder=\\\"New item...\\\">\\n    </mat-form-field>\\n    <button mat-button (click)=\\\"saveNode(node, itemValue.value)\\\">Save</button>\\n  </mat-tree-node>\\n\\n  <mat-tree-node *matTreeNodeDef=\\\"let node; when: hasChild\\\" matTreeNodePadding>\\n    <button mat-icon-button matTreeNodeToggle\\n            [attr.aria-label]=\\\"'toggle ' + node.filename\\\">\\n      <mat-icon class=\\\"mat-icon-rtl-mirror\\\">\\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\\n      </mat-icon>\\n    </button>\\n    <mat-checkbox [checked]=\\\"descendantsAllSelected(node)\\\"\\n                  [indeterminate]=\\\"descendantsPartiallySelected(node)\\\"\\n                  (change)=\\\"todoItemSelectionToggle(node)\\\">{{node.item}}</mat-checkbox>\\n    <button mat-icon-button (click)=\\\"addNewItem(node)\\\"><mat-icon>add</mat-icon></button>\\n  </mat-tree-node>\\n</mat-tree>\\n\",\n                        providers: [ChecklistDatabase],\n                        styles: [\"\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        TreeChecklistExample.ctorParameters = function () { return [\n            { type: ChecklistDatabase }\n        ]; };\n        return TreeChecklistExample;\n    }());\n\n    /** Flat node with expandable and level information */\n    var DynamicFlatNode = /** @class */ (function () {\n        function DynamicFlatNode(item, level, expandable, isLoading) {\n            if (level === void 0) { level = 1; }\n            if (expandable === void 0) { expandable = false; }\n            if (isLoading === void 0) { isLoading = false; }\n            this.item = item;\n            this.level = level;\n            this.expandable = expandable;\n            this.isLoading = isLoading;\n        }\n        return DynamicFlatNode;\n    }());\n    /**\n     * Database for dynamic data. When expanding a node in the tree, the data source will need to fetch\n     * the descendants data from the database.\n     */\n    var DynamicDatabase = /** @class */ (function () {\n        function DynamicDatabase() {\n            this.dataMap = new Map([\n                ['Fruits', ['Apple', 'Orange', 'Banana']],\n                ['Vegetables', ['Tomato', 'Potato', 'Onion']],\n                ['Apple', ['Fuji', 'Macintosh']],\n                ['Onion', ['Yellow', 'White', 'Purple']]\n            ]);\n            this.rootLevelNodes = ['Fruits', 'Vegetables'];\n        }\n        /** Initial data from database */\n        DynamicDatabase.prototype.initialData = function () {\n            return this.rootLevelNodes.map(function (name) { return new DynamicFlatNode(name, 0, true); });\n        };\n        DynamicDatabase.prototype.getChildren = function (node) {\n            return this.dataMap.get(node);\n        };\n        DynamicDatabase.prototype.isExpandable = function (node) {\n            return this.dataMap.has(node);\n        };\n        return DynamicDatabase;\n    }());\n    /**\n     * File database, it can build a tree structured Json object from string.\n     * Each node in Json object represents a file or a directory. For a file, it has filename and type.\n     * For a directory, it has filename and children (a list of files or directories).\n     * The input will be a json object string, and the output is a list of `FileNode` with nested\n     * structure.\n     */\n    var DynamicDataSource = /** @class */ (function () {\n        function DynamicDataSource(_treeControl, _database) {\n            this._treeControl = _treeControl;\n            this._database = _database;\n            this.dataChange = new rxjs.BehaviorSubject([]);\n        }\n        Object.defineProperty(DynamicDataSource.prototype, \"data\", {\n            get: function () { return this.dataChange.value; },\n            set: function (value) {\n                this._treeControl.dataNodes = value;\n                this.dataChange.next(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DynamicDataSource.prototype.connect = function (collectionViewer) {\n            var _this = this;\n            this._treeControl.expansionModel.onChange.subscribe(function (change) {\n                if (change.added ||\n                    change.removed) {\n                    _this.handleTreeControl(change);\n                }\n            });\n            return rxjs.merge(collectionViewer.viewChange, this.dataChange).pipe(operators.map(function () { return _this.data; }));\n        };\n        /** Handle expand/collapse behaviors */\n        DynamicDataSource.prototype.handleTreeControl = function (change) {\n            var _this = this;\n            if (change.added) {\n                change.added.forEach(function (node) { return _this.toggleNode(node, true); });\n            }\n            if (change.removed) {\n                change.removed.slice().reverse().forEach(function (node) { return _this.toggleNode(node, false); });\n            }\n        };\n        /**\n         * Toggle the node, remove from display list\n         */\n        DynamicDataSource.prototype.toggleNode = function (node, expand) {\n            var _this = this;\n            var children = this._database.getChildren(node.item);\n            var index = this.data.indexOf(node);\n            if (!children || index < 0) { // If no children, or cannot find the node, no op\n                return;\n            }\n            node.isLoading = true;\n            setTimeout(function () {\n                var _a;\n                if (expand) {\n                    var nodes = children.map(function (name) {\n                        return new DynamicFlatNode(name, node.level + 1, _this._database.isExpandable(name));\n                    });\n                    (_a = _this.data).splice.apply(_a, tslib_1.__spread([index + 1, 0], nodes));\n                }\n                else {\n                    var count = 0;\n                    for (var i = index + 1; i < _this.data.length\n                        && _this.data[i].level > node.level; i++, count++) { }\n                    _this.data.splice(index + 1, count);\n                }\n                // notify the change\n                _this.dataChange.next(_this.data);\n                node.isLoading = false;\n            }, 1000);\n        };\n        DynamicDataSource.decorators = [\n            { type: core.Injectable }\n        ];\n        /** @nocollapse */\n        DynamicDataSource.ctorParameters = function () { return [\n            { type: tree$1.FlatTreeControl },\n            { type: DynamicDatabase }\n        ]; };\n        return DynamicDataSource;\n    }());\n    /**\n     * @title Tree with dynamic data\n     */\n    var TreeDynamicExample = /** @class */ (function () {\n        function TreeDynamicExample(database) {\n            this.getLevel = function (node) { return node.level; };\n            this.isExpandable = function (node) { return node.expandable; };\n            this.hasChild = function (_, _nodeData) { return _nodeData.expandable; };\n            this.treeControl = new tree$1.FlatTreeControl(this.getLevel, this.isExpandable);\n            this.dataSource = new DynamicDataSource(this.treeControl, database);\n            this.dataSource.data = database.initialData();\n        }\n        TreeDynamicExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'tree-dynamic-example',\n                        template: \"<mat-tree [dataSource]=\\\"dataSource\\\" [treeControl]=\\\"treeControl\\\">\\n  <mat-tree-node *matTreeNodeDef=\\\"let node\\\" matTreeNodePadding>\\n    <button mat-icon-button disabled></button>\\n    {{node.item}}\\n  </mat-tree-node>\\n  <mat-tree-node *matTreeNodeDef=\\\"let node; when: hasChild\\\" matTreeNodePadding>\\n    <button mat-icon-button\\n            [attr.aria-label]=\\\"'toggle ' + node.filename\\\" matTreeNodeToggle>\\n      <mat-icon class=\\\"mat-icon-rtl-mirror\\\">\\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\\n      </mat-icon>\\n    </button>\\n    {{node.item}}\\n    <mat-progress-bar *ngIf=\\\"node.isLoading\\\"\\n                      mode=\\\"indeterminate\\\"\\n                      class=\\\"example-tree-progress-bar\\\"></mat-progress-bar>\\n  </mat-tree-node>\\n</mat-tree>\\n\",\n                        providers: [DynamicDatabase],\n                        styles: [\".example-tree-progress-bar {\\n  margin-left: 30px;\\n}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        TreeDynamicExample.ctorParameters = function () { return [\n            { type: DynamicDatabase }\n        ]; };\n        return TreeDynamicExample;\n    }());\n\n    var TREE_DATA$1 = [\n        {\n            name: 'Fruit',\n            children: [\n                { name: 'Apple' },\n                { name: 'Banana' },\n                { name: 'Fruit loops' },\n            ]\n        }, {\n            name: 'Vegetables',\n            children: [\n                {\n                    name: 'Green',\n                    children: [\n                        { name: 'Broccoli' },\n                        { name: 'Brussel sprouts' },\n                    ]\n                }, {\n                    name: 'Orange',\n                    children: [\n                        { name: 'Pumpkins' },\n                        { name: 'Carrots' },\n                    ]\n                },\n            ]\n        },\n    ];\n    /**\n     * @title Tree with flat nodes\n     */\n    var TreeFlatOverviewExample = /** @class */ (function () {\n        function TreeFlatOverviewExample() {\n            this._transformer = function (node, level) {\n                return {\n                    expandable: !!node.children && node.children.length > 0,\n                    name: node.name,\n                    level: level,\n                };\n            };\n            this.treeControl = new tree$1.FlatTreeControl(function (node) { return node.level; }, function (node) { return node.expandable; });\n            this.treeFlattener = new tree.MatTreeFlattener(this._transformer, function (node) { return node.level; }, function (node) { return node.expandable; }, function (node) { return node.children; });\n            this.dataSource = new tree.MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n            this.hasChild = function (_, node) { return node.expandable; };\n            this.dataSource.data = TREE_DATA$1;\n        }\n        TreeFlatOverviewExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'tree-flat-overview-example',\n                        template: \"<mat-tree [dataSource]=\\\"dataSource\\\" [treeControl]=\\\"treeControl\\\">\\n  <!-- This is the tree node template for leaf nodes -->\\n  <mat-tree-node *matTreeNodeDef=\\\"let node\\\" matTreeNodePadding>\\n    <!-- use a disabled button to provide padding for tree leaf -->\\n    <button mat-icon-button disabled></button>\\n    {{node.name}}\\n  </mat-tree-node>\\n  <!-- This is the tree node template for expandable nodes -->\\n  <mat-tree-node *matTreeNodeDef=\\\"let node;when: hasChild\\\" matTreeNodePadding>\\n    <button mat-icon-button matTreeNodeToggle\\n            [attr.aria-label]=\\\"'toggle ' + node.name\\\">\\n      <mat-icon class=\\\"mat-icon-rtl-mirror\\\">\\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\\n      </mat-icon>\\n    </button>\\n    {{node.name}}\\n  </mat-tree-node>\\n</mat-tree>\\n\",\n                        styles: [\"\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        TreeFlatOverviewExample.ctorParameters = function () { return []; };\n        return TreeFlatOverviewExample;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var LOAD_MORE = 'LOAD_MORE';\n    /** Nested node */\n    var LoadmoreNode = /** @class */ (function () {\n        function LoadmoreNode(item, hasChildren, loadMoreParentItem) {\n            if (hasChildren === void 0) { hasChildren = false; }\n            if (loadMoreParentItem === void 0) { loadMoreParentItem = null; }\n            this.item = item;\n            this.hasChildren = hasChildren;\n            this.loadMoreParentItem = loadMoreParentItem;\n            this.childrenChange = new rxjs.BehaviorSubject([]);\n        }\n        Object.defineProperty(LoadmoreNode.prototype, \"children\", {\n            get: function () {\n                return this.childrenChange.value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return LoadmoreNode;\n    }());\n    /** Flat node with expandable and level information */\n    var LoadmoreFlatNode = /** @class */ (function () {\n        function LoadmoreFlatNode(item, level, expandable, loadMoreParentItem) {\n            if (level === void 0) { level = 1; }\n            if (expandable === void 0) { expandable = false; }\n            if (loadMoreParentItem === void 0) { loadMoreParentItem = null; }\n            this.item = item;\n            this.level = level;\n            this.expandable = expandable;\n            this.loadMoreParentItem = loadMoreParentItem;\n        }\n        return LoadmoreFlatNode;\n    }());\n    /**\n     * A database that only load part of the data initially. After user clicks on the `Load more`\n     * button, more data will be loaded.\n     */\n    var LoadmoreDatabase = /** @class */ (function () {\n        function LoadmoreDatabase() {\n            this.batchNumber = 5;\n            this.dataChange = new rxjs.BehaviorSubject([]);\n            this.nodeMap = new Map();\n            /** The data */\n            this.rootLevelNodes = ['Vegetables', 'Fruits'];\n            this.dataMap = new Map([\n                ['Fruits', ['Apple', 'Orange', 'Banana']],\n                ['Vegetables', ['Tomato', 'Potato', 'Onion']],\n                ['Apple', ['Fuji', 'Macintosh']],\n                ['Onion', ['Yellow', 'White', 'Purple', 'Green', 'Shallot', 'Sweet', 'Red', 'Leek']],\n            ]);\n        }\n        LoadmoreDatabase.prototype.initialize = function () {\n            var _this = this;\n            var data = this.rootLevelNodes.map(function (name) { return _this._generateNode(name); });\n            this.dataChange.next(data);\n        };\n        /** Expand a node whose children are not loaded */\n        LoadmoreDatabase.prototype.loadMore = function (item, onlyFirstTime) {\n            var _this = this;\n            if (onlyFirstTime === void 0) { onlyFirstTime = false; }\n            if (!this.nodeMap.has(item) || !this.dataMap.has(item)) {\n                return;\n            }\n            var parent = this.nodeMap.get(item);\n            var children = this.dataMap.get(item);\n            if (onlyFirstTime && parent.children.length > 0) {\n                return;\n            }\n            var newChildrenNumber = parent.children.length + this.batchNumber;\n            var nodes = children.slice(0, newChildrenNumber)\n                .map(function (name) { return _this._generateNode(name); });\n            if (newChildrenNumber < children.length) {\n                // Need a new load more node\n                nodes.push(new LoadmoreNode(LOAD_MORE, false, item));\n            }\n            parent.childrenChange.next(nodes);\n            this.dataChange.next(this.dataChange.value);\n        };\n        LoadmoreDatabase.prototype._generateNode = function (item) {\n            if (this.nodeMap.has(item)) {\n                return this.nodeMap.get(item);\n            }\n            var result = new LoadmoreNode(item, this.dataMap.has(item));\n            this.nodeMap.set(item, result);\n            return result;\n        };\n        LoadmoreDatabase.decorators = [\n            { type: core.Injectable }\n        ];\n        return LoadmoreDatabase;\n    }());\n    /**\n     * @title Tree with partially loaded data\n     */\n    var TreeLoadmoreExample = /** @class */ (function () {\n        function TreeLoadmoreExample(_database) {\n            var _this = this;\n            this._database = _database;\n            this.nodeMap = new Map();\n            this.getChildren = function (node) { return node.childrenChange; };\n            this.transformer = function (node, level) {\n                var existingNode = _this.nodeMap.get(node.item);\n                if (existingNode) {\n                    return existingNode;\n                }\n                var newNode = new LoadmoreFlatNode(node.item, level, node.hasChildren, node.loadMoreParentItem);\n                _this.nodeMap.set(node.item, newNode);\n                return newNode;\n            };\n            this.getLevel = function (node) { return node.level; };\n            this.isExpandable = function (node) { return node.expandable; };\n            this.hasChild = function (_, _nodeData) { return _nodeData.expandable; };\n            this.isLoadMore = function (_, _nodeData) { return _nodeData.item === LOAD_MORE; };\n            this.treeFlattener = new tree.MatTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n            this.treeControl = new tree$1.FlatTreeControl(this.getLevel, this.isExpandable);\n            this.dataSource = new tree.MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n            _database.dataChange.subscribe(function (data) {\n                _this.dataSource.data = data;\n            });\n            _database.initialize();\n        }\n        /** Load more nodes from data source */\n        TreeLoadmoreExample.prototype.loadMore = function (item) {\n            this._database.loadMore(item);\n        };\n        TreeLoadmoreExample.prototype.loadChildren = function (node) {\n            this._database.loadMore(node.item, true);\n        };\n        TreeLoadmoreExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'tree-loadmore-example',\n                        template: \"<mat-tree [dataSource]=\\\"dataSource\\\" [treeControl]=\\\"treeControl\\\">\\n  <!-- Leaf node -->\\n  <mat-tree-node *matTreeNodeDef=\\\"let node\\\" matTreeNodePadding>\\n    <button mat-icon-button disabled></button>\\n    {{node.item}}\\n  </mat-tree-node>\\n\\n  <!-- expandable node -->\\n  <mat-tree-node *matTreeNodeDef=\\\"let node; when: hasChild\\\" matTreeNodePadding>\\n    <button mat-icon-button\\n            [attr.aria-label]=\\\"'toggle ' + node.filename\\\"\\n            (click)=\\\"loadChildren(node)\\\"\\n            matTreeNodeToggle>\\n      <mat-icon class=\\\"mat-icon-rtl-mirror\\\">\\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\\n      </mat-icon>\\n    </button>\\n    {{node.item}}\\n  </mat-tree-node>\\n\\n  <mat-tree-node *matTreeNodeDef=\\\"let node; when: isLoadMore\\\">\\n    <button mat-button (click)=\\\"loadMore(node.loadMoreParentItem)\\\">\\n      Load more...\\n    </button>\\n  </mat-tree-node>\\n</mat-tree>\\n\",\n                        providers: [LoadmoreDatabase],\n                        styles: [\"\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        TreeLoadmoreExample.ctorParameters = function () { return [\n            { type: LoadmoreDatabase }\n        ]; };\n        return TreeLoadmoreExample;\n    }());\n\n    var TREE_DATA$2 = [\n        {\n            name: 'Fruit',\n            children: [\n                { name: 'Apple' },\n                { name: 'Banana' },\n                { name: 'Fruit loops' },\n            ]\n        }, {\n            name: 'Vegetables',\n            children: [\n                {\n                    name: 'Green',\n                    children: [\n                        { name: 'Broccoli' },\n                        { name: 'Brussel sprouts' },\n                    ]\n                }, {\n                    name: 'Orange',\n                    children: [\n                        { name: 'Pumpkins' },\n                        { name: 'Carrots' },\n                    ]\n                },\n            ]\n        },\n    ];\n    /**\n     * @title Tree with nested nodes\n     */\n    var TreeNestedOverviewExample = /** @class */ (function () {\n        function TreeNestedOverviewExample() {\n            this.treeControl = new tree$1.NestedTreeControl(function (node) { return node.children; });\n            this.dataSource = new tree.MatTreeNestedDataSource();\n            this.hasChild = function (_, node) { return !!node.children && node.children.length > 0; };\n            this.dataSource.data = TREE_DATA$2;\n        }\n        TreeNestedOverviewExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'tree-nested-overview-example',\n                        template: \"<mat-tree [dataSource]=\\\"dataSource\\\" [treeControl]=\\\"treeControl\\\" class=\\\"example-tree\\\">\\n  <!-- This is the tree node template for leaf nodes -->\\n  <mat-tree-node *matTreeNodeDef=\\\"let node\\\" matTreeNodeToggle>\\n    <li class=\\\"mat-tree-node\\\">\\n      <!-- use a disabled button to provide padding for tree leaf -->\\n      <button mat-icon-button disabled></button>\\n      {{node.name}}\\n    </li>\\n  </mat-tree-node>\\n  <!-- This is the tree node template for expandable nodes -->\\n  <mat-nested-tree-node *matTreeNodeDef=\\\"let node; when: hasChild\\\">\\n    <li>\\n      <div class=\\\"mat-tree-node\\\">\\n        <button mat-icon-button matTreeNodeToggle\\n                [attr.aria-label]=\\\"'toggle ' + node.name\\\">\\n          <mat-icon class=\\\"mat-icon-rtl-mirror\\\">\\n            {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\\n          </mat-icon>\\n        </button>\\n        {{node.name}}\\n      </div>\\n      <ul [class.example-tree-invisible]=\\\"!treeControl.isExpanded(node)\\\">\\n        <ng-container matTreeNodeOutlet></ng-container>\\n      </ul>\\n    </li>\\n  </mat-nested-tree-node>\\n</mat-tree>\\n\",\n                        styles: [\".example-tree-invisible {\\n  display: none;\\n}\\n\\n.example-tree ul,\\n.example-tree li {\\n  margin-top: 0;\\n  margin-bottom: 0;\\n  list-style-type: none;\\n}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        TreeNestedOverviewExample.ctorParameters = function () { return []; };\n        return TreeNestedOverviewExample;\n    }());\n\n    var EXAMPLES = [\n        TreeChecklistExample,\n        TreeDynamicExample,\n        TreeFlatOverviewExample,\n        TreeLoadmoreExample,\n        TreeNestedOverviewExample,\n    ];\n    var TreeExamplesModule = /** @class */ (function () {\n        function TreeExamplesModule() {\n        }\n        TreeExamplesModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            common.CommonModule,\n                            button.MatButtonModule,\n                            checkbox.MatCheckboxModule,\n                            icon.MatIconModule,\n                            input.MatInputModule,\n                            progressBar.MatProgressBarModule,\n                            tree.MatTreeModule,\n                        ],\n                        declarations: EXAMPLES,\n                        exports: EXAMPLES,\n                    },] }\n        ];\n        return TreeExamplesModule;\n    }());\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.ɵangular_material_src_material_examples_material_tree_tree_a = ChecklistDatabase;\n    exports.ɵangular_material_src_material_examples_material_tree_tree_b = DynamicDatabase;\n    exports.ɵangular_material_src_material_examples_material_tree_tree_c = LoadmoreDatabase;\n    exports.TreeChecklistExample = TreeChecklistExample;\n    exports.TreeDynamicExample = TreeDynamicExample;\n    exports.TreeFlatOverviewExample = TreeFlatOverviewExample;\n    exports.TreeLoadmoreExample = TreeLoadmoreExample;\n    exports.TreeNestedOverviewExample = TreeNestedOverviewExample;\n    exports.TreeExamplesModule = TreeExamplesModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-examples-material-tree.umd.js.map\n"]}