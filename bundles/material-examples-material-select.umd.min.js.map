{"version":3,"sources":["src/material-examples/material-examples-material-select.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","materialExamples","material","select","common","core","forms","checkbox","input","this","SelectCustomTriggerExample","toppings","FormControl","toppingList","decorators","type","Component","args","selector","template","styles","SelectDisabledExample","disableSelect","MyErrorStateMatcher","prototype","isErrorState","control","form","invalid","dirty","touched","submitted","SelectErrorStateMatcherExample","selected","Validators","required","pattern","selectFormControl","nativeSelectFormControl","matcher","SelectFormExample","foods","value","viewValue","cars","SelectHintErrorExample","animalControl","animals","name","sound","SelectMultipleExample","SelectNoRippleExample","SelectOptgroupExample","pokemonControl","pokemonGroups","pokemon","disabled","SelectOverviewExample","SelectPanelClassExample","panelColor","encapsulation","ViewEncapsulation","None","SelectResetExample","states","SelectValueBindingExample","EXAMPLES","SelectExamplesModule","NgModule","imports","CommonModule","FormsModule","MatCheckboxModule","MatInputModule","MatSelectModule","ReactiveFormsModule","declarations","Object","defineProperty"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/forms'), require('@angular/material/checkbox'), require('@angular/material/input'), require('@angular/material/select')) :\n    typeof define === 'function' && define.amd ? define('@angular/material-examples/material/select', ['exports', '@angular/common', '@angular/core', '@angular/forms', '@angular/material/checkbox', '@angular/material/input', '@angular/material/select'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.materialExamples = global.ng.materialExamples || {}, global.ng.materialExamples.material = global.ng.materialExamples.material || {}, global.ng.materialExamples.material.select = {}), global.ng.common, global.ng.core, global.ng.forms, global.ng.material.checkbox, global.ng.material.input, global.ng.material.select));\n}(this, function (exports, common, core, forms, checkbox, input, select) { 'use strict';\n\n    /** @title Select with custom trigger text */\n    var SelectCustomTriggerExample = /** @class */ (function () {\n        function SelectCustomTriggerExample() {\n            this.toppings = new forms.FormControl();\n            this.toppingList = ['Extra cheese', 'Mushroom', 'Onion', 'Pepperoni', 'Sausage', 'Tomato'];\n        }\n        SelectCustomTriggerExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'select-custom-trigger-example',\n                        template: \"<mat-form-field>\\n  <mat-select placeholder=\\\"Toppings\\\" [formControl]=\\\"toppings\\\" multiple>\\n    <mat-select-trigger>\\n      {{toppings.value ? toppings.value[0] : ''}}\\n      <span *ngIf=\\\"toppings.value?.length > 1\\\" class=\\\"example-additional-selection\\\">\\n        (+{{toppings.value.length - 1}} {{toppings.value?.length === 2 ? 'other' : 'others'}})\\n      </span>\\n    </mat-select-trigger>\\n    <mat-option *ngFor=\\\"let topping of toppingList\\\" [value]=\\\"topping\\\">{{topping}}</mat-option>\\n  </mat-select>\\n</mat-form-field>\\n\",\n                        styles: [\".example-additional-selection {\\n  opacity: 0.75;\\n  font-size: 0.75em;\\n}\\n\"]\n                    }] }\n        ];\n        return SelectCustomTriggerExample;\n    }());\n\n    /** @title Disabled select */\n    var SelectDisabledExample = /** @class */ (function () {\n        function SelectDisabledExample() {\n            this.disableSelect = new forms.FormControl(false);\n        }\n        SelectDisabledExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'select-disabled-example',\n                        template: \"<p>\\n  <mat-checkbox [formControl]=\\\"disableSelect\\\">Disable select</mat-checkbox>\\n</p>\\n\\n<h4>mat-select</h4>\\n<mat-form-field>\\n  <mat-label>Choose an option</mat-label>\\n  <mat-select [disabled]=\\\"disableSelect.value\\\">\\n    <mat-option value=\\\"option1\\\">Option 1</mat-option>\\n    <mat-option value=\\\"option2\\\" disabled>Option 2 (disabled)</mat-option>\\n    <mat-option value=\\\"option3\\\">Option 3</mat-option>\\n  </mat-select>\\n</mat-form-field>\\n\\n<h4>native html select</h4>\\n<mat-form-field>\\n  <mat-label>Choose an option</mat-label>\\n  <select matNativeControl [disabled]=\\\"disableSelect.value\\\">\\n    <option value=\\\"\\\" selected></option>\\n    <option value=\\\"volvo\\\">Volvo</option>\\n    <option value=\\\"saab\\\" disabled>Saab</option>\\n    <option value=\\\"mercedes\\\">Mercedes</option>\\n    <option value=\\\"audi\\\">Audi</option>\\n  </select>\\n</mat-form-field>\\n\\n\",\n                        styles: [\"/** No CSS for this example */\\n\"]\n                    }] }\n        ];\n        return SelectDisabledExample;\n    }());\n\n    /** Error when invalid control is dirty, touched, or submitted. */\n    var MyErrorStateMatcher = /** @class */ (function () {\n        function MyErrorStateMatcher() {\n        }\n        MyErrorStateMatcher.prototype.isErrorState = function (control, form) {\n            var isSubmitted = form && form.submitted;\n            return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n        };\n        return MyErrorStateMatcher;\n    }());\n    /** @title Select with a custom ErrorStateMatcher */\n    var SelectErrorStateMatcherExample = /** @class */ (function () {\n        function SelectErrorStateMatcherExample() {\n            this.selected = new forms.FormControl('valid', [\n                forms.Validators.required,\n                forms.Validators.pattern('valid'),\n            ]);\n            this.selectFormControl = new forms.FormControl('valid', [\n                forms.Validators.required,\n                forms.Validators.pattern('valid'),\n            ]);\n            this.nativeSelectFormControl = new forms.FormControl('valid', [\n                forms.Validators.required,\n                forms.Validators.pattern('valid'),\n            ]);\n            this.matcher = new MyErrorStateMatcher();\n        }\n        SelectErrorStateMatcherExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'select-error-state-matcher-example',\n                        template: \"<h4>mat-select</h4>\\n<mat-form-field>\\n  <mat-label>Choose one</mat-label>\\n  <mat-select [formControl]=\\\"selected\\\" [errorStateMatcher]=\\\"matcher\\\">\\n    <mat-option>Clear</mat-option>\\n    <mat-option value=\\\"valid\\\">Valid option</mat-option>\\n    <mat-option value=\\\"invalid\\\">Invalid option</mat-option>\\n  </mat-select>\\n  <mat-hint>Errors appear instantly!</mat-hint>\\n  <mat-error *ngIf=\\\"selected.hasError('required')\\\">You must make a selection</mat-error>\\n  <mat-error *ngIf=\\\"selected.hasError('pattern') && !selected.hasError('required')\\\">\\n    Your selection is invalid\\n  </mat-error>\\n</mat-form-field>\\n\\n<h4>native html select</h4>\\n<mat-form-field class=\\\"demo-full-width\\\">\\n  <mat-label>Choose one</mat-label>\\n  <select matNativeControl [formControl]=\\\"nativeSelectFormControl\\\" [errorStateMatcher]=\\\"matcher\\\">\\n    <option value=\\\"\\\"></option>\\n    <option value=\\\"valid\\\" selected>Valid option</option>\\n    <option value=\\\"invalid\\\">Invalid option</option>\\n  </select>\\n  <mat-error *ngIf=\\\"nativeSelectFormControl.hasError('required')\\\">You must make a selection</mat-error>\\n  <mat-error *ngIf=\\\"nativeSelectFormControl.hasError('pattern') && !nativeSelectFormControl.hasError('required')\\\">\\n    Your selection is invalid\\n  </mat-error>\\n</mat-form-field>\\n\",\n                        styles: [\"/** No CSS for this example */\\n\"]\n                    }] }\n        ];\n        return SelectErrorStateMatcherExample;\n    }());\n\n    /**\n     * @title Select in a form\n     */\n    var SelectFormExample = /** @class */ (function () {\n        function SelectFormExample() {\n            this.foods = [\n                { value: 'steak-0', viewValue: 'Steak' },\n                { value: 'pizza-1', viewValue: 'Pizza' },\n                { value: 'tacos-2', viewValue: 'Tacos' }\n            ];\n            this.cars = [\n                { value: 'volvo', viewValue: 'Volvo' },\n                { value: 'saab', viewValue: 'Saab' },\n                { value: 'mercedes', viewValue: 'Mercedes' }\n            ];\n        }\n        SelectFormExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'select-form-example',\n                        template: \"<form>\\n  <h4>mat-select</h4>\\n  <mat-form-field>\\n    <mat-label>Favorite food</mat-label>\\n    <mat-select [(ngModel)]=\\\"selectedValue\\\" name=\\\"food\\\">\\n      <mat-option *ngFor=\\\"let food of foods\\\" [value]=\\\"food.value\\\">\\n        {{food.viewValue}}\\n      </mat-option>\\n    </mat-select>\\n  </mat-form-field>\\n  <p> Selected food: {{selectedValue}} </p>\\n  <h4>native html select</h4>\\n  <mat-form-field>\\n    <mat-label>Favorite car</mat-label>\\n    <select matNativeControl [(ngModel)]=\\\"selectedCar\\\" name=\\\"car\\\">\\n      <option value=\\\"\\\" selected></option>\\n      <option *ngFor=\\\"let car of cars\\\" [value]=\\\"car.value\\\">\\n        {{car.viewValue}}\\n      </option>\\n    </select>\\n  </mat-form-field>\\n  <p> Selected car: {{selectedCar}} </p>\\n</form>\\n\",\n                        styles: [\"/** No CSS for this example */\\n\"]\n                    }] }\n        ];\n        return SelectFormExample;\n    }());\n\n    /** @title Select with form field features */\n    var SelectHintErrorExample = /** @class */ (function () {\n        function SelectHintErrorExample() {\n            this.animalControl = new forms.FormControl('', [forms.Validators.required]);\n            this.selectFormControl = new forms.FormControl('', forms.Validators.required);\n            this.animals = [\n                { name: 'Dog', sound: 'Woof!' },\n                { name: 'Cat', sound: 'Meow!' },\n                { name: 'Cow', sound: 'Moo!' },\n                { name: 'Fox', sound: 'Wa-pa-pa-pa-pa-pa-pow!' },\n            ];\n        }\n        SelectHintErrorExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'select-hint-error-example',\n                        template: \"<h4>mat select</h4>\\n<mat-form-field>\\n  <mat-label>Favorite animal</mat-label>\\n  <mat-select [formControl]=\\\"animalControl\\\" required>\\n    <mat-option>--</mat-option>\\n    <mat-option *ngFor=\\\"let animal of animals\\\" [value]=\\\"animal\\\">\\n      {{animal.name}}\\n    </mat-option>\\n  </mat-select>\\n  <mat-error *ngIf=\\\"animalControl.hasError('required')\\\">Please choose an animal</mat-error>\\n  <mat-hint>{{animalControl.value?.sound}}</mat-hint>\\n</mat-form-field>\\n\\n<h4>native html select</h4>\\n<mat-form-field>\\n  <mat-label>Select your car (required)</mat-label>\\n  <select matNativeControl required [formControl]=\\\"selectFormControl\\\">\\n    <option label=\\\"--select something --\\\"></option>\\n    <option value=\\\"saab\\\">Saab</option>\\n    <option value=\\\"mercedes\\\">Mercedes</option>\\n    <option value=\\\"audi\\\">Audi</option>\\n  </select>\\n  <mat-error *ngIf=\\\"selectFormControl.hasError('required')\\\">\\n    This field is required\\n  </mat-error>\\n  <mat-hint>You can pick up your favorite car here</mat-hint>\\n</mat-form-field>\\n\\n\",\n                        styles: [\"/** No CSS for this example */\\n\"]\n                    }] }\n        ];\n        return SelectHintErrorExample;\n    }());\n\n    /** @title Select with multiple selection */\n    var SelectMultipleExample = /** @class */ (function () {\n        function SelectMultipleExample() {\n            this.toppings = new forms.FormControl();\n            this.toppingList = ['Extra cheese', 'Mushroom', 'Onion', 'Pepperoni', 'Sausage', 'Tomato'];\n        }\n        SelectMultipleExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'select-multiple-example',\n                        template: \"<mat-form-field>\\n  <mat-label>Toppings</mat-label>\\n  <mat-select [formControl]=\\\"toppings\\\" multiple>\\n    <mat-option *ngFor=\\\"let topping of toppingList\\\" [value]=\\\"topping\\\">{{topping}}</mat-option>\\n  </mat-select>\\n</mat-form-field>\\n\",\n                        styles: [\"/** No CSS for this example */\\n\"]\n                    }] }\n        ];\n        return SelectMultipleExample;\n    }());\n\n    /** @title Select with no option ripple */\n    var SelectNoRippleExample = /** @class */ (function () {\n        function SelectNoRippleExample() {\n        }\n        SelectNoRippleExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'select-no-ripple-example',\n                        template: \"<mat-form-field>\\n  <mat-label>Select an option</mat-label>\\n  <mat-select disableRipple>\\n    <mat-option value=\\\"1\\\">Option 1</mat-option>\\n    <mat-option value=\\\"2\\\">Option 2</mat-option>\\n    <mat-option value=\\\"3\\\">Option 3</mat-option>\\n  </mat-select>\\n</mat-form-field>\\n\",\n                        styles: [\"/** No CSS for this example */\\n\"]\n                    }] }\n        ];\n        return SelectNoRippleExample;\n    }());\n\n    /** @title Select with option groups */\n    var SelectOptgroupExample = /** @class */ (function () {\n        function SelectOptgroupExample() {\n            this.pokemonControl = new forms.FormControl();\n            this.pokemonGroups = [\n                {\n                    name: 'Grass',\n                    pokemon: [\n                        { value: 'bulbasaur-0', viewValue: 'Bulbasaur' },\n                        { value: 'oddish-1', viewValue: 'Oddish' },\n                        { value: 'bellsprout-2', viewValue: 'Bellsprout' }\n                    ]\n                },\n                {\n                    name: 'Water',\n                    pokemon: [\n                        { value: 'squirtle-3', viewValue: 'Squirtle' },\n                        { value: 'psyduck-4', viewValue: 'Psyduck' },\n                        { value: 'horsea-5', viewValue: 'Horsea' }\n                    ]\n                },\n                {\n                    name: 'Fire',\n                    disabled: true,\n                    pokemon: [\n                        { value: 'charmander-6', viewValue: 'Charmander' },\n                        { value: 'vulpix-7', viewValue: 'Vulpix' },\n                        { value: 'flareon-8', viewValue: 'Flareon' }\n                    ]\n                },\n                {\n                    name: 'Psychic',\n                    pokemon: [\n                        { value: 'mew-9', viewValue: 'Mew' },\n                        { value: 'mewtwo-10', viewValue: 'Mewtwo' },\n                    ]\n                }\n            ];\n        }\n        SelectOptgroupExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'select-optgroup-example',\n                        template: \"<h4>mat-select</h4>\\n<mat-form-field>\\n  <mat-label>Pokemon</mat-label>\\n  <mat-select [formControl]=\\\"pokemonControl\\\">\\n    <mat-option>-- None --</mat-option>\\n    <mat-optgroup *ngFor=\\\"let group of pokemonGroups\\\" [label]=\\\"group.name\\\"\\n                  [disabled]=\\\"group.disabled\\\">\\n      <mat-option *ngFor=\\\"let pokemon of group.pokemon\\\" [value]=\\\"pokemon.value\\\">\\n        {{pokemon.viewValue}}\\n      </mat-option>\\n    </mat-optgroup>\\n  </mat-select>\\n</mat-form-field>\\n\\n<h4>native html select</h4>\\n<mat-form-field>\\n  <mat-label>Cars</mat-label>\\n  <select matNativeControl>\\n    <optgroup label=\\\"Swedish Cars\\\">\\n      <option value=\\\"volvo\\\">volvo</option>\\n      <option value=\\\"saab\\\">Saab</option>\\n    </optgroup>\\n    <optgroup label=\\\"German Cars\\\">\\n      <option value=\\\"mercedes\\\">Mercedes</option>\\n      <option value=\\\"audi\\\">Audi</option>\\n    </optgroup>\\n  </select>\\n</mat-form-field>\\n\",\n                        styles: [\"/** No CSS for this example */\\n\"]\n                    }] }\n        ];\n        return SelectOptgroupExample;\n    }());\n\n    /**\n     * @title Basic select\n     */\n    var SelectOverviewExample = /** @class */ (function () {\n        function SelectOverviewExample() {\n            this.foods = [\n                { value: 'steak-0', viewValue: 'Steak' },\n                { value: 'pizza-1', viewValue: 'Pizza' },\n                { value: 'tacos-2', viewValue: 'Tacos' }\n            ];\n        }\n        SelectOverviewExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'select-overview-example',\n                        template: \"<h4>Basic mat-select</h4>\\n<mat-form-field>\\n  <mat-label>Favorite food</mat-label>\\n  <mat-select>\\n    <mat-option *ngFor=\\\"let food of foods\\\" [value]=\\\"food.value\\\">\\n      {{food.viewValue}}\\n    </mat-option>\\n  </mat-select>\\n</mat-form-field>\\n\\n<h4>Basic native select</h4>\\n<mat-form-field>\\n  <mat-label>Cars</mat-label>\\n  <select matNativeControl required>\\n    <option value=\\\"volvo\\\">Volvo</option>\\n    <option value=\\\"saab\\\">Saab</option>\\n    <option value=\\\"mercedes\\\">Mercedes</option>\\n    <option value=\\\"audi\\\">Audi</option>\\n  </select>\\n</mat-form-field>\\n\",\n                        styles: [\"/** No CSS for this example */\\n\"]\n                    }] }\n        ];\n        return SelectOverviewExample;\n    }());\n\n    /**\n     * @title Select with custom panel styling\n     */\n    var SelectPanelClassExample = /** @class */ (function () {\n        function SelectPanelClassExample() {\n            this.panelColor = new forms.FormControl('red');\n        }\n        SelectPanelClassExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'select-panel-class-example',\n                        template: \"<mat-form-field>\\n  <mat-label>Panel color</mat-label>\\n  <mat-select [formControl]=\\\"panelColor\\\"\\n              panelClass=\\\"example-panel-{{panelColor.value}}\\\">\\n    <mat-option value=\\\"red\\\">Red</mat-option>\\n    <mat-option value=\\\"green\\\">Green</mat-option>\\n    <mat-option value=\\\"blue\\\">Blue</mat-option>\\n  </mat-select>\\n</mat-form-field>\\n\",\n                        // Encapsulation has to be disabled in order for the\n                        // component style to apply to the select panel.\n                        encapsulation: core.ViewEncapsulation.None,\n                        styles: [\".example-panel-red.mat-select-panel {\\n  background: rgba(255, 0, 0, 0.5);\\n}\\n\\n.example-panel-green.mat-select-panel {\\n  background: rgba(0, 255, 0, 0.5);\\n}\\n\\n.example-panel-blue.mat-select-panel {\\n  background: rgba(0, 0, 255, 0.5);\\n}\\n\"]\n                    }] }\n        ];\n        return SelectPanelClassExample;\n    }());\n\n    /** @title Select with reset option */\n    var SelectResetExample = /** @class */ (function () {\n        function SelectResetExample() {\n            this.states = [\n                'Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware',\n                'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky',\n                'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi',\n                'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico',\n                'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania',\n                'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont',\n                'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'\n            ];\n        }\n        SelectResetExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'select-reset-example',\n                        template: \"<h4>mat-select</h4>\\n<mat-form-field>\\n  <mat-label>State</mat-label>\\n  <mat-select>\\n    <mat-option>None</mat-option>\\n    <mat-option *ngFor=\\\"let state of states\\\" [value]=\\\"state\\\">{{state}}</mat-option>\\n  </mat-select>\\n</mat-form-field>\\n\\n<h4>native html select</h4>\\n<mat-form-field>\\n  <mat-label>Select your car</mat-label>\\n  <select matNativeControl id=\\\"mySelectId\\\">\\n    <option value=\\\"\\\" disabled selected></option>\\n    <option value=\\\"volvo\\\">Volvo</option>\\n    <option value=\\\"saab\\\">Saab</option>\\n    <option value=\\\"mercedes\\\">Mercedes</option>\\n    <option value=\\\"audi\\\">Audi</option>\\n  </select>\\n</mat-form-field>\\n\",\n                        styles: [\"/** No CSS for this example */\\n\"]\n                    }] }\n        ];\n        return SelectResetExample;\n    }());\n\n    /** @title Select with 2-way value binding */\n    var SelectValueBindingExample = /** @class */ (function () {\n        function SelectValueBindingExample() {\n            this.selected = 'option2';\n        }\n        SelectValueBindingExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'select-value-binding-example',\n                        template: \"<mat-form-field>\\n  <mat-label>Select an option</mat-label>\\n  <mat-select [(value)]=\\\"selected\\\">\\n    <mat-option>None</mat-option>\\n    <mat-option value=\\\"option1\\\">Option 1</mat-option>\\n    <mat-option value=\\\"option2\\\">Option 2</mat-option>\\n    <mat-option value=\\\"option3\\\">Option 3</mat-option>\\n  </mat-select>\\n</mat-form-field>\\n\\n<p>You selected: {{selected}}</p>\\n\",\n                        styles: [\"/** No CSS for this example */\\n\"]\n                    }] }\n        ];\n        return SelectValueBindingExample;\n    }());\n\n    var EXAMPLES = [\n        SelectCustomTriggerExample,\n        SelectDisabledExample,\n        SelectErrorStateMatcherExample,\n        SelectFormExample,\n        SelectHintErrorExample,\n        SelectMultipleExample,\n        SelectNoRippleExample,\n        SelectOptgroupExample,\n        SelectOverviewExample,\n        SelectPanelClassExample,\n        SelectResetExample,\n        SelectValueBindingExample,\n    ];\n    var SelectExamplesModule = /** @class */ (function () {\n        function SelectExamplesModule() {\n        }\n        SelectExamplesModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            common.CommonModule,\n                            forms.FormsModule,\n                            checkbox.MatCheckboxModule,\n                            input.MatInputModule,\n                            select.MatSelectModule,\n                            forms.ReactiveFormsModule,\n                        ],\n                        declarations: EXAMPLES,\n                        exports: EXAMPLES,\n                    },] }\n        ];\n        return SelectExamplesModule;\n    }());\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.SelectCustomTriggerExample = SelectCustomTriggerExample;\n    exports.SelectDisabledExample = SelectDisabledExample;\n    exports.SelectErrorStateMatcherExample = SelectErrorStateMatcherExample;\n    exports.SelectFormExample = SelectFormExample;\n    exports.SelectHintErrorExample = SelectHintErrorExample;\n    exports.SelectMultipleExample = SelectMultipleExample;\n    exports.SelectNoRippleExample = SelectNoRippleExample;\n    exports.SelectOptgroupExample = SelectOptgroupExample;\n    exports.SelectOverviewExample = SelectOverviewExample;\n    exports.SelectPanelClassExample = SelectPanelClassExample;\n    exports.SelectResetExample = SelectResetExample;\n    exports.SelectValueBindingExample = SelectValueBindingExample;\n    exports.SelectExamplesModule = SelectExamplesModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-examples-material-select.umd.js.map\n"]}