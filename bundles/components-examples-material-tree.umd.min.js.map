{"version":3,"sources":["src/components-examples/components-examples-material-tree.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","componentsExamples","material","tree","common","core","button","checkbox","icon","input","progressBar","tslib","cdk","collections","rxjs","formField","operators","this","i5","i0","i2","i3","i3$1","i5$1","i6","i1","i1$1","i4","TreeChecklistExample_mat_tree_node_1_Template","rf","ctx","_r5","ɵɵgetCurrentView","ɵɵelementStart","ɵɵelement","ɵɵlistener","TreeChecklistExample_mat_tree_node_1_Template_mat_checkbox_change_2_listener","$event","ɵɵrestoreView","node_r3","$implicit","ɵɵnextContext","todoLeafItemSelectionToggle","ɵɵtext","ɵɵelementEnd","ctx_r0","ɵɵadvance","ɵɵproperty","checklistSelection","isSelected","ɵɵtextInterpolate","item","_c0","TreeChecklistExample_mat_tree_node_2_Template","_r9","TreeChecklistExample_mat_tree_node_2_Template_button_click_5_listener","node_r6","_r7","ɵɵreference","saveNode","value","TreeChecklistExample_mat_tree_node_3_Template","_r12","TreeChecklistExample_mat_tree_node_3_Template_mat_checkbox_change_4_listener","node_r10","todoItemSelectionToggle","TreeChecklistExample_mat_tree_node_3_Template_button_click_6_listener","addNewItem","ctx_r2","ɵɵattribute","filename","ɵɵtextInterpolate1","treeControl","isExpanded","descendantsAllSelected","descendantsPartiallySelected","TodoItemNode","TodoItemFlatNode","TREE_DATA","Groceries","Almond Meal flour","Organic eggs","Protein Powder","Fruits","Apple","Berries","Orange","Reminders","ChecklistDatabase","dataChange","BehaviorSubject","initialize","Object","defineProperty","prototype","get","enumerable","configurable","data","buildFileTree","next","obj","level","_this","keys","reduce","accumulator","key","node","children","concat","insertItem","parent","name","push","updateItem","decorators","type","Injectable","ctorParameters","ɵfac","ChecklistDatabase_Factory","t","ɵprov","ɵɵdefineInjectable","token","providedIn","TreeChecklistExample","_database","flatNodeMap","Map","nestedNodeMap","selectedParent","newItemName","SelectionModel","getLevel","isExpandable","expandable","getChildren","hasChild","_","_nodeData","hasNoContent","transformer","existingNode","flatNode","set","treeFlattener","MatTreeFlattener","FlatTreeControl","dataSource","MatTreeFlatDataSource","subscribe","getDescendants","every","child","some","_a","_b","toggle","descendants","select","apply","__spread","deselect","checkAllParentsSelection","getParentNode","checkRootNodeSelection","nodeSelected","descAllSelected","currentLevel","i","dataNodes","indexOf","currentNode","parentNode","expand","itemValue","nestedNode","Component","args","selector","templateUrl","styleUrls","providers","TreeChecklistExample_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","selectors","features","ɵɵProvidersFeature","decls","vars","consts","template","TreeChecklistExample_Template","ɵɵtemplate","directives","MatTree","MatTreeNodeDef","MatTreeNode","MatTreeNodeToggle","MatTreeNodePadding","MatButton","MatCheckbox","MatFormField","MatInput","MatIcon","styles","TreeDynamicExample_mat_tree_node_1_Template","node_r16","TreeDynamicExample_mat_tree_node_2_mat_progress_bar_5_Template","TreeDynamicExample_mat_tree_node_2_Template","node_r17","ctx_r15","isLoading","DynamicFlatNode","DynamicDatabase","dataMap","rootLevelNodes","initialData","map","has","DynamicDataSource","_treeControl","connect","collectionViewer","expansionModel","changed","change","added","removed","handleTreeControl","merge","viewChange","pipe","disconnect","forEach","toggleNode","slice","reverse","index","setTimeout","nodes","splice","count","length","DynamicDataSource_Factory","ɵɵinject","TreeDynamicExample","database","TreeDynamicExample_Factory","TreeDynamicExample_Template","NgIf","MatProgressBar","TreeFlatOverviewExample_mat_tree_node_1_Template","node_r21","TreeFlatOverviewExample_mat_tree_node_2_Template","node_r22","ctx_r20","TREE_DATA$1","TreeFlatOverviewExample","_transformer","TreeFlatOverviewExample_Factory","TreeFlatOverviewExample_Template","TreeLoadmoreExample_mat_tree_node_1_Template","node_r26","TreeLoadmoreExample_mat_tree_node_2_Template","_r29","TreeLoadmoreExample_mat_tree_node_2_Template_button_click_1_listener","node_r27","loadChildren","ctx_r24","TreeLoadmoreExample_mat_tree_node_3_Template","_r32","TreeLoadmoreExample_mat_tree_node_3_Template_button_click_1_listener","node_r30","loadMore","loadMoreParentItem","LOAD_MORE","LoadmoreNode","hasChildren","childrenChange","LoadmoreFlatNode","LoadmoreDatabase","batchNumber","nodeMap","_generateNode","onlyFirstTime","newChildrenNumber","result","LoadmoreDatabase_Factory","TreeLoadmoreExample","newNode","isLoadMore","TreeLoadmoreExample_Factory","TreeLoadmoreExample_Template","TreeNestedOverviewExample_mat_tree_node_1_Template","node_r35","TreeNestedOverviewExample_mat_nested_tree_node_2_Template","ɵɵelementContainer","node_r36","ctx_r34","ɵɵclassProp","TREE_DATA$2","TreeNestedOverviewExample","NestedTreeControl","MatTreeNestedDataSource","TreeNestedOverviewExample_Factory","TreeNestedOverviewExample_Template","MatNestedTreeNode","MatTreeNodeOutlet","EXAMPLES","TreeExamplesModule","NgModule","imports","CommonModule","MatButtonModule","MatCheckboxModule","MatIconModule","MatInputModule","MatProgressBarModule","MatTreeModule","declarations","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","TreeExamplesModule_Factory"],"mappings":"CAAC,SAAUA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,mBAAoBA,QAAQ,iBAAkBA,QAAQ,4BAA6BA,QAAQ,8BAA+BA,QAAQ,0BAA2BA,QAAQ,2BAA4BA,QAAQ,kCAAmCA,QAAQ,0BAA2BA,QAAQ,SAAUA,QAAQ,4BAA6BA,QAAQ,qBAAsBA,QAAQ,QAASA,QAAQ,gCAAiCA,QAAQ,mBAC5e,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,6CAA8C,CAAC,UAAW,kBAAmB,gBAAiB,2BAA4B,6BAA8B,yBAA0B,0BAA2B,iCAAkC,yBAA0B,QAAS,2BAA4B,oBAAqB,OAAQ,+BAAgC,kBAAmBJ,GACxZA,IAAzBD,EAASA,GAAUO,MAAsBC,GAAKR,EAAOQ,IAAM,GAAIR,EAAOQ,GAAGC,mBAAqBT,EAAOQ,GAAGC,oBAAsB,GAAIT,EAAOQ,GAAGC,mBAAmBC,SAAWV,EAAOQ,GAAGC,mBAAmBC,UAAY,GAAIV,EAAOQ,GAAGC,mBAAmBC,SAASC,KAAO,IAAKX,EAAOQ,GAAGI,OAAQZ,EAAOQ,GAAGK,KAAMb,EAAOQ,GAAGE,SAASI,OAAQd,EAAOQ,GAAGE,SAASK,SAAUf,EAAOQ,GAAGE,SAASM,KAAMhB,EAAOQ,GAAGE,SAASO,MAAOjB,EAAOQ,GAAGE,SAASQ,YAAalB,EAAOQ,GAAGE,SAASC,KAAMX,EAAOmB,MAAOnB,EAAOQ,GAAGY,IAAIC,YAAarB,EAAOQ,GAAGY,IAAIT,KAAMX,EAAOsB,KAAMtB,EAAOQ,GAAGE,SAASa,UAAWvB,EAAOsB,KAAKE,WAHxkB,CAIEC,KAAM,SAAUvB,EAASwB,EAAIC,EAAIC,EAAIC,EAAIC,EAAMC,EAAMC,EAAIC,EAAId,EAAOE,EAAaa,EAAMZ,EAAMa,EAAIX,GAAa,aAE5G,SAASY,EAA8CC,EAAIC,GAAO,GAAS,EAALD,EAAQ,CAC1E,IAAIE,EAAMZ,EAAGa,mBACbb,EAAGc,eAAe,EAAG,gBAAiB,GACtCd,EAAGe,UAAU,EAAG,SAAU,GAC1Bf,EAAGc,eAAe,EAAG,eAAgB,GACrCd,EAAGgB,WAAW,SAAU,SAASC,EAA6EC,GAAUlB,EAAGmB,cAAcP,GAAM,IAAIQ,EAAUT,EAAIU,UAA4C,OAApBrB,EAAGsB,gBAA+BC,4BAA4BH,KACvPpB,EAAGwB,OAAO,GACVxB,EAAGyB,eACHzB,EAAGyB,eACL,GAAS,EAALf,EAAQ,CACV,IAAIU,EAAUT,EAAIU,UACdK,EAAS1B,EAAGsB,gBAChBtB,EAAG2B,UAAU,GACb3B,EAAG4B,WAAW,UAAWF,EAAOG,mBAAmBC,WAAWV,IAC9DpB,EAAG2B,UAAU,GACb3B,EAAG+B,kBAAkBX,EAAQY,OAEjC,IAAIC,EAAM,CAAC,YAAa,IACxB,SAASC,EAA8CxB,EAAIC,GAAO,GAAS,EAALD,EAAQ,CAC1E,IAAIyB,EAAMnC,EAAGa,mBACbb,EAAGc,eAAe,EAAG,gBAAiB,GACtCd,EAAGe,UAAU,EAAG,SAAU,GAC1Bf,EAAGc,eAAe,EAAG,kBACrBd,EAAGe,UAAU,EAAG,QAAS,EAAGkB,GAC5BjC,EAAGyB,eACHzB,EAAGc,eAAe,EAAG,SAAU,GAC/Bd,EAAGgB,WAAW,QAAS,SAASoB,EAAsElB,GAAUlB,EAAGmB,cAAcgB,GAAM,IAAIE,EAAU1B,EAAIU,UAAeiB,EAAMtC,EAAGuC,YAAY,GAAqC,OAApBvC,EAAGsB,gBAA+BkB,SAASH,EAASC,EAAIG,SACtQzC,EAAGwB,OAAO,EAAG,QACbxB,EAAGyB,eACHzB,EAAGyB,gBAEP,SAASiB,EAA8ChC,EAAIC,GAAO,GAAS,EAALD,EAAQ,CAC1E,IAAIiC,EAAO3C,EAAGa,mBACdb,EAAGc,eAAe,EAAG,gBAAiB,GACtCd,EAAGc,eAAe,EAAG,SAAU,GAC/Bd,EAAGc,eAAe,EAAG,WAAY,IACjCd,EAAGwB,OAAO,GACVxB,EAAGyB,eACHzB,EAAGyB,eACHzB,EAAGc,eAAe,EAAG,eAAgB,IACrCd,EAAGgB,WAAW,SAAU,SAAS4B,EAA6E1B,GAAUlB,EAAGmB,cAAcwB,GAAO,IAAIE,EAAWlC,EAAIU,UAA6C,OAApBrB,EAAGsB,gBAAgCwB,wBAAwBD,KACvP7C,EAAGwB,OAAO,GACVxB,EAAGyB,eACHzB,EAAGc,eAAe,EAAG,SAAU,IAC/Bd,EAAGgB,WAAW,QAAS,SAAS+B,EAAsE7B,GAAUlB,EAAGmB,cAAcwB,GAAO,IAAIE,EAAWlC,EAAIU,UAA6C,OAApBrB,EAAGsB,gBAAgC0B,WAAWH,KAClO7C,EAAGc,eAAe,EAAG,YACrBd,EAAGwB,OAAO,EAAG,OACbxB,EAAGyB,eACHzB,EAAGyB,eACHzB,EAAGyB,eACL,GAAS,EAALf,EAAQ,CACV,IAAImC,EAAWlC,EAAIU,UACf4B,EAASjD,EAAGsB,gBAChBtB,EAAG2B,UAAU,GACb3B,EAAGkD,YAAY,aAAc,UAAYL,EAASM,UAClDnD,EAAG2B,UAAU,GACb3B,EAAGoD,mBAAmB,IAAKH,EAAOI,YAAYC,WAAWT,GAAY,cAAgB,gBAAiB,KACtG7C,EAAG2B,UAAU,GACb3B,EAAG4B,WAAW,UAAWqB,EAAOM,uBAAuBV,GAAvD7C,CAAkE,gBAAiBiD,EAAOO,6BAA6BX,IACvH7C,EAAG2B,UAAU,GACb3B,EAAG+B,kBAAkBc,EAASb,OAKlC,IAAIyB,EACA,SAASA,MAKTC,EACA,SAASA,MAOTC,EAAY,CACZC,UAAW,CACPC,oBAAqB,KACrBC,eAAgB,KAChBC,iBAAkB,KAClBC,OAAQ,CACJC,MAAO,KACPC,QAAS,CAAC,YAAa,aACvBC,OAAQ,OAGhBC,UAAW,CACP,cACA,gCACA,mCAQJC,EAAmC,WACnC,SAASA,IACLvE,KAAKwE,WAAa,IAAI3E,EAAK4E,gBAAgB,IAC3CzE,KAAK0E,aAqDT,OAnDAC,OAAOC,eAAeL,EAAkBM,UAAW,OAAQ,CACvDC,IAAK,WAAc,OAAO9E,KAAKwE,WAAW7B,OAC1CoC,YAAY,EACZC,cAAc,IAElBT,EAAkBM,UAAUH,WAAa,WAGrC,IAAIO,EAAOjF,KAAKkF,cAAcrB,EAAW,GAEzC7D,KAAKwE,WAAWW,KAAKF,IAMzBV,EAAkBM,UAAUK,cAAgB,SAAUE,EAAKC,GACvD,IAAIC,EAAQtF,KACZ,OAAO2E,OAAOY,KAAKH,GAAKI,OAAO,SAAUC,EAAaC,GAClD,IAAI/C,EAAQyC,EAAIM,GACZC,EAAO,IAAIhC,EAUf,OATAgC,EAAKzD,KAAOwD,EACC,MAAT/C,IACqB,iBAAVA,EACPgD,EAAKC,SAAWN,EAAMJ,cAAcvC,EAAO0C,EAAQ,GAGnDM,EAAKzD,KAAOS,GAGb8C,EAAYI,OAAOF,IAC3B,KAGPpB,EAAkBM,UAAUiB,WAAa,SAAUC,EAAQC,GACnDD,EAAOH,WACPG,EAAOH,SAASK,KAAK,CAAE/D,KAAM8D,IAC7BhG,KAAKwE,WAAWW,KAAKnF,KAAKiF,QAGlCV,EAAkBM,UAAUqB,WAAa,SAAUP,EAAMK,GACrDL,EAAKzD,KAAO8D,EACZhG,KAAKwE,WAAWW,KAAKnF,KAAKiF,OAE9BV,EAAkB4B,WAAa,CAC3B,CAAEC,KAAMlG,EAAGmG,aAGf9B,EAAkB+B,eAAiB,WAAc,MAAO,IACxD/B,EAAkBgC,KAAO,SAASC,EAA0BC,GAAK,OAAO,IAAKA,GAAKlC,IAClFA,EAAkBmC,MAAQxG,EAAGyG,mBAAmB,CAAEC,MAAOrC,EAAmB/F,QAAS,SAAUiI,GAAK,OAAOlC,EAAkBgC,KAAKE,IAAOI,WAAY,OAC9ItC,EAxD2B,GAgElCuC,EAAsC,WACtC,SAASA,EAAqBC,GAC1B,IAAIzB,EAAQtF,KACZA,KAAK+G,UAAYA,EAEjB/G,KAAKgH,YAAc,IAAIC,IAEvBjH,KAAKkH,cAAgB,IAAID,IAEzBjH,KAAKmH,eAAiB,KAEtBnH,KAAKoH,YAAc,GAEnBpH,KAAK+B,mBAAqB,IAAInC,EAAYyH,gBAAe,GACzDrH,KAAKsH,SAAW,SAAU3B,GAAQ,OAAOA,EAAKN,OAC9CrF,KAAKuH,aAAe,SAAU5B,GAAQ,OAAOA,EAAK6B,YAClDxH,KAAKyH,YAAc,SAAU9B,GAAQ,OAAOA,EAAKC,UACjD5F,KAAK0H,SAAW,SAAUC,EAAGC,GAAa,OAAOA,EAAUJ,YAC3DxH,KAAK6H,aAAe,SAAUF,EAAGC,GAAa,MAA0B,KAAnBA,EAAU1F,MAI/DlC,KAAK8H,YAAc,SAAUnC,EAAMN,GAC/B,IAAI0C,EAAezC,EAAM4B,cAAcpC,IAAIa,GACvCqC,EAAWD,GAAgBA,EAAa7F,OAASyD,EAAKzD,KACpD6F,EACA,IAAInE,EAMV,OALAoE,EAAS9F,KAAOyD,EAAKzD,KACrB8F,EAAS3C,MAAQA,EACjB2C,EAASR,aAAe7B,EAAKC,SAC7BN,EAAM0B,YAAYiB,IAAID,EAAUrC,GAChCL,EAAM4B,cAAce,IAAItC,EAAMqC,GACvBA,GAEXhI,KAAKkI,cAAgB,IAAI1H,EAAG2H,iBAAiBnI,KAAK8H,YAAa9H,KAAKsH,SAAUtH,KAAKuH,aAAcvH,KAAKyH,aACtGzH,KAAKuD,YAAc,IAAI9C,EAAK2H,gBAAgBpI,KAAKsH,SAAUtH,KAAKuH,cAChEvH,KAAKqI,WAAa,IAAI7H,EAAG8H,sBAAsBtI,KAAKuD,YAAavD,KAAKkI,eACtEnB,EAAUvC,WAAW+D,UAAU,SAAUtD,GACrCK,EAAM+C,WAAWpD,KAAOA,IAiHhC,OA7GA6B,EAAqBjC,UAAUpB,uBAAyB,SAAUkC,GAC9D,IAAIL,EAAQtF,KAKZ,OAJkBA,KAAKuD,YAAYiF,eAAe7C,GAChB8C,MAAM,SAAUC,GAC9C,OAAOpD,EAAMvD,mBAAmBC,WAAW0G,MAKnD5B,EAAqBjC,UAAUnB,6BAA+B,SAAUiC,GACpE,IAAIL,EAAQtF,KAGZ,OAFkBA,KAAKuD,YAAYiF,eAAe7C,GACzBgD,KAAK,SAAUD,GAAS,OAAOpD,EAAMvD,mBAAmBC,WAAW0G,OAC1E1I,KAAKyD,uBAAuBkC,IAGlDmB,EAAqBjC,UAAU7B,wBAA0B,SAAU2C,GAC/D,IAAIiD,EAAIC,EACJvD,EAAQtF,KACZA,KAAK+B,mBAAmB+G,OAAOnD,GAC/B,IAAIoD,EAAc/I,KAAKuD,YAAYiF,eAAe7C,GAClD3F,KAAK+B,mBAAmBC,WAAW2D,IAC5BiD,EAAK5I,KAAK+B,oBAAoBiH,OAAOC,MAAML,EAAIlJ,EAAMwJ,SAASH,KAAiBF,EAAK7I,KAAK+B,oBAAoBoH,SAASF,MAAMJ,EAAInJ,EAAMwJ,SAASH,IAEtJA,EAAYN,MAAM,SAAUC,GACxB,OAAOpD,EAAMvD,mBAAmBC,WAAW0G,KAE/C1I,KAAKoJ,yBAAyBzD,IAGlCmB,EAAqBjC,UAAUpD,4BAA8B,SAAUkE,GACnE3F,KAAK+B,mBAAmB+G,OAAOnD,GAC/B3F,KAAKoJ,yBAAyBzD,IAGlCmB,EAAqBjC,UAAUuE,yBAA2B,SAAUzD,GAEhE,IADA,IAAII,EAAS/F,KAAKqJ,cAAc1D,GACzBI,GACH/F,KAAKsJ,uBAAuBvD,GAC5BA,EAAS/F,KAAKqJ,cAActD,IAIpCe,EAAqBjC,UAAUyE,uBAAyB,SAAU3D,GAC9D,IAAIL,EAAQtF,KACRuJ,EAAevJ,KAAK+B,mBAAmBC,WAAW2D,GAElD6D,EADcxJ,KAAKuD,YAAYiF,eAAe7C,GAChB8C,MAAM,SAAUC,GAC9C,OAAOpD,EAAMvD,mBAAmBC,WAAW0G,KAE3Ca,IAAiBC,EACjBxJ,KAAK+B,mBAAmBoH,SAASxD,IAE3B4D,GAAgBC,GACtBxJ,KAAK+B,mBAAmBiH,OAAOrD,IAIvCmB,EAAqBjC,UAAUwE,cAAgB,SAAU1D,GACrD,IAAI8D,EAAezJ,KAAKsH,SAAS3B,GACjC,GAAI8D,EAAe,EACf,OAAO,KAGX,IADA,IACSC,EADQ1J,KAAKuD,YAAYoG,UAAUC,QAAQjE,GAAQ,EACnC+D,GAAK,EAAGA,IAAK,CAClC,IAAIG,EAAc7J,KAAKuD,YAAYoG,UAAUD,GAC7C,GAAI1J,KAAKsH,SAASuC,GAAeJ,EAC7B,OAAOI,EAGf,OAAO,MAGX/C,EAAqBjC,UAAU3B,WAAa,SAAUyC,GAClD,IAAImE,EAAa9J,KAAKgH,YAAYlC,IAAIa,GACtC3F,KAAK+G,UAAUjB,WAAWgE,EAAY,IACtC9J,KAAKuD,YAAYwG,OAAOpE,IAG5BmB,EAAqBjC,UAAUnC,SAAW,SAAUiD,EAAMqE,GACtD,IAAIC,EAAajK,KAAKgH,YAAYlC,IAAIa,GACtC3F,KAAK+G,UAAUb,WAAW+D,EAAYD,IAE1ClD,EAAqBX,WAAa,CAC9B,CAAEC,KAAMlG,EAAGgK,UAAWC,KAAM,CAAC,CACjBC,SAAU,yBACVC,YAAa,8BACbC,UAAW,CAAC,8BACZC,UAAW,CAAChG,OAI5BuC,EAAqBR,eAAiB,WAAc,MAAO,CACvD,CAAEF,KAAM7B,KAEZuC,EAAqBP,KAAO,SAASiE,EAA6B/D,GAAK,OAAO,IAAKA,GAAKK,GAAsB5G,EAAGuK,kBAAkBlG,KACnIuC,EAAqB4D,KAAOxK,EAAGyK,kBAAkB,CAAEvE,KAAMU,EAAsB8D,UAAW,CAAC,CAAC,2BAA4BC,SAAU,CAAC3K,EAAG4K,mBAAmB,CAACvG,KAAsBwG,MAAO,EAAGC,KAAM,EAAGC,OAAQ,CAAC,CAAC,EAAG,aAAc,eAAgB,CAAC,oBAAqB,GAAI,qBAAsB,GAAI,EAAG,kBAAmB,CAAC,qBAAsB,GAAI,EAAG,iBAAkB,sBAAuB,CAAC,oBAAqB,GAAI,qBAAsB,IAAK,CAAC,kBAAmB,GAAI,WAAY,IAAK,CAAC,EAAG,sBAAuB,EAAG,UAAW,UAAW,CAAC,qBAAsB,IAAK,CAAC,WAAY,GAAI,cAAe,eAAgB,CAAC,aAAc,GAAI,EAAG,SAAU,CAAC,kBAAmB,GAAI,oBAAqB,IAAK,CAAC,EAAG,uBAAwB,CAAC,EAAG,UAAW,gBAAiB,UAAW,CAAC,kBAAmB,GAAI,EAAG,UAAWC,SAAU,SAASC,EAA8BvK,EAAIC,GAAgB,EAALD,IACp1BV,EAAGc,eAAe,EAAG,WAAY,GACjCd,EAAGkL,WAAW,EAAGzK,EAA+C,EAAG,EAAG,gBAAiB,GACvFT,EAAGkL,WAAW,EAAGhJ,EAA+C,EAAG,EAAG,gBAAiB,GACvFlC,EAAGkL,WAAW,EAAGxI,EAA+C,EAAG,EAAG,gBAAiB,GACvF1C,EAAGyB,gBACI,EAALf,IACFV,EAAG4B,WAAW,aAAcjB,EAAIwH,WAAhCnI,CAA4C,cAAeW,EAAI0C,aAC/DrD,EAAG2B,UAAU,GACb3B,EAAG4B,WAAW,qBAAsBjB,EAAIgH,cACxC3H,EAAG2B,UAAU,GACb3B,EAAG4B,WAAW,qBAAsBjB,EAAI6G,YACvC2D,WAAY,CAAC7K,EAAG8K,QAAS9K,EAAG+K,eAAgB/K,EAAGgL,YAAahL,EAAGiL,kBAAmBjL,EAAGkL,mBAAoBvL,EAAGwL,UAAWvL,EAAGwL,YAAalL,EAAGmL,aAAcvL,EAAKwL,SAAUzL,EAAK0L,SAAUC,OAAQ,CAAC,MACjMlF,EAvJ8B,GAmKzC,SAASmF,EAA4CrL,EAAIC,GAKvD,GALuE,EAALD,IAChEV,EAAGc,eAAe,EAAG,gBAAiB,GACtCd,EAAGe,UAAU,EAAG,SAAU,GAC1Bf,EAAGwB,OAAO,GACVxB,EAAGyB,gBACI,EAALf,EAAQ,CACV,IAAIsL,EAAWrL,EAAIU,UACnBrB,EAAG2B,UAAU,GACb3B,EAAGoD,mBAAmB,IAAK4I,EAAShK,KAAM,MAE9C,SAASiK,EAA+DvL,EAAIC,GAAgB,EAALD,GACnFV,EAAGe,UAAU,EAAG,mBAAoB,GAExC,SAASmL,EAA4CxL,EAAIC,GAUvD,GAVuE,EAALD,IAChEV,EAAGc,eAAe,EAAG,gBAAiB,GACtCd,EAAGc,eAAe,EAAG,SAAU,GAC/Bd,EAAGc,eAAe,EAAG,WAAY,GACjCd,EAAGwB,OAAO,GACVxB,EAAGyB,eACHzB,EAAGyB,eACHzB,EAAGwB,OAAO,GACVxB,EAAGkL,WAAW,EAAGe,EAAgE,EAAG,EAAG,mBAAoB,GAC3GjM,EAAGyB,gBACI,EAALf,EAAQ,CACV,IAAIyL,EAAWxL,EAAIU,UACf+K,EAAUpM,EAAGsB,gBACjBtB,EAAG2B,UAAU,GACb3B,EAAGkD,YAAY,aAAc,UAAYiJ,EAAShJ,UAClDnD,EAAG2B,UAAU,GACb3B,EAAGoD,mBAAmB,IAAKgJ,EAAQ/I,YAAYC,WAAW6I,GAAY,cAAgB,gBAAiB,KACvGnM,EAAG2B,UAAU,GACb3B,EAAGoD,mBAAmB,IAAK+I,EAASnK,KAAM,KAC1ChC,EAAG2B,UAAU,GACb3B,EAAG4B,WAAW,OAAQuK,EAASE,YAGnC,IAAIC,EACA,SAASA,EAAgBtK,EAAMmD,EAAOmC,EAAY+E,QAChC,IAAVlH,IAAoBA,EAAQ,QACb,IAAfmC,IAAyBA,GAAa,QACxB,IAAd+E,IAAwBA,GAAY,GACxCvM,KAAKkC,KAAOA,EACZlC,KAAKqF,MAAQA,EACbrF,KAAKwH,WAAaA,EAClBxH,KAAKuM,UAAYA,GAQrBE,EAAiC,WACjC,SAASA,IACLzM,KAAK0M,QAAU,IAAIzF,IAAI,CACnB,CAAC,SAAU,CAAC,QAAS,SAAU,WAC/B,CAAC,aAAc,CAAC,SAAU,SAAU,UACpC,CAAC,QAAS,CAAC,OAAQ,cACnB,CAAC,QAAS,CAAC,SAAU,QAAS,aAElCjH,KAAK2M,eAAiB,CAAC,SAAU,cAYrC,OATAF,EAAgB5H,UAAU+H,YAAc,WACpC,OAAO5M,KAAK2M,eAAeE,IAAI,SAAU7G,GAAQ,OAAO,IAAIwG,EAAgBxG,EAAM,GAAG,MAEzFyG,EAAgB5H,UAAU4C,YAAc,SAAU9B,GAC9C,OAAO3F,KAAK0M,QAAQ5H,IAAIa,IAE5B8G,EAAgB5H,UAAU0C,aAAe,SAAU5B,GAC/C,OAAO3F,KAAK0M,QAAQI,IAAInH,IAErB8G,EApByB,GA6BhCM,EAAmC,WACnC,SAASA,EAAkBC,EAAcjG,GACrC/G,KAAKgN,aAAeA,EACpBhN,KAAK+G,UAAYA,EACjB/G,KAAKwE,WAAa,IAAI3E,EAAK4E,gBAAgB,IAwE/C,OAtEAE,OAAOC,eAAemI,EAAkBlI,UAAW,OAAQ,CACvDC,IAAK,WAAc,OAAO9E,KAAKwE,WAAW7B,OAC1CsF,IAAK,SAAUtF,GACX3C,KAAKgN,aAAarD,UAAYhH,EAC9B3C,KAAKwE,WAAWW,KAAKxC,IAEzBoC,YAAY,EACZC,cAAc,IAElB+H,EAAkBlI,UAAUoI,QAAU,SAAUC,GAC5C,IAAI5H,EAAQtF,KAOZ,OANAA,KAAKgN,aAAaG,eAAeC,QAAQ7E,UAAU,SAAU8E,IACrDA,EAAOC,OACPD,EAAOE,UACPjI,EAAMkI,kBAAkBH,KAGzBxN,EAAK4N,MAAMP,EAAiBQ,WAAY1N,KAAKwE,YAAYmJ,KAAK5N,EAAU8M,IAAI,WAAc,OAAOvH,EAAML,SAElH8H,EAAkBlI,UAAU+I,WAAa,SAAUV,KAEnDH,EAAkBlI,UAAU2I,kBAAoB,SAAUH,GACtD,IAAI/H,EAAQtF,KACRqN,EAAOC,OACPD,EAAOC,MAAMO,QAAQ,SAAUlI,GAAQ,OAAOL,EAAMwI,WAAWnI,GAAM,KAErE0H,EAAOE,SACPF,EAAOE,QAAQQ,QAAQC,UAAUH,QAAQ,SAAUlI,GAAQ,OAAOL,EAAMwI,WAAWnI,GAAM,MAMjGoH,EAAkBlI,UAAUiJ,WAAa,SAAUnI,EAAMoE,GACrD,IAAIzE,EAAQtF,KACR4F,EAAW5F,KAAK+G,UAAUU,YAAY9B,EAAKzD,MAC3C+L,EAAQjO,KAAKiF,KAAK2E,QAAQjE,IACzBC,GAAYqI,EAAQ,IAGzBtI,EAAK4G,WAAY,EACjB2B,WAAW,WACP,IAAItF,EACJ,GAAImB,EAAQ,CACR,IAAIoE,EAAQvI,EAASiH,IAAI,SAAU7G,GAC/B,OAAO,IAAIwG,EAAgBxG,EAAML,EAAKN,MAAQ,EAAGC,EAAMyB,UAAUQ,aAAavB,OAEjF4C,EAAKtD,EAAML,MAAMmJ,OAAOnF,MAAML,EAAIlJ,EAAMwJ,SAAS,CAAC+E,EAAQ,EAAG,GAAIE,QAEjE,CAED,IADA,IAAIE,EAAQ,EACH3E,EAAIuE,EAAQ,EAAGvE,EAAIpE,EAAML,KAAKqJ,QAChChJ,EAAML,KAAKyE,GAAGrE,MAAQM,EAAKN,MAAOqE,IAAK2E,KAC9C/I,EAAML,KAAKmJ,OAAOH,EAAQ,EAAGI,GAGjC/I,EAAMd,WAAWW,KAAKG,EAAML,MAC5BU,EAAK4G,WAAY,GAClB,OAEPQ,EAAkB5G,WAAa,CAC3B,CAAEC,KAAMlG,EAAGmG,aAGf0G,EAAkBzG,eAAiB,WAAc,MAAO,CACpD,CAAEF,KAAM3F,EAAK2H,iBACb,CAAEhC,KAAMqG,KAEZM,EAAkBxG,KAAO,SAASgI,EAA0B9H,GAAK,OAAO,IAAKA,GAAKsG,GAAmB7M,EAAGsO,SAAS/N,EAAK2H,iBAAkBlI,EAAGsO,SAAS/B,KACpJM,EAAkBrG,MAAQxG,EAAGyG,mBAAmB,CAAEC,MAAOmG,EAAmBvO,QAAS,SAAUiI,GAAK,OAAOsG,EAAkBxG,KAAKE,IAAOI,WAAY,OAC9IkG,EA5E2B,GAoFlC0B,EAAoC,WACpC,SAASA,EAAmBC,GACxB1O,KAAKsH,SAAW,SAAU3B,GAAQ,OAAOA,EAAKN,OAC9CrF,KAAKuH,aAAe,SAAU5B,GAAQ,OAAOA,EAAK6B,YAClDxH,KAAK0H,SAAW,SAAUC,EAAGC,GAAa,OAAOA,EAAUJ,YAC3DxH,KAAKuD,YAAc,IAAI9C,EAAK2H,gBAAgBpI,KAAKsH,SAAUtH,KAAKuH,cAChEvH,KAAKqI,WAAa,IAAI0E,EAAkB/M,KAAKuD,YAAamL,GAC1D1O,KAAKqI,WAAWpD,KAAOyJ,EAAS9B,cAyBpC,OAvBA6B,EAAmBtI,WAAa,CAC5B,CAAEC,KAAMlG,EAAGgK,UAAWC,KAAM,CAAC,CACjBC,SAAU,uBACVC,YAAa,4BACbC,UAAW,CAAC,4BACZC,UAAW,CAACkC,OAI5BgC,EAAmBnI,eAAiB,WAAc,MAAO,CACrD,CAAEF,KAAMqG,KAEZgC,EAAmBlI,KAAO,SAASoI,EAA2BlI,GAAK,OAAO,IAAKA,GAAKgI,GAAoBvO,EAAGuK,kBAAkBgC,KAC7HgC,EAAmB/D,KAAOxK,EAAGyK,kBAAkB,CAAEvE,KAAMqI,EAAoB7D,UAAW,CAAC,CAAC,yBAA0BC,SAAU,CAAC3K,EAAG4K,mBAAmB,CAAC2B,KAAoB1B,MAAO,EAAGC,KAAM,EAAGC,OAAQ,CAAC,CAAC,EAAG,aAAc,eAAgB,CAAC,qBAAsB,GAAI,EAAG,kBAAmB,CAAC,qBAAsB,GAAI,EAAG,iBAAkB,sBAAuB,CAAC,qBAAsB,IAAK,CAAC,kBAAmB,GAAI,WAAY,IAAK,CAAC,kBAAmB,GAAI,oBAAqB,IAAK,CAAC,EAAG,uBAAwB,CAAC,OAAQ,gBAAiB,QAAS,4BAA6B,EAAG,QAAS,CAAC,OAAQ,gBAAiB,EAAG,8BAA+BC,SAAU,SAAS0D,EAA4BhO,EAAIC,GAAgB,EAALD,IAC/qBV,EAAGc,eAAe,EAAG,WAAY,GACjCd,EAAGkL,WAAW,EAAGa,EAA6C,EAAG,EAAG,gBAAiB,GACrF/L,EAAGkL,WAAW,EAAGgB,EAA6C,EAAG,EAAG,gBAAiB,GACrFlM,EAAGyB,gBACI,EAALf,IACFV,EAAG4B,WAAW,aAAcjB,EAAIwH,WAAhCnI,CAA4C,cAAeW,EAAI0C,aAC/DrD,EAAG2B,UAAU,GACb3B,EAAG4B,WAAW,qBAAsBjB,EAAI6G,YACvC2D,WAAY,CAAC7K,EAAG8K,QAAS9K,EAAG+K,eAAgB/K,EAAGgL,YAAahL,EAAGkL,mBAAoBvL,EAAGwL,UAAWnL,EAAGiL,kBAAmBpL,EAAK0L,QAAS9L,EAAG4O,KAAMtO,EAAGuO,gBAAiB9C,OAAQ,CAAC,8EAC7KyC,EAhC4B,GA4CvC,SAASM,EAAiDnO,EAAIC,GAK5D,GAL4E,EAALD,IACrEV,EAAGc,eAAe,EAAG,gBAAiB,GACtCd,EAAGe,UAAU,EAAG,SAAU,GAC1Bf,EAAGwB,OAAO,GACVxB,EAAGyB,gBACI,EAALf,EAAQ,CACV,IAAIoO,EAAWnO,EAAIU,UACnBrB,EAAG2B,UAAU,GACb3B,EAAGoD,mBAAmB,IAAK0L,EAAShJ,KAAM,MAE9C,SAASiJ,EAAiDrO,EAAIC,GAS5D,GAT4E,EAALD,IACrEV,EAAGc,eAAe,EAAG,gBAAiB,GACtCd,EAAGc,eAAe,EAAG,SAAU,GAC/Bd,EAAGc,eAAe,EAAG,WAAY,GACjCd,EAAGwB,OAAO,GACVxB,EAAGyB,eACHzB,EAAGyB,eACHzB,EAAGwB,OAAO,GACVxB,EAAGyB,gBACI,EAALf,EAAQ,CACV,IAAIsO,EAAWrO,EAAIU,UACf4N,EAAUjP,EAAGsB,gBACjBtB,EAAG2B,UAAU,GACb3B,EAAGkD,YAAY,aAAc,UAAY8L,EAASlJ,MAClD9F,EAAG2B,UAAU,GACb3B,EAAGoD,mBAAmB,IAAK6L,EAAQ5L,YAAYC,WAAW0L,GAAY,cAAgB,gBAAiB,KACvGhP,EAAG2B,UAAU,GACb3B,EAAGoD,mBAAmB,IAAK4L,EAASlJ,KAAM,MAE9C,IAAIoJ,EAAc,CACd,CACIpJ,KAAM,QACNJ,SAAU,CACN,CAAEI,KAAM,SACR,CAAEA,KAAM,UACR,CAAEA,KAAM,iBAEb,CACCA,KAAM,aACNJ,SAAU,CACN,CACII,KAAM,QACNJ,SAAU,CACN,CAAEI,KAAM,YACR,CAAEA,KAAM,qBAEb,CACCA,KAAM,SACNJ,SAAU,CACN,CAAEI,KAAM,YACR,CAAEA,KAAM,gBASxBqJ,EAAyC,WACzC,SAASA,IACLrP,KAAKsP,aAAe,SAAU3J,EAAMN,GAChC,MAAO,CACHmC,aAAc7B,EAAKC,UAAYD,EAAKC,SAAS0I,OAAS,EACtDtI,KAAML,EAAKK,KACXX,MAAOA,IAGfrF,KAAKuD,YAAc,IAAI9C,EAAK2H,gBAAgB,SAAUzC,GAAQ,OAAOA,EAAKN,OAAU,SAAUM,GAAQ,OAAOA,EAAK6B,aAClHxH,KAAKkI,cAAgB,IAAI1H,EAAG2H,iBAAiBnI,KAAKsP,aAAc,SAAU3J,GAAQ,OAAOA,EAAKN,OAAU,SAAUM,GAAQ,OAAOA,EAAK6B,YAAe,SAAU7B,GAAQ,OAAOA,EAAKC,WACnL5F,KAAKqI,WAAa,IAAI7H,EAAG8H,sBAAsBtI,KAAKuD,YAAavD,KAAKkI,eACtElI,KAAK0H,SAAW,SAAUC,EAAGhC,GAAQ,OAAOA,EAAK6B,YACjDxH,KAAKqI,WAAWpD,KAAOmK,EAsB3B,OApBAC,EAAwBlJ,WAAa,CACjC,CAAEC,KAAMlG,EAAGgK,UAAWC,KAAM,CAAC,CACjBC,SAAU,6BACVC,YAAa,kCACbC,UAAW,CAAC,sCAI5B+E,EAAwB/I,eAAiB,WAAc,MAAO,IAC9D+I,EAAwB9I,KAAO,SAASgJ,EAAgC9I,GAAK,OAAO,IAAKA,GAAK4I,IAC9FA,EAAwB3E,KAAOxK,EAAGyK,kBAAkB,CAAEvE,KAAMiJ,EAAyBzE,UAAW,CAAC,CAAC,+BAAgCG,MAAO,EAAGC,KAAM,EAAGC,OAAQ,CAAC,CAAC,EAAG,aAAc,eAAgB,CAAC,qBAAsB,GAAI,EAAG,kBAAmB,CAAC,qBAAsB,GAAI,EAAG,iBAAkB,sBAAuB,CAAC,qBAAsB,IAAK,CAAC,kBAAmB,GAAI,WAAY,IAAK,CAAC,kBAAmB,GAAI,oBAAqB,IAAK,CAAC,EAAG,wBAAyBC,SAAU,SAASsE,EAAiC5O,EAAIC,GAAgB,EAALD,IACvgBV,EAAGc,eAAe,EAAG,WAAY,GACjCd,EAAGkL,WAAW,EAAG2D,EAAkD,EAAG,EAAG,gBAAiB,GAC1F7O,EAAGkL,WAAW,EAAG6D,EAAkD,EAAG,EAAG,gBAAiB,GAC1F/O,EAAGyB,gBACI,EAALf,IACFV,EAAG4B,WAAW,aAAcjB,EAAIwH,WAAhCnI,CAA4C,cAAeW,EAAI0C,aAC/DrD,EAAG2B,UAAU,GACb3B,EAAG4B,WAAW,qBAAsBjB,EAAI6G,YACvC2D,WAAY,CAAC7K,EAAG8K,QAAS9K,EAAG+K,eAAgB/K,EAAGgL,YAAahL,EAAGkL,mBAAoBvL,EAAGwL,UAAWnL,EAAGiL,kBAAmBpL,EAAK0L,SAAUC,OAAQ,CAAC,MACjJqD,EAnCiC;;;;;;;;AAqD5C,SAASI,EAA6C7O,EAAIC,GAKxD,GALwE,EAALD,IACjEV,EAAGc,eAAe,EAAG,gBAAiB,GACtCd,EAAGe,UAAU,EAAG,SAAU,GAC1Bf,EAAGwB,OAAO,GACVxB,EAAGyB,gBACI,EAALf,EAAQ,CACV,IAAI8O,EAAW7O,EAAIU,UACnBrB,EAAG2B,UAAU,GACb3B,EAAGoD,mBAAmB,IAAKoM,EAASxN,KAAM,MAE9C,SAASyN,EAA6C/O,EAAIC,GAAO,GAAS,EAALD,EAAQ,CACzE,IAAIgP,EAAO1P,EAAGa,mBACdb,EAAGc,eAAe,EAAG,gBAAiB,GACtCd,EAAGc,eAAe,EAAG,SAAU,GAC/Bd,EAAGgB,WAAW,QAAS,SAAS2O,EAAqEzO,GAAUlB,EAAGmB,cAAcuO,GAAO,IAAIE,EAAWjP,EAAIU,UAA6C,OAApBrB,EAAGsB,gBAAgCuO,aAAaD,KACnO5P,EAAGc,eAAe,EAAG,WAAY,GACjCd,EAAGwB,OAAO,GACVxB,EAAGyB,eACHzB,EAAGyB,eACHzB,EAAGwB,OAAO,GACVxB,EAAGyB,eACL,GAAS,EAALf,EAAQ,CACV,IAAIkP,EAAWjP,EAAIU,UACfyO,EAAU9P,EAAGsB,gBACjBtB,EAAG2B,UAAU,GACb3B,EAAGkD,YAAY,aAAc,UAAY0M,EAASzM,UAClDnD,EAAG2B,UAAU,GACb3B,EAAGoD,mBAAmB,IAAK0M,EAAQzM,YAAYC,WAAWsM,GAAY,cAAgB,gBAAiB,KACvG5P,EAAG2B,UAAU,GACb3B,EAAGoD,mBAAmB,IAAKwM,EAAS5N,KAAM,MAE9C,SAAS+N,EAA6CrP,EAAIC,GAAO,GAAS,EAALD,EAAQ,CACzE,IAAIsP,EAAOhQ,EAAGa,mBACdb,EAAGc,eAAe,EAAG,iBACrBd,EAAGc,eAAe,EAAG,SAAU,GAC/Bd,EAAGgB,WAAW,QAAS,SAASiP,EAAqE/O,GAAUlB,EAAGmB,cAAc6O,GAAO,IAAIE,EAAWvP,EAAIU,UAA6C,OAApBrB,EAAGsB,gBAAgC6O,SAASD,EAASE,sBACxOpQ,EAAGwB,OAAO,EAAG,kBACbxB,EAAGyB,eACHzB,EAAGyB,gBAEP,IAAI4O,EAAY,YAEZC,EAA8B,WAC9B,SAASA,EAAatO,EAAMuO,EAAaH,QACjB,IAAhBG,IAA0BA,GAAc,QACjB,IAAvBH,IAAiCA,EAAqB,MAC1DtQ,KAAKkC,KAAOA,EACZlC,KAAKyQ,YAAcA,EACnBzQ,KAAKsQ,mBAAqBA,EAC1BtQ,KAAK0Q,eAAiB,IAAI7Q,EAAK4E,gBAAgB,IASnD,OAPAE,OAAOC,eAAe4L,EAAa3L,UAAW,WAAY,CACtDC,IAAK,WACD,OAAO9E,KAAK0Q,eAAe/N,OAE/BoC,YAAY,EACZC,cAAc,IAEXwL,EAhBsB,GAmB7BG,EACA,SAASA,EAAiBzO,EAAMmD,EAAOmC,EAAY8I,QACjC,IAAVjL,IAAoBA,EAAQ,QACb,IAAfmC,IAAyBA,GAAa,QACf,IAAvB8I,IAAiCA,EAAqB,MAC1DtQ,KAAKkC,KAAOA,EACZlC,KAAKqF,MAAQA,EACbrF,KAAKwH,WAAaA,EAClBxH,KAAKsQ,mBAAqBA,GAQ9BM,EAAkC,WAClC,SAASA,IACL5Q,KAAK6Q,YAAc,EACnB7Q,KAAKwE,WAAa,IAAI3E,EAAK4E,gBAAgB,IAC3CzE,KAAK8Q,QAAU,IAAI7J,IAEnBjH,KAAK2M,eAAiB,CAAC,aAAc,UACrC3M,KAAK0M,QAAU,IAAIzF,IAAI,CACnB,CAAC,SAAU,CAAC,QAAS,SAAU,WAC/B,CAAC,aAAc,CAAC,SAAU,SAAU,UACpC,CAAC,QAAS,CAAC,OAAQ,cACnB,CAAC,QAAS,CAAC,SAAU,QAAS,SAAU,QAAS,UAAW,QAAS,MAAO,WA2CpF,OAxCA2J,EAAiB/L,UAAUH,WAAa,WACpC,IAAIY,EAAQtF,KACRiF,EAAOjF,KAAK2M,eAAeE,IAAI,SAAU7G,GAAQ,OAAOV,EAAMyL,cAAc/K,KAChFhG,KAAKwE,WAAWW,KAAKF,IAGzB2L,EAAiB/L,UAAUwL,SAAW,SAAUnO,EAAM8O,GAClD,IAAI1L,EAAQtF,KAEZ,QADsB,IAAlBgR,IAA4BA,GAAgB,GAC3ChR,KAAK8Q,QAAQhE,IAAI5K,IAAUlC,KAAK0M,QAAQI,IAAI5K,GAAjD,CAGA,IAAI6D,EAAS/F,KAAK8Q,QAAQhM,IAAI5C,GAC1B0D,EAAW5F,KAAK0M,QAAQ5H,IAAI5C,GAChC,KAAI8O,GAAiBjL,EAAOH,SAAS0I,OAAS,GAA9C,CAGA,IAAI2C,EAAoBlL,EAAOH,SAAS0I,OAAStO,KAAK6Q,YAClD1C,EAAQvI,EAASmI,MAAM,EAAGkD,GACzBpE,IAAI,SAAU7G,GAAQ,OAAOV,EAAMyL,cAAc/K,KAClDiL,EAAoBrL,EAAS0I,QAE7BH,EAAMlI,KAAK,IAAIuK,EAAaD,GAAW,EAAOrO,IAElD6D,EAAO2K,eAAevL,KAAKgJ,GAC3BnO,KAAKwE,WAAWW,KAAKnF,KAAKwE,WAAW7B,UAEzCiO,EAAiB/L,UAAUkM,cAAgB,SAAU7O,GACjD,GAAIlC,KAAK8Q,QAAQhE,IAAI5K,GACjB,OAAOlC,KAAK8Q,QAAQhM,IAAI5C,GAE5B,IAAIgP,EAAS,IAAIV,EAAatO,EAAMlC,KAAK0M,QAAQI,IAAI5K,IAErD,OADAlC,KAAK8Q,QAAQ7I,IAAI/F,EAAMgP,GAChBA,GAEXN,EAAiBzK,WAAa,CAC1B,CAAEC,KAAMlG,EAAGmG,aAEfuK,EAAiBrK,KAAO,SAAS4K,EAAyB1K,GAAK,OAAO,IAAKA,GAAKmK,IAChFA,EAAiBlK,MAAQxG,EAAGyG,mBAAmB,CAAEC,MAAOgK,EAAkBpS,QAAS,SAAUiI,GAAK,OAAOmK,EAAiBrK,KAAKE,IAAOI,WAAY,OAC3I+J,EAtD0B,GA8DjCQ,EAAqC,WACrC,SAASA,EAAoBrK,GACzB,IAAIzB,EAAQtF,KACZA,KAAK+G,UAAYA,EACjB/G,KAAK8Q,QAAU,IAAI7J,IACnBjH,KAAKyH,YAAc,SAAU9B,GAAQ,OAAOA,EAAK+K,gBACjD1Q,KAAK8H,YAAc,SAAUnC,EAAMN,GAC/B,IAAI0C,EAAezC,EAAMwL,QAAQhM,IAAIa,EAAKzD,MAC1C,GAAI6F,EACA,OAAOA,EAEX,IAAIsJ,EAAU,IAAIV,EAAiBhL,EAAKzD,KAAMmD,EAAOM,EAAK8K,YAAa9K,EAAK2K,oBAE5E,OADAhL,EAAMwL,QAAQ7I,IAAItC,EAAKzD,KAAMmP,GACtBA,GAEXrR,KAAKsH,SAAW,SAAU3B,GAAQ,OAAOA,EAAKN,OAC9CrF,KAAKuH,aAAe,SAAU5B,GAAQ,OAAOA,EAAK6B,YAClDxH,KAAK0H,SAAW,SAAUC,EAAGC,GAAa,OAAOA,EAAUJ,YAC3DxH,KAAKsR,WAAa,SAAU3J,EAAGC,GAAa,OAAOA,EAAU1F,OAASqO,GACtEvQ,KAAKkI,cAAgB,IAAI1H,EAAG2H,iBAAiBnI,KAAK8H,YAAa9H,KAAKsH,SAAUtH,KAAKuH,aAAcvH,KAAKyH,aACtGzH,KAAKuD,YAAc,IAAI9C,EAAK2H,gBAAgBpI,KAAKsH,SAAUtH,KAAKuH,cAChEvH,KAAKqI,WAAa,IAAI7H,EAAG8H,sBAAsBtI,KAAKuD,YAAavD,KAAKkI,eACtEnB,EAAUvC,WAAW+D,UAAU,SAAUtD,GACrCK,EAAM+C,WAAWpD,KAAOA,IAE5B8B,EAAUrC,aAmCd,OAhCA0M,EAAoBvM,UAAUwL,SAAW,SAAUnO,GAC/ClC,KAAK+G,UAAUsJ,SAASnO,IAE5BkP,EAAoBvM,UAAUkL,aAAe,SAAUpK,GACnD3F,KAAK+G,UAAUsJ,SAAS1K,EAAKzD,MAAM,IAEvCkP,EAAoBjL,WAAa,CAC7B,CAAEC,KAAMlG,EAAGgK,UAAWC,KAAM,CAAC,CACjBC,SAAU,wBACVC,YAAa,6BACbC,UAAW,CAAC,6BACZC,UAAW,CAACqG,OAI5BQ,EAAoB9K,eAAiB,WAAc,MAAO,CACtD,CAAEF,KAAMwK,KAEZQ,EAAoB7K,KAAO,SAASgL,EAA4B9K,GAAK,OAAO,IAAKA,GAAK2K,GAAqBlR,EAAGuK,kBAAkBmG,KAChIQ,EAAoB1G,KAAOxK,EAAGyK,kBAAkB,CAAEvE,KAAMgL,EAAqBxG,UAAW,CAAC,CAAC,0BAA2BC,SAAU,CAAC3K,EAAG4K,mBAAmB,CAAC8F,KAAqB7F,MAAO,EAAGC,KAAM,EAAGC,OAAQ,CAAC,CAAC,EAAG,aAAc,eAAgB,CAAC,qBAAsB,GAAI,EAAG,kBAAmB,CAAC,qBAAsB,GAAI,EAAG,iBAAkB,sBAAuB,CAAC,EAAG,iBAAkB,sBAAuB,CAAC,qBAAsB,IAAK,CAAC,kBAAmB,GAAI,WAAY,IAAK,CAAC,kBAAmB,GAAI,oBAAqB,GAAI,EAAG,SAAU,CAAC,EAAG,uBAAwB,CAAC,aAAc,GAAI,EAAG,UAAWC,SAAU,SAASsG,EAA6B5Q,EAAIC,GAAgB,EAALD,IACtoBV,EAAGc,eAAe,EAAG,WAAY,GACjCd,EAAGkL,WAAW,EAAGqE,EAA8C,EAAG,EAAG,gBAAiB,GACtFvP,EAAGkL,WAAW,EAAGuE,EAA8C,EAAG,EAAG,gBAAiB,GACtFzP,EAAGkL,WAAW,EAAG6E,EAA8C,EAAG,EAAG,gBAAiB,GACtF/P,EAAGyB,gBACI,EAALf,IACFV,EAAG4B,WAAW,aAAcjB,EAAIwH,WAAhCnI,CAA4C,cAAeW,EAAI0C,aAC/DrD,EAAG2B,UAAU,GACb3B,EAAG4B,WAAW,qBAAsBjB,EAAI6G,UACxCxH,EAAG2B,UAAU,GACb3B,EAAG4B,WAAW,qBAAsBjB,EAAIyQ,cACvCjG,WAAY,CAAC7K,EAAG8K,QAAS9K,EAAG+K,eAAgB/K,EAAGgL,YAAahL,EAAGkL,mBAAoBvL,EAAGwL,UAAWnL,EAAGiL,kBAAmBpL,EAAK0L,SAAUC,OAAQ,CAAC,MACjJoF,EA5D6B,GAwExC,SAASK,EAAmD7Q,EAAIC,GAO9D,GAP8E,EAALD,IACvEV,EAAGc,eAAe,EAAG,gBAAiB,GACtCd,EAAGc,eAAe,EAAG,KAAM,GAC3Bd,EAAGe,UAAU,EAAG,SAAU,GAC1Bf,EAAGwB,OAAO,GACVxB,EAAGyB,eACHzB,EAAGyB,gBACI,EAALf,EAAQ,CACV,IAAI8Q,EAAW7Q,EAAIU,UACnBrB,EAAG2B,UAAU,GACb3B,EAAGoD,mBAAmB,IAAKoO,EAAS1L,KAAM,MAE9C,SAAS2L,EAA0D/Q,EAAIC,GAgBrE,GAhBqF,EAALD,IAC9EV,EAAGc,eAAe,EAAG,wBACrBd,EAAGc,eAAe,EAAG,MACrBd,EAAGc,eAAe,EAAG,MAAO,GAC5Bd,EAAGc,eAAe,EAAG,SAAU,GAC/Bd,EAAGc,eAAe,EAAG,WAAY,GACjCd,EAAGwB,OAAO,GACVxB,EAAGyB,eACHzB,EAAGyB,eACHzB,EAAGwB,OAAO,GACVxB,EAAGyB,eACHzB,EAAGc,eAAe,EAAG,MACrBd,EAAG0R,mBAAmB,EAAG,GACzB1R,EAAGyB,eACHzB,EAAGyB,eACHzB,EAAGyB,gBACI,EAALf,EAAQ,CACV,IAAIiR,EAAWhR,EAAIU,UACfuQ,EAAU5R,EAAGsB,gBACjBtB,EAAG2B,UAAU,GACb3B,EAAGkD,YAAY,aAAc,UAAYyO,EAAS7L,MAClD9F,EAAG2B,UAAU,GACb3B,EAAGoD,mBAAmB,IAAKwO,EAAQvO,YAAYC,WAAWqO,GAAY,cAAgB,gBAAiB,KACvG3R,EAAG2B,UAAU,GACb3B,EAAGoD,mBAAmB,IAAKuO,EAAS7L,KAAM,KAC1C9F,EAAG2B,UAAU,GACb3B,EAAG6R,YAAY,0BAA2BD,EAAQvO,YAAYC,WAAWqO,KAE7E,IAAIG,EAAc,CACd,CACIhM,KAAM,QACNJ,SAAU,CACN,CAAEI,KAAM,SACR,CAAEA,KAAM,UACR,CAAEA,KAAM,iBAEb,CACCA,KAAM,aACNJ,SAAU,CACN,CACII,KAAM,QACNJ,SAAU,CACN,CAAEI,KAAM,YACR,CAAEA,KAAM,qBAEb,CACCA,KAAM,SACNJ,SAAU,CACN,CAAEI,KAAM,YACR,CAAEA,KAAM,gBASxBiM,EAA2C,WAC3C,SAASA,IACLjS,KAAKuD,YAAc,IAAI9C,EAAKyR,kBAAkB,SAAUvM,GAAQ,OAAOA,EAAKC,WAC5E5F,KAAKqI,WAAa,IAAI7H,EAAG2R,wBACzBnS,KAAK0H,SAAW,SAAUC,EAAGhC,GAAQ,QAASA,EAAKC,UAAYD,EAAKC,SAAS0I,OAAS,GACtFtO,KAAKqI,WAAWpD,KAAO+M,EAsB3B,OApBAC,EAA0B9L,WAAa,CACnC,CAAEC,KAAMlG,EAAGgK,UAAWC,KAAM,CAAC,CACjBC,SAAU,+BACVC,YAAa,oCACbC,UAAW,CAAC,wCAI5B2H,EAA0B3L,eAAiB,WAAc,MAAO,IAChE2L,EAA0B1L,KAAO,SAAS6L,EAAkC3L,GAAK,OAAO,IAAKA,GAAKwL,IAClGA,EAA0BvH,KAAOxK,EAAGyK,kBAAkB,CAAEvE,KAAM6L,EAA2BrH,UAAW,CAAC,CAAC,iCAAkCG,MAAO,EAAGC,KAAM,EAAGC,OAAQ,CAAC,CAAC,EAAG,eAAgB,EAAG,aAAc,eAAgB,CAAC,oBAAqB,GAAI,EAAG,kBAAmB,CAAC,EAAG,iBAAkB,sBAAuB,CAAC,oBAAqB,IAAK,CAAC,EAAG,iBAAkB,CAAC,kBAAmB,GAAI,WAAY,IAAK,CAAC,kBAAmB,GAAI,oBAAqB,IAAK,CAAC,EAAG,uBAAwB,CAAC,oBAAqB,KAAMC,SAAU,SAASmH,EAAmCzR,EAAIC,GAAgB,EAALD,IACvjBV,EAAGc,eAAe,EAAG,WAAY,GACjCd,EAAGkL,WAAW,EAAGqG,EAAoD,EAAG,EAAG,gBAAiB,GAC5FvR,EAAGkL,WAAW,EAAGuG,EAA2D,EAAG,EAAG,uBAAwB,GAC1GzR,EAAGyB,gBACI,EAALf,IACFV,EAAG4B,WAAW,aAAcjB,EAAIwH,WAAhCnI,CAA4C,cAAeW,EAAI0C,aAC/DrD,EAAG2B,UAAU,GACb3B,EAAG4B,WAAW,qBAAsBjB,EAAI6G,YACvC2D,WAAY,CAAC7K,EAAG8K,QAAS9K,EAAG+K,eAAgB/K,EAAGgL,YAAahL,EAAGiL,kBAAmBtL,EAAGwL,UAAWnL,EAAG8R,kBAAmBjS,EAAK0L,QAASvL,EAAG+R,mBAAoBvG,OAAQ,CAAC,mQACtKiG,EA3BmC,GAsC1CO,EAAW,CACX1L,EACA2H,EACAY,EACA+B,EACAa,GAEAQ,EAAoC,WACpC,SAASA,KA2BT,OAzBAA,EAAmBtM,WAAa,CAC5B,CAAEC,KAAMlG,EAAGwS,SAAUvI,KAAM,CAAC,CAChBwI,QAAS,CACL1S,EAAG2S,aACHzS,EAAG0S,gBACHzS,EAAG0S,kBACHzS,EAAK0S,cACLzS,EAAK0S,eACLzS,EAAG0S,qBACHzS,EAAG0S,eAEPC,aAAcX,EACd/T,QAAS+T,MAGzBC,EAAmBW,KAAOlT,EAAGmT,iBAAiB,CAAEjN,KAAMqM,IACtDA,EAAmBa,KAAOpT,EAAGqT,iBAAiB,CAAE/U,QAAS,SAASgV,EAA2B/M,GAAK,OAAO,IAAKA,GAAKgM,IAA0BE,QAAS,CAAC,CAC3I1S,EAAG2S,aACHzS,EAAG0S,gBACHzS,EAAG0S,kBACHzS,EAAK0S,cACLzS,EAAK0S,eACLzS,EAAG0S,qBACHzS,EAAG0S,kBAERT,EA5B4B,GA8DvChU,EAAQqI,qBAAuBA,EAC/BrI,EAAQgQ,mBAAqBA,EAC7BhQ,EAAQ4Q,wBAA0BA,EAClC5Q,EAAQ2S,oBAAsBA,EAC9B3S,EAAQwT,0BAA4BA,EACpCxT,EAAQgU,mBAAqBA,EAE7B9N,OAAOC,eAAenG,EAAS,aAAc,CAAEkE,OAAO","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/material/button'), require('@angular/material/checkbox'), require('@angular/material/icon'), require('@angular/material/input'), require('@angular/material/progress-bar'), require('@angular/material/tree'), require('tslib'), require('@angular/cdk/collections'), require('@angular/cdk/tree'), require('rxjs'), require('@angular/material/form-field'), require('rxjs/operators')) :\n    typeof define === 'function' && define.amd ? define('@angular/components-examples/material/tree', ['exports', '@angular/common', '@angular/core', '@angular/material/button', '@angular/material/checkbox', '@angular/material/icon', '@angular/material/input', '@angular/material/progress-bar', '@angular/material/tree', 'tslib', '@angular/cdk/collections', '@angular/cdk/tree', 'rxjs', '@angular/material/form-field', 'rxjs/operators'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.componentsExamples = global.ng.componentsExamples || {}, global.ng.componentsExamples.material = global.ng.componentsExamples.material || {}, global.ng.componentsExamples.material.tree = {}), global.ng.common, global.ng.core, global.ng.material.button, global.ng.material.checkbox, global.ng.material.icon, global.ng.material.input, global.ng.material.progressBar, global.ng.material.tree, global.tslib, global.ng.cdk.collections, global.ng.cdk.tree, global.rxjs, global.ng.material.formField, global.rxjs.operators));\n}(this, function (exports, i5, i0, i2, i3, i3$1, i5$1, i6, i1, tslib, collections, i1$1, rxjs, i4, operators) { 'use strict';\n\n    function TreeChecklistExample_mat_tree_node_1_Template(rf, ctx) { if (rf & 1) {\n        var _r5 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"mat-tree-node\", 3);\n        i0.ɵɵelement(1, \"button\", 4);\n        i0.ɵɵelementStart(2, \"mat-checkbox\", 5);\n        i0.ɵɵlistener(\"change\", function TreeChecklistExample_mat_tree_node_1_Template_mat_checkbox_change_2_listener($event) { i0.ɵɵrestoreView(_r5); var node_r3 = ctx.$implicit; var ctx_r4 = i0.ɵɵnextContext(); return ctx_r4.todoLeafItemSelectionToggle(node_r3); });\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var node_r3 = ctx.$implicit;\n        var ctx_r0 = i0.ɵɵnextContext();\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"checked\", ctx_r0.checklistSelection.isSelected(node_r3));\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(node_r3.item);\n    } }\n    var _c0 = [\"itemValue\", \"\"];\n    function TreeChecklistExample_mat_tree_node_2_Template(rf, ctx) { if (rf & 1) {\n        var _r9 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"mat-tree-node\", 6);\n        i0.ɵɵelement(1, \"button\", 4);\n        i0.ɵɵelementStart(2, \"mat-form-field\");\n        i0.ɵɵelement(3, \"input\", 7, _c0);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function TreeChecklistExample_mat_tree_node_2_Template_button_click_5_listener($event) { i0.ɵɵrestoreView(_r9); var node_r6 = ctx.$implicit; var _r7 = i0.ɵɵreference(4); var ctx_r8 = i0.ɵɵnextContext(); return ctx_r8.saveNode(node_r6, _r7.value); });\n        i0.ɵɵtext(6, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } }\n    function TreeChecklistExample_mat_tree_node_3_Template(rf, ctx) { if (rf & 1) {\n        var _r12 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"mat-tree-node\", 6);\n        i0.ɵɵelementStart(1, \"button\", 9);\n        i0.ɵɵelementStart(2, \"mat-icon\", 10);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"mat-checkbox\", 11);\n        i0.ɵɵlistener(\"change\", function TreeChecklistExample_mat_tree_node_3_Template_mat_checkbox_change_4_listener($event) { i0.ɵɵrestoreView(_r12); var node_r10 = ctx.$implicit; var ctx_r11 = i0.ɵɵnextContext(); return ctx_r11.todoItemSelectionToggle(node_r10); });\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"button\", 12);\n        i0.ɵɵlistener(\"click\", function TreeChecklistExample_mat_tree_node_3_Template_button_click_6_listener($event) { i0.ɵɵrestoreView(_r12); var node_r10 = ctx.$implicit; var ctx_r13 = i0.ɵɵnextContext(); return ctx_r13.addNewItem(node_r10); });\n        i0.ɵɵelementStart(7, \"mat-icon\");\n        i0.ɵɵtext(8, \"add\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var node_r10 = ctx.$implicit;\n        var ctx_r2 = i0.ɵɵnextContext();\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"aria-label\", \"toggle \" + node_r10.filename);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx_r2.treeControl.isExpanded(node_r10) ? \"expand_more\" : \"chevron_right\", \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"checked\", ctx_r2.descendantsAllSelected(node_r10))(\"indeterminate\", ctx_r2.descendantsPartiallySelected(node_r10));\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(node_r10.item);\n    } }\n    /**\n     * Node for to-do item\n     */\n    var TodoItemNode = /** @class */ (function () {\n        function TodoItemNode() {\n        }\n        return TodoItemNode;\n    }());\n    /** Flat to-do item node with expandable and level information */\n    var TodoItemFlatNode = /** @class */ (function () {\n        function TodoItemFlatNode() {\n        }\n        return TodoItemFlatNode;\n    }());\n    /**\n     * The Json object for to-do list data.\n     */\n    var TREE_DATA = {\n        Groceries: {\n            'Almond Meal flour': null,\n            'Organic eggs': null,\n            'Protein Powder': null,\n            Fruits: {\n                Apple: null,\n                Berries: ['Blueberry', 'Raspberry'],\n                Orange: null\n            }\n        },\n        Reminders: [\n            'Cook dinner',\n            'Read the Material Design spec',\n            'Upgrade Application to Angular'\n        ]\n    };\n    /**\n     * Checklist database, it can build a tree structured Json object.\n     * Each node in Json object represents a to-do item or a category.\n     * If a node is a category, it has children items and new items can be added under the category.\n     */\n    var ChecklistDatabase = /** @class */ (function () {\n        function ChecklistDatabase() {\n            this.dataChange = new rxjs.BehaviorSubject([]);\n            this.initialize();\n        }\n        Object.defineProperty(ChecklistDatabase.prototype, \"data\", {\n            get: function () { return this.dataChange.value; },\n            enumerable: true,\n            configurable: true\n        });\n        ChecklistDatabase.prototype.initialize = function () {\n            // Build the tree nodes from Json object. The result is a list of `TodoItemNode` with nested\n            //     file node as children.\n            var data = this.buildFileTree(TREE_DATA, 0);\n            // Notify the change.\n            this.dataChange.next(data);\n        };\n        /**\n         * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n         * The return value is the list of `TodoItemNode`.\n         */\n        ChecklistDatabase.prototype.buildFileTree = function (obj, level) {\n            var _this = this;\n            return Object.keys(obj).reduce(function (accumulator, key) {\n                var value = obj[key];\n                var node = new TodoItemNode();\n                node.item = key;\n                if (value != null) {\n                    if (typeof value === 'object') {\n                        node.children = _this.buildFileTree(value, level + 1);\n                    }\n                    else {\n                        node.item = value;\n                    }\n                }\n                return accumulator.concat(node);\n            }, []);\n        };\n        /** Add an item to to-do list */\n        ChecklistDatabase.prototype.insertItem = function (parent, name) {\n            if (parent.children) {\n                parent.children.push({ item: name });\n                this.dataChange.next(this.data);\n            }\n        };\n        ChecklistDatabase.prototype.updateItem = function (node, name) {\n            node.item = name;\n            this.dataChange.next(this.data);\n        };\n        ChecklistDatabase.decorators = [\n            { type: i0.Injectable },\n        ];\n        /** @nocollapse */\n        ChecklistDatabase.ctorParameters = function () { return []; };\n        ChecklistDatabase.ɵfac = function ChecklistDatabase_Factory(t) { return new (t || ChecklistDatabase)(); };\n        ChecklistDatabase.ɵprov = i0.ɵɵdefineInjectable({ token: ChecklistDatabase, factory: function (t) { return ChecklistDatabase.ɵfac(t); }, providedIn: null });\n        return ChecklistDatabase;\n    }());\n    /*@__PURE__*/ i0.ɵsetClassMetadata(ChecklistDatabase, [{\n            type: i0.Injectable\n        }], function () { return []; }, null);\n    /**\n     * @title Tree with checkboxes\n     */\n    var TreeChecklistExample = /** @class */ (function () {\n        function TreeChecklistExample(_database) {\n            var _this = this;\n            this._database = _database;\n            /** Map from flat node to nested node. This helps us finding the nested node to be modified */\n            this.flatNodeMap = new Map();\n            /** Map from nested node to flattened node. This helps us to keep the same object for selection */\n            this.nestedNodeMap = new Map();\n            /** A selected parent node to be inserted */\n            this.selectedParent = null;\n            /** The new item's name */\n            this.newItemName = '';\n            /** The selection for checklist */\n            this.checklistSelection = new collections.SelectionModel(true /* multiple */);\n            this.getLevel = function (node) { return node.level; };\n            this.isExpandable = function (node) { return node.expandable; };\n            this.getChildren = function (node) { return node.children; };\n            this.hasChild = function (_, _nodeData) { return _nodeData.expandable; };\n            this.hasNoContent = function (_, _nodeData) { return _nodeData.item === ''; };\n            /**\n             * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\n             */\n            this.transformer = function (node, level) {\n                var existingNode = _this.nestedNodeMap.get(node);\n                var flatNode = existingNode && existingNode.item === node.item\n                    ? existingNode\n                    : new TodoItemFlatNode();\n                flatNode.item = node.item;\n                flatNode.level = level;\n                flatNode.expandable = !!node.children;\n                _this.flatNodeMap.set(flatNode, node);\n                _this.nestedNodeMap.set(node, flatNode);\n                return flatNode;\n            };\n            this.treeFlattener = new i1.MatTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n            this.treeControl = new i1$1.FlatTreeControl(this.getLevel, this.isExpandable);\n            this.dataSource = new i1.MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n            _database.dataChange.subscribe(function (data) {\n                _this.dataSource.data = data;\n            });\n        }\n        /** Whether all the descendants of the node are selected. */\n        TreeChecklistExample.prototype.descendantsAllSelected = function (node) {\n            var _this = this;\n            var descendants = this.treeControl.getDescendants(node);\n            var descAllSelected = descendants.every(function (child) {\n                return _this.checklistSelection.isSelected(child);\n            });\n            return descAllSelected;\n        };\n        /** Whether part of the descendants are selected */\n        TreeChecklistExample.prototype.descendantsPartiallySelected = function (node) {\n            var _this = this;\n            var descendants = this.treeControl.getDescendants(node);\n            var result = descendants.some(function (child) { return _this.checklistSelection.isSelected(child); });\n            return result && !this.descendantsAllSelected(node);\n        };\n        /** Toggle the to-do item selection. Select/deselect all the descendants node */\n        TreeChecklistExample.prototype.todoItemSelectionToggle = function (node) {\n            var _a, _b;\n            var _this = this;\n            this.checklistSelection.toggle(node);\n            var descendants = this.treeControl.getDescendants(node);\n            this.checklistSelection.isSelected(node)\n                ? (_a = this.checklistSelection).select.apply(_a, tslib.__spread(descendants)) : (_b = this.checklistSelection).deselect.apply(_b, tslib.__spread(descendants));\n            // Force update for the parent\n            descendants.every(function (child) {\n                return _this.checklistSelection.isSelected(child);\n            });\n            this.checkAllParentsSelection(node);\n        };\n        /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\n        TreeChecklistExample.prototype.todoLeafItemSelectionToggle = function (node) {\n            this.checklistSelection.toggle(node);\n            this.checkAllParentsSelection(node);\n        };\n        /* Checks all the parents when a leaf node is selected/unselected */\n        TreeChecklistExample.prototype.checkAllParentsSelection = function (node) {\n            var parent = this.getParentNode(node);\n            while (parent) {\n                this.checkRootNodeSelection(parent);\n                parent = this.getParentNode(parent);\n            }\n        };\n        /** Check root node checked state and change it accordingly */\n        TreeChecklistExample.prototype.checkRootNodeSelection = function (node) {\n            var _this = this;\n            var nodeSelected = this.checklistSelection.isSelected(node);\n            var descendants = this.treeControl.getDescendants(node);\n            var descAllSelected = descendants.every(function (child) {\n                return _this.checklistSelection.isSelected(child);\n            });\n            if (nodeSelected && !descAllSelected) {\n                this.checklistSelection.deselect(node);\n            }\n            else if (!nodeSelected && descAllSelected) {\n                this.checklistSelection.select(node);\n            }\n        };\n        /* Get the parent node of a node */\n        TreeChecklistExample.prototype.getParentNode = function (node) {\n            var currentLevel = this.getLevel(node);\n            if (currentLevel < 1) {\n                return null;\n            }\n            var startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n            for (var i = startIndex; i >= 0; i--) {\n                var currentNode = this.treeControl.dataNodes[i];\n                if (this.getLevel(currentNode) < currentLevel) {\n                    return currentNode;\n                }\n            }\n            return null;\n        };\n        /** Select the category so we can insert the new item. */\n        TreeChecklistExample.prototype.addNewItem = function (node) {\n            var parentNode = this.flatNodeMap.get(node);\n            this._database.insertItem(parentNode, '');\n            this.treeControl.expand(node);\n        };\n        /** Save the node to database */\n        TreeChecklistExample.prototype.saveNode = function (node, itemValue) {\n            var nestedNode = this.flatNodeMap.get(node);\n            this._database.updateItem(nestedNode, itemValue);\n        };\n        TreeChecklistExample.decorators = [\n            { type: i0.Component, args: [{\n                        selector: 'tree-checklist-example',\n                        templateUrl: 'tree-checklist-example.html',\n                        styleUrls: ['tree-checklist-example.css'],\n                        providers: [ChecklistDatabase]\n                    },] },\n        ];\n        /** @nocollapse */\n        TreeChecklistExample.ctorParameters = function () { return [\n            { type: ChecklistDatabase }\n        ]; };\n        TreeChecklistExample.ɵfac = function TreeChecklistExample_Factory(t) { return new (t || TreeChecklistExample)(i0.ɵɵdirectiveInject(ChecklistDatabase)); };\n        TreeChecklistExample.ɵcmp = i0.ɵɵdefineComponent({ type: TreeChecklistExample, selectors: [[\"tree-checklist-example\"]], features: [i0.ɵɵProvidersFeature([ChecklistDatabase])], decls: 4, vars: 4, consts: [[3, \"dataSource\", \"treeControl\"], [\"matTreeNodeToggle\", \"\", \"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [\"matTreeNodeToggle\", \"\", \"matTreeNodePadding\", \"\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [1, \"checklist-leaf-node\", 3, \"checked\", \"change\"], [\"matTreeNodePadding\", \"\"], [\"matInput\", \"\", \"placeholder\", \"New item...\"], [\"mat-button\", \"\", 3, \"click\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\"], [1, \"mat-icon-rtl-mirror\"], [3, \"checked\", \"indeterminate\", \"change\"], [\"mat-icon-button\", \"\", 3, \"click\"]], template: function TreeChecklistExample_Template(rf, ctx) { if (rf & 1) {\n                i0.ɵɵelementStart(0, \"mat-tree\", 0);\n                i0.ɵɵtemplate(1, TreeChecklistExample_mat_tree_node_1_Template, 4, 2, \"mat-tree-node\", 1);\n                i0.ɵɵtemplate(2, TreeChecklistExample_mat_tree_node_2_Template, 7, 0, \"mat-tree-node\", 2);\n                i0.ɵɵtemplate(3, TreeChecklistExample_mat_tree_node_3_Template, 9, 5, \"mat-tree-node\", 2);\n                i0.ɵɵelementEnd();\n            } if (rf & 2) {\n                i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n                i0.ɵɵadvance(2);\n                i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasNoContent);\n                i0.ɵɵadvance(1);\n                i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n            } }, directives: [i1.MatTree, i1.MatTreeNodeDef, i1.MatTreeNode, i1.MatTreeNodeToggle, i1.MatTreeNodePadding, i2.MatButton, i3.MatCheckbox, i4.MatFormField, i5$1.MatInput, i3$1.MatIcon], styles: [\"\"] });\n        return TreeChecklistExample;\n    }());\n    /*@__PURE__*/ i0.ɵsetClassMetadata(TreeChecklistExample, [{\n            type: i0.Component,\n            args: [{\n                    selector: 'tree-checklist-example',\n                    templateUrl: 'tree-checklist-example.html',\n                    styleUrls: ['tree-checklist-example.css'],\n                    providers: [ChecklistDatabase]\n                }]\n        }], function () { return [{ type: ChecklistDatabase }]; }, null);\n\n    function TreeDynamicExample_mat_tree_node_1_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-tree-node\", 3);\n        i0.ɵɵelement(1, \"button\", 4);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var node_r16 = ctx.$implicit;\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", node_r16.item, \" \");\n    } }\n    function TreeDynamicExample_mat_tree_node_2_mat_progress_bar_5_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelement(0, \"mat-progress-bar\", 8);\n    } }\n    function TreeDynamicExample_mat_tree_node_2_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-tree-node\", 3);\n        i0.ɵɵelementStart(1, \"button\", 5);\n        i0.ɵɵelementStart(2, \"mat-icon\", 6);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(4);\n        i0.ɵɵtemplate(5, TreeDynamicExample_mat_tree_node_2_mat_progress_bar_5_Template, 1, 0, \"mat-progress-bar\", 7);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var node_r17 = ctx.$implicit;\n        var ctx_r15 = i0.ɵɵnextContext();\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"aria-label\", \"toggle \" + node_r17.filename);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx_r15.treeControl.isExpanded(node_r17) ? \"expand_more\" : \"chevron_right\", \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", node_r17.item, \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", node_r17.isLoading);\n    } }\n    /** Flat node with expandable and level information */\n    var DynamicFlatNode = /** @class */ (function () {\n        function DynamicFlatNode(item, level, expandable, isLoading) {\n            if (level === void 0) { level = 1; }\n            if (expandable === void 0) { expandable = false; }\n            if (isLoading === void 0) { isLoading = false; }\n            this.item = item;\n            this.level = level;\n            this.expandable = expandable;\n            this.isLoading = isLoading;\n        }\n        return DynamicFlatNode;\n    }());\n    /**\n     * Database for dynamic data. When expanding a node in the tree, the data source will need to fetch\n     * the descendants data from the database.\n     */\n    var DynamicDatabase = /** @class */ (function () {\n        function DynamicDatabase() {\n            this.dataMap = new Map([\n                ['Fruits', ['Apple', 'Orange', 'Banana']],\n                ['Vegetables', ['Tomato', 'Potato', 'Onion']],\n                ['Apple', ['Fuji', 'Macintosh']],\n                ['Onion', ['Yellow', 'White', 'Purple']]\n            ]);\n            this.rootLevelNodes = ['Fruits', 'Vegetables'];\n        }\n        /** Initial data from database */\n        DynamicDatabase.prototype.initialData = function () {\n            return this.rootLevelNodes.map(function (name) { return new DynamicFlatNode(name, 0, true); });\n        };\n        DynamicDatabase.prototype.getChildren = function (node) {\n            return this.dataMap.get(node);\n        };\n        DynamicDatabase.prototype.isExpandable = function (node) {\n            return this.dataMap.has(node);\n        };\n        return DynamicDatabase;\n    }());\n    /**\n     * File database, it can build a tree structured Json object from string.\n     * Each node in Json object represents a file or a directory. For a file, it has filename and type.\n     * For a directory, it has filename and children (a list of files or directories).\n     * The input will be a json object string, and the output is a list of `FileNode` with nested\n     * structure.\n     */\n    var DynamicDataSource = /** @class */ (function () {\n        function DynamicDataSource(_treeControl, _database) {\n            this._treeControl = _treeControl;\n            this._database = _database;\n            this.dataChange = new rxjs.BehaviorSubject([]);\n        }\n        Object.defineProperty(DynamicDataSource.prototype, \"data\", {\n            get: function () { return this.dataChange.value; },\n            set: function (value) {\n                this._treeControl.dataNodes = value;\n                this.dataChange.next(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DynamicDataSource.prototype.connect = function (collectionViewer) {\n            var _this = this;\n            this._treeControl.expansionModel.changed.subscribe(function (change) {\n                if (change.added ||\n                    change.removed) {\n                    _this.handleTreeControl(change);\n                }\n            });\n            return rxjs.merge(collectionViewer.viewChange, this.dataChange).pipe(operators.map(function () { return _this.data; }));\n        };\n        DynamicDataSource.prototype.disconnect = function (collectionViewer) { };\n        /** Handle expand/collapse behaviors */\n        DynamicDataSource.prototype.handleTreeControl = function (change) {\n            var _this = this;\n            if (change.added) {\n                change.added.forEach(function (node) { return _this.toggleNode(node, true); });\n            }\n            if (change.removed) {\n                change.removed.slice().reverse().forEach(function (node) { return _this.toggleNode(node, false); });\n            }\n        };\n        /**\n         * Toggle the node, remove from display list\n         */\n        DynamicDataSource.prototype.toggleNode = function (node, expand) {\n            var _this = this;\n            var children = this._database.getChildren(node.item);\n            var index = this.data.indexOf(node);\n            if (!children || index < 0) { // If no children, or cannot find the node, no op\n                return;\n            }\n            node.isLoading = true;\n            setTimeout(function () {\n                var _a;\n                if (expand) {\n                    var nodes = children.map(function (name) {\n                        return new DynamicFlatNode(name, node.level + 1, _this._database.isExpandable(name));\n                    });\n                    (_a = _this.data).splice.apply(_a, tslib.__spread([index + 1, 0], nodes));\n                }\n                else {\n                    var count = 0;\n                    for (var i = index + 1; i < _this.data.length\n                        && _this.data[i].level > node.level; i++, count++) { }\n                    _this.data.splice(index + 1, count);\n                }\n                // notify the change\n                _this.dataChange.next(_this.data);\n                node.isLoading = false;\n            }, 1000);\n        };\n        DynamicDataSource.decorators = [\n            { type: i0.Injectable },\n        ];\n        /** @nocollapse */\n        DynamicDataSource.ctorParameters = function () { return [\n            { type: i1$1.FlatTreeControl },\n            { type: DynamicDatabase }\n        ]; };\n        DynamicDataSource.ɵfac = function DynamicDataSource_Factory(t) { return new (t || DynamicDataSource)(i0.ɵɵinject(i1$1.FlatTreeControl), i0.ɵɵinject(DynamicDatabase)); };\n        DynamicDataSource.ɵprov = i0.ɵɵdefineInjectable({ token: DynamicDataSource, factory: function (t) { return DynamicDataSource.ɵfac(t); }, providedIn: null });\n        return DynamicDataSource;\n    }());\n    /*@__PURE__*/ i0.ɵsetClassMetadata(DynamicDataSource, [{\n            type: i0.Injectable\n        }], function () { return [{ type: i1$1.FlatTreeControl }, { type: DynamicDatabase }]; }, null);\n    /**\n     * @title Tree with dynamic data\n     */\n    var TreeDynamicExample = /** @class */ (function () {\n        function TreeDynamicExample(database) {\n            this.getLevel = function (node) { return node.level; };\n            this.isExpandable = function (node) { return node.expandable; };\n            this.hasChild = function (_, _nodeData) { return _nodeData.expandable; };\n            this.treeControl = new i1$1.FlatTreeControl(this.getLevel, this.isExpandable);\n            this.dataSource = new DynamicDataSource(this.treeControl, database);\n            this.dataSource.data = database.initialData();\n        }\n        TreeDynamicExample.decorators = [\n            { type: i0.Component, args: [{\n                        selector: 'tree-dynamic-example',\n                        templateUrl: 'tree-dynamic-example.html',\n                        styleUrls: ['tree-dynamic-example.css'],\n                        providers: [DynamicDatabase]\n                    },] },\n        ];\n        /** @nocollapse */\n        TreeDynamicExample.ctorParameters = function () { return [\n            { type: DynamicDatabase }\n        ]; };\n        TreeDynamicExample.ɵfac = function TreeDynamicExample_Factory(t) { return new (t || TreeDynamicExample)(i0.ɵɵdirectiveInject(DynamicDatabase)); };\n        TreeDynamicExample.ɵcmp = i0.ɵɵdefineComponent({ type: TreeDynamicExample, selectors: [[\"tree-dynamic-example\"]], features: [i0.ɵɵProvidersFeature([DynamicDatabase])], decls: 3, vars: 3, consts: [[3, \"dataSource\", \"treeControl\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [\"matTreeNodePadding\", \"\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\"], [1, \"mat-icon-rtl-mirror\"], [\"mode\", \"indeterminate\", \"class\", \"example-tree-progress-bar\", 4, \"ngIf\"], [\"mode\", \"indeterminate\", 1, \"example-tree-progress-bar\"]], template: function TreeDynamicExample_Template(rf, ctx) { if (rf & 1) {\n                i0.ɵɵelementStart(0, \"mat-tree\", 0);\n                i0.ɵɵtemplate(1, TreeDynamicExample_mat_tree_node_1_Template, 3, 1, \"mat-tree-node\", 1);\n                i0.ɵɵtemplate(2, TreeDynamicExample_mat_tree_node_2_Template, 6, 4, \"mat-tree-node\", 2);\n                i0.ɵɵelementEnd();\n            } if (rf & 2) {\n                i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n                i0.ɵɵadvance(2);\n                i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n            } }, directives: [i1.MatTree, i1.MatTreeNodeDef, i1.MatTreeNode, i1.MatTreeNodePadding, i2.MatButton, i1.MatTreeNodeToggle, i3$1.MatIcon, i5.NgIf, i6.MatProgressBar], styles: [\".example-tree-progress-bar[_ngcontent-%COMP%] {\\n  margin-left: 30px;\\n}\"] });\n        return TreeDynamicExample;\n    }());\n    /*@__PURE__*/ i0.ɵsetClassMetadata(TreeDynamicExample, [{\n            type: i0.Component,\n            args: [{\n                    selector: 'tree-dynamic-example',\n                    templateUrl: 'tree-dynamic-example.html',\n                    styleUrls: ['tree-dynamic-example.css'],\n                    providers: [DynamicDatabase]\n                }]\n        }], function () { return [{ type: DynamicDatabase }]; }, null);\n\n    function TreeFlatOverviewExample_mat_tree_node_1_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-tree-node\", 3);\n        i0.ɵɵelement(1, \"button\", 4);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var node_r21 = ctx.$implicit;\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", node_r21.name, \" \");\n    } }\n    function TreeFlatOverviewExample_mat_tree_node_2_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-tree-node\", 3);\n        i0.ɵɵelementStart(1, \"button\", 5);\n        i0.ɵɵelementStart(2, \"mat-icon\", 6);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var node_r22 = ctx.$implicit;\n        var ctx_r20 = i0.ɵɵnextContext();\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"aria-label\", \"toggle \" + node_r22.name);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx_r20.treeControl.isExpanded(node_r22) ? \"expand_more\" : \"chevron_right\", \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", node_r22.name, \" \");\n    } }\n    var TREE_DATA$1 = [\n        {\n            name: 'Fruit',\n            children: [\n                { name: 'Apple' },\n                { name: 'Banana' },\n                { name: 'Fruit loops' },\n            ]\n        }, {\n            name: 'Vegetables',\n            children: [\n                {\n                    name: 'Green',\n                    children: [\n                        { name: 'Broccoli' },\n                        { name: 'Brussel sprouts' },\n                    ]\n                }, {\n                    name: 'Orange',\n                    children: [\n                        { name: 'Pumpkins' },\n                        { name: 'Carrots' },\n                    ]\n                },\n            ]\n        },\n    ];\n    /**\n     * @title Tree with flat nodes\n     */\n    var TreeFlatOverviewExample = /** @class */ (function () {\n        function TreeFlatOverviewExample() {\n            this._transformer = function (node, level) {\n                return {\n                    expandable: !!node.children && node.children.length > 0,\n                    name: node.name,\n                    level: level,\n                };\n            };\n            this.treeControl = new i1$1.FlatTreeControl(function (node) { return node.level; }, function (node) { return node.expandable; });\n            this.treeFlattener = new i1.MatTreeFlattener(this._transformer, function (node) { return node.level; }, function (node) { return node.expandable; }, function (node) { return node.children; });\n            this.dataSource = new i1.MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n            this.hasChild = function (_, node) { return node.expandable; };\n            this.dataSource.data = TREE_DATA$1;\n        }\n        TreeFlatOverviewExample.decorators = [\n            { type: i0.Component, args: [{\n                        selector: 'tree-flat-overview-example',\n                        templateUrl: 'tree-flat-overview-example.html',\n                        styleUrls: ['tree-flat-overview-example.css'],\n                    },] },\n        ];\n        /** @nocollapse */\n        TreeFlatOverviewExample.ctorParameters = function () { return []; };\n        TreeFlatOverviewExample.ɵfac = function TreeFlatOverviewExample_Factory(t) { return new (t || TreeFlatOverviewExample)(); };\n        TreeFlatOverviewExample.ɵcmp = i0.ɵɵdefineComponent({ type: TreeFlatOverviewExample, selectors: [[\"tree-flat-overview-example\"]], decls: 3, vars: 3, consts: [[3, \"dataSource\", \"treeControl\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [\"matTreeNodePadding\", \"\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\"], [1, \"mat-icon-rtl-mirror\"]], template: function TreeFlatOverviewExample_Template(rf, ctx) { if (rf & 1) {\n                i0.ɵɵelementStart(0, \"mat-tree\", 0);\n                i0.ɵɵtemplate(1, TreeFlatOverviewExample_mat_tree_node_1_Template, 3, 1, \"mat-tree-node\", 1);\n                i0.ɵɵtemplate(2, TreeFlatOverviewExample_mat_tree_node_2_Template, 5, 3, \"mat-tree-node\", 2);\n                i0.ɵɵelementEnd();\n            } if (rf & 2) {\n                i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n                i0.ɵɵadvance(2);\n                i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n            } }, directives: [i1.MatTree, i1.MatTreeNodeDef, i1.MatTreeNode, i1.MatTreeNodePadding, i2.MatButton, i1.MatTreeNodeToggle, i3$1.MatIcon], styles: [\"\"] });\n        return TreeFlatOverviewExample;\n    }());\n    /*@__PURE__*/ i0.ɵsetClassMetadata(TreeFlatOverviewExample, [{\n            type: i0.Component,\n            args: [{\n                    selector: 'tree-flat-overview-example',\n                    templateUrl: 'tree-flat-overview-example.html',\n                    styleUrls: ['tree-flat-overview-example.css'],\n                }]\n        }], function () { return []; }, null);\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function TreeLoadmoreExample_mat_tree_node_1_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-tree-node\", 4);\n        i0.ɵɵelement(1, \"button\", 5);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var node_r26 = ctx.$implicit;\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", node_r26.item, \" \");\n    } }\n    function TreeLoadmoreExample_mat_tree_node_2_Template(rf, ctx) { if (rf & 1) {\n        var _r29 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"mat-tree-node\", 4);\n        i0.ɵɵelementStart(1, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function TreeLoadmoreExample_mat_tree_node_2_Template_button_click_1_listener($event) { i0.ɵɵrestoreView(_r29); var node_r27 = ctx.$implicit; var ctx_r28 = i0.ɵɵnextContext(); return ctx_r28.loadChildren(node_r27); });\n        i0.ɵɵelementStart(2, \"mat-icon\", 7);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var node_r27 = ctx.$implicit;\n        var ctx_r24 = i0.ɵɵnextContext();\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"aria-label\", \"toggle \" + node_r27.filename);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx_r24.treeControl.isExpanded(node_r27) ? \"expand_more\" : \"chevron_right\", \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", node_r27.item, \" \");\n    } }\n    function TreeLoadmoreExample_mat_tree_node_3_Template(rf, ctx) { if (rf & 1) {\n        var _r32 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"mat-tree-node\");\n        i0.ɵɵelementStart(1, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function TreeLoadmoreExample_mat_tree_node_3_Template_button_click_1_listener($event) { i0.ɵɵrestoreView(_r32); var node_r30 = ctx.$implicit; var ctx_r31 = i0.ɵɵnextContext(); return ctx_r31.loadMore(node_r30.loadMoreParentItem); });\n        i0.ɵɵtext(2, \" Load more... \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } }\n    var LOAD_MORE = 'LOAD_MORE';\n    /** Nested node */\n    var LoadmoreNode = /** @class */ (function () {\n        function LoadmoreNode(item, hasChildren, loadMoreParentItem) {\n            if (hasChildren === void 0) { hasChildren = false; }\n            if (loadMoreParentItem === void 0) { loadMoreParentItem = null; }\n            this.item = item;\n            this.hasChildren = hasChildren;\n            this.loadMoreParentItem = loadMoreParentItem;\n            this.childrenChange = new rxjs.BehaviorSubject([]);\n        }\n        Object.defineProperty(LoadmoreNode.prototype, \"children\", {\n            get: function () {\n                return this.childrenChange.value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return LoadmoreNode;\n    }());\n    /** Flat node with expandable and level information */\n    var LoadmoreFlatNode = /** @class */ (function () {\n        function LoadmoreFlatNode(item, level, expandable, loadMoreParentItem) {\n            if (level === void 0) { level = 1; }\n            if (expandable === void 0) { expandable = false; }\n            if (loadMoreParentItem === void 0) { loadMoreParentItem = null; }\n            this.item = item;\n            this.level = level;\n            this.expandable = expandable;\n            this.loadMoreParentItem = loadMoreParentItem;\n        }\n        return LoadmoreFlatNode;\n    }());\n    /**\n     * A database that only load part of the data initially. After user clicks on the `Load more`\n     * button, more data will be loaded.\n     */\n    var LoadmoreDatabase = /** @class */ (function () {\n        function LoadmoreDatabase() {\n            this.batchNumber = 5;\n            this.dataChange = new rxjs.BehaviorSubject([]);\n            this.nodeMap = new Map();\n            /** The data */\n            this.rootLevelNodes = ['Vegetables', 'Fruits'];\n            this.dataMap = new Map([\n                ['Fruits', ['Apple', 'Orange', 'Banana']],\n                ['Vegetables', ['Tomato', 'Potato', 'Onion']],\n                ['Apple', ['Fuji', 'Macintosh']],\n                ['Onion', ['Yellow', 'White', 'Purple', 'Green', 'Shallot', 'Sweet', 'Red', 'Leek']],\n            ]);\n        }\n        LoadmoreDatabase.prototype.initialize = function () {\n            var _this = this;\n            var data = this.rootLevelNodes.map(function (name) { return _this._generateNode(name); });\n            this.dataChange.next(data);\n        };\n        /** Expand a node whose children are not loaded */\n        LoadmoreDatabase.prototype.loadMore = function (item, onlyFirstTime) {\n            var _this = this;\n            if (onlyFirstTime === void 0) { onlyFirstTime = false; }\n            if (!this.nodeMap.has(item) || !this.dataMap.has(item)) {\n                return;\n            }\n            var parent = this.nodeMap.get(item);\n            var children = this.dataMap.get(item);\n            if (onlyFirstTime && parent.children.length > 0) {\n                return;\n            }\n            var newChildrenNumber = parent.children.length + this.batchNumber;\n            var nodes = children.slice(0, newChildrenNumber)\n                .map(function (name) { return _this._generateNode(name); });\n            if (newChildrenNumber < children.length) {\n                // Need a new load more node\n                nodes.push(new LoadmoreNode(LOAD_MORE, false, item));\n            }\n            parent.childrenChange.next(nodes);\n            this.dataChange.next(this.dataChange.value);\n        };\n        LoadmoreDatabase.prototype._generateNode = function (item) {\n            if (this.nodeMap.has(item)) {\n                return this.nodeMap.get(item);\n            }\n            var result = new LoadmoreNode(item, this.dataMap.has(item));\n            this.nodeMap.set(item, result);\n            return result;\n        };\n        LoadmoreDatabase.decorators = [\n            { type: i0.Injectable },\n        ];\n        LoadmoreDatabase.ɵfac = function LoadmoreDatabase_Factory(t) { return new (t || LoadmoreDatabase)(); };\n        LoadmoreDatabase.ɵprov = i0.ɵɵdefineInjectable({ token: LoadmoreDatabase, factory: function (t) { return LoadmoreDatabase.ɵfac(t); }, providedIn: null });\n        return LoadmoreDatabase;\n    }());\n    /*@__PURE__*/ i0.ɵsetClassMetadata(LoadmoreDatabase, [{\n            type: i0.Injectable\n        }], null, null);\n    /**\n     * @title Tree with partially loaded data\n     */\n    var TreeLoadmoreExample = /** @class */ (function () {\n        function TreeLoadmoreExample(_database) {\n            var _this = this;\n            this._database = _database;\n            this.nodeMap = new Map();\n            this.getChildren = function (node) { return node.childrenChange; };\n            this.transformer = function (node, level) {\n                var existingNode = _this.nodeMap.get(node.item);\n                if (existingNode) {\n                    return existingNode;\n                }\n                var newNode = new LoadmoreFlatNode(node.item, level, node.hasChildren, node.loadMoreParentItem);\n                _this.nodeMap.set(node.item, newNode);\n                return newNode;\n            };\n            this.getLevel = function (node) { return node.level; };\n            this.isExpandable = function (node) { return node.expandable; };\n            this.hasChild = function (_, _nodeData) { return _nodeData.expandable; };\n            this.isLoadMore = function (_, _nodeData) { return _nodeData.item === LOAD_MORE; };\n            this.treeFlattener = new i1.MatTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n            this.treeControl = new i1$1.FlatTreeControl(this.getLevel, this.isExpandable);\n            this.dataSource = new i1.MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n            _database.dataChange.subscribe(function (data) {\n                _this.dataSource.data = data;\n            });\n            _database.initialize();\n        }\n        /** Load more nodes from data source */\n        TreeLoadmoreExample.prototype.loadMore = function (item) {\n            this._database.loadMore(item);\n        };\n        TreeLoadmoreExample.prototype.loadChildren = function (node) {\n            this._database.loadMore(node.item, true);\n        };\n        TreeLoadmoreExample.decorators = [\n            { type: i0.Component, args: [{\n                        selector: 'tree-loadmore-example',\n                        templateUrl: 'tree-loadmore-example.html',\n                        styleUrls: ['tree-loadmore-example.css'],\n                        providers: [LoadmoreDatabase]\n                    },] },\n        ];\n        /** @nocollapse */\n        TreeLoadmoreExample.ctorParameters = function () { return [\n            { type: LoadmoreDatabase }\n        ]; };\n        TreeLoadmoreExample.ɵfac = function TreeLoadmoreExample_Factory(t) { return new (t || TreeLoadmoreExample)(i0.ɵɵdirectiveInject(LoadmoreDatabase)); };\n        TreeLoadmoreExample.ɵcmp = i0.ɵɵdefineComponent({ type: TreeLoadmoreExample, selectors: [[\"tree-loadmore-example\"]], features: [i0.ɵɵProvidersFeature([LoadmoreDatabase])], decls: 4, vars: 4, consts: [[3, \"dataSource\", \"treeControl\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [\"matTreeNodePadding\", \"\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\", 3, \"click\"], [1, \"mat-icon-rtl-mirror\"], [\"mat-button\", \"\", 3, \"click\"]], template: function TreeLoadmoreExample_Template(rf, ctx) { if (rf & 1) {\n                i0.ɵɵelementStart(0, \"mat-tree\", 0);\n                i0.ɵɵtemplate(1, TreeLoadmoreExample_mat_tree_node_1_Template, 3, 1, \"mat-tree-node\", 1);\n                i0.ɵɵtemplate(2, TreeLoadmoreExample_mat_tree_node_2_Template, 5, 3, \"mat-tree-node\", 2);\n                i0.ɵɵtemplate(3, TreeLoadmoreExample_mat_tree_node_3_Template, 3, 0, \"mat-tree-node\", 3);\n                i0.ɵɵelementEnd();\n            } if (rf & 2) {\n                i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n                i0.ɵɵadvance(2);\n                i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n                i0.ɵɵadvance(1);\n                i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.isLoadMore);\n            } }, directives: [i1.MatTree, i1.MatTreeNodeDef, i1.MatTreeNode, i1.MatTreeNodePadding, i2.MatButton, i1.MatTreeNodeToggle, i3$1.MatIcon], styles: [\"\"] });\n        return TreeLoadmoreExample;\n    }());\n    /*@__PURE__*/ i0.ɵsetClassMetadata(TreeLoadmoreExample, [{\n            type: i0.Component,\n            args: [{\n                    selector: 'tree-loadmore-example',\n                    templateUrl: 'tree-loadmore-example.html',\n                    styleUrls: ['tree-loadmore-example.css'],\n                    providers: [LoadmoreDatabase]\n                }]\n        }], function () { return [{ type: LoadmoreDatabase }]; }, null);\n\n    function TreeNestedOverviewExample_mat_tree_node_1_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-tree-node\", 3);\n        i0.ɵɵelementStart(1, \"li\", 4);\n        i0.ɵɵelement(2, \"button\", 5);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var node_r35 = ctx.$implicit;\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", node_r35.name, \" \");\n    } }\n    function TreeNestedOverviewExample_mat_nested_tree_node_2_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-nested-tree-node\");\n        i0.ɵɵelementStart(1, \"li\");\n        i0.ɵɵelementStart(2, \"div\", 4);\n        i0.ɵɵelementStart(3, \"button\", 6);\n        i0.ɵɵelementStart(4, \"mat-icon\", 7);\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"ul\");\n        i0.ɵɵelementContainer(8, 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var node_r36 = ctx.$implicit;\n        var ctx_r34 = i0.ɵɵnextContext();\n        i0.ɵɵadvance(3);\n        i0.ɵɵattribute(\"aria-label\", \"toggle \" + node_r36.name);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx_r34.treeControl.isExpanded(node_r36) ? \"expand_more\" : \"chevron_right\", \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", node_r36.name, \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"example-tree-invisible\", !ctx_r34.treeControl.isExpanded(node_r36));\n    } }\n    var TREE_DATA$2 = [\n        {\n            name: 'Fruit',\n            children: [\n                { name: 'Apple' },\n                { name: 'Banana' },\n                { name: 'Fruit loops' },\n            ]\n        }, {\n            name: 'Vegetables',\n            children: [\n                {\n                    name: 'Green',\n                    children: [\n                        { name: 'Broccoli' },\n                        { name: 'Brussel sprouts' },\n                    ]\n                }, {\n                    name: 'Orange',\n                    children: [\n                        { name: 'Pumpkins' },\n                        { name: 'Carrots' },\n                    ]\n                },\n            ]\n        },\n    ];\n    /**\n     * @title Tree with nested nodes\n     */\n    var TreeNestedOverviewExample = /** @class */ (function () {\n        function TreeNestedOverviewExample() {\n            this.treeControl = new i1$1.NestedTreeControl(function (node) { return node.children; });\n            this.dataSource = new i1.MatTreeNestedDataSource();\n            this.hasChild = function (_, node) { return !!node.children && node.children.length > 0; };\n            this.dataSource.data = TREE_DATA$2;\n        }\n        TreeNestedOverviewExample.decorators = [\n            { type: i0.Component, args: [{\n                        selector: 'tree-nested-overview-example',\n                        templateUrl: 'tree-nested-overview-example.html',\n                        styleUrls: ['tree-nested-overview-example.css'],\n                    },] },\n        ];\n        /** @nocollapse */\n        TreeNestedOverviewExample.ctorParameters = function () { return []; };\n        TreeNestedOverviewExample.ɵfac = function TreeNestedOverviewExample_Factory(t) { return new (t || TreeNestedOverviewExample)(); };\n        TreeNestedOverviewExample.ɵcmp = i0.ɵɵdefineComponent({ type: TreeNestedOverviewExample, selectors: [[\"tree-nested-overview-example\"]], decls: 3, vars: 3, consts: [[1, \"example-tree\", 3, \"dataSource\", \"treeControl\"], [\"matTreeNodeToggle\", \"\", 4, \"matTreeNodeDef\"], [4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [\"matTreeNodeToggle\", \"\"], [1, \"mat-tree-node\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\"], [1, \"mat-icon-rtl-mirror\"], [\"matTreeNodeOutlet\", \"\"]], template: function TreeNestedOverviewExample_Template(rf, ctx) { if (rf & 1) {\n                i0.ɵɵelementStart(0, \"mat-tree\", 0);\n                i0.ɵɵtemplate(1, TreeNestedOverviewExample_mat_tree_node_1_Template, 4, 1, \"mat-tree-node\", 1);\n                i0.ɵɵtemplate(2, TreeNestedOverviewExample_mat_nested_tree_node_2_Template, 9, 4, \"mat-nested-tree-node\", 2);\n                i0.ɵɵelementEnd();\n            } if (rf & 2) {\n                i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n                i0.ɵɵadvance(2);\n                i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n            } }, directives: [i1.MatTree, i1.MatTreeNodeDef, i1.MatTreeNode, i1.MatTreeNodeToggle, i2.MatButton, i1.MatNestedTreeNode, i3$1.MatIcon, i1.MatTreeNodeOutlet], styles: [\".example-tree-invisible[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.example-tree[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%], .example-tree[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\\n  margin-top: 0;\\n  margin-bottom: 0;\\n  list-style-type: none;\\n}\"] });\n        return TreeNestedOverviewExample;\n    }());\n    /*@__PURE__*/ i0.ɵsetClassMetadata(TreeNestedOverviewExample, [{\n            type: i0.Component,\n            args: [{\n                    selector: 'tree-nested-overview-example',\n                    templateUrl: 'tree-nested-overview-example.html',\n                    styleUrls: ['tree-nested-overview-example.css'],\n                }]\n        }], function () { return []; }, null);\n\n    var EXAMPLES = [\n        TreeChecklistExample,\n        TreeDynamicExample,\n        TreeFlatOverviewExample,\n        TreeLoadmoreExample,\n        TreeNestedOverviewExample,\n    ];\n    var TreeExamplesModule = /** @class */ (function () {\n        function TreeExamplesModule() {\n        }\n        TreeExamplesModule.decorators = [\n            { type: i0.NgModule, args: [{\n                        imports: [\n                            i5.CommonModule,\n                            i2.MatButtonModule,\n                            i3.MatCheckboxModule,\n                            i3$1.MatIconModule,\n                            i5$1.MatInputModule,\n                            i6.MatProgressBarModule,\n                            i1.MatTreeModule,\n                        ],\n                        declarations: EXAMPLES,\n                        exports: EXAMPLES,\n                    },] },\n        ];\n        TreeExamplesModule.ɵmod = i0.ɵɵdefineNgModule({ type: TreeExamplesModule });\n        TreeExamplesModule.ɵinj = i0.ɵɵdefineInjector({ factory: function TreeExamplesModule_Factory(t) { return new (t || TreeExamplesModule)(); }, imports: [[\n                    i5.CommonModule,\n                    i2.MatButtonModule,\n                    i3.MatCheckboxModule,\n                    i3$1.MatIconModule,\n                    i5$1.MatInputModule,\n                    i6.MatProgressBarModule,\n                    i1.MatTreeModule,\n                ]] });\n        return TreeExamplesModule;\n    }());\n    /*@__PURE__*/ i0.ɵɵsetNgModuleScope(TreeExamplesModule, { declarations: [TreeChecklistExample,\n            TreeDynamicExample,\n            TreeFlatOverviewExample,\n            TreeLoadmoreExample,\n            TreeNestedOverviewExample], imports: [i5.CommonModule,\n            i2.MatButtonModule,\n            i3.MatCheckboxModule,\n            i3$1.MatIconModule,\n            i5$1.MatInputModule,\n            i6.MatProgressBarModule,\n            i1.MatTreeModule], exports: [TreeChecklistExample,\n            TreeDynamicExample,\n            TreeFlatOverviewExample,\n            TreeLoadmoreExample,\n            TreeNestedOverviewExample] });\n    /*@__PURE__*/ i0.ɵsetClassMetadata(TreeExamplesModule, [{\n            type: i0.NgModule,\n            args: [{\n                    imports: [\n                        i5.CommonModule,\n                        i2.MatButtonModule,\n                        i3.MatCheckboxModule,\n                        i3$1.MatIconModule,\n                        i5$1.MatInputModule,\n                        i6.MatProgressBarModule,\n                        i1.MatTreeModule,\n                    ],\n                    declarations: EXAMPLES,\n                    exports: EXAMPLES,\n                }]\n        }], null, null);\n\n    exports.TreeChecklistExample = TreeChecklistExample;\n    exports.TreeDynamicExample = TreeDynamicExample;\n    exports.TreeFlatOverviewExample = TreeFlatOverviewExample;\n    exports.TreeLoadmoreExample = TreeLoadmoreExample;\n    exports.TreeNestedOverviewExample = TreeNestedOverviewExample;\n    exports.TreeExamplesModule = TreeExamplesModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=components-examples-material-tree.umd.js.map\n"]}