{"version":3,"sources":["src/components-examples/components-examples-material-tree.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","componentsExamples","material","tree","common","core","button","checkbox","icon","input","progressBar","tslib","cdk","collections","rxjs","formField","operators","this","i4","i0","i2","i3","i3$1","i5","i5$1","i1","i4$1","TreeChecklistExample_mat_tree_node_1_Template","rf","ctx","_r5","ɵɵgetCurrentView","ɵɵelementStart","ɵɵelement","ɵɵlistener","TreeChecklistExample_mat_tree_node_1_Template_mat_checkbox_change_2_listener","$event","ɵɵrestoreView","node_r3","$implicit","ɵɵnextContext","todoLeafItemSelectionToggle","ɵɵtext","ɵɵelementEnd","ctx_r0","ɵɵadvance","ɵɵproperty","checklistSelection","isSelected","ɵɵtextInterpolate","item","TreeChecklistExample_mat_tree_node_2_Template","_r9","TreeChecklistExample_mat_tree_node_2_Template_button_click_7_listener","node_r6","_r7","ɵɵreference","saveNode","value","TreeChecklistExample_mat_tree_node_3_Template","_r12","TreeChecklistExample_mat_tree_node_3_Template_mat_checkbox_change_4_listener","node_r10","todoItemSelectionToggle","TreeChecklistExample_mat_tree_node_3_Template_button_click_6_listener","addNewItem","ctx_r2","ɵɵattribute","filename","ɵɵtextInterpolate1","treeControl","isExpanded","descendantsAllSelected","descendantsPartiallySelected","TodoItemNode","TodoItemFlatNode","TREE_DATA","Groceries","Almond Meal flour","Organic eggs","Protein Powder","Fruits","Apple","Berries","Orange","Reminders","ChecklistDatabase","dataChange","BehaviorSubject","initialize","Object","defineProperty","prototype","get","enumerable","configurable","data","buildFileTree","next","obj","level","_this","keys","reduce","accumulator","key","node","children","concat","insertItem","parent","name","push","updateItem","ɵprov","ɵɵdefineInjectable","token","ɵfac","ChecklistDatabase_Factory","t","TreeChecklistExample","_database","flatNodeMap","Map","nestedNodeMap","selectedParent","newItemName","SelectionModel","getLevel","isExpandable","expandable","getChildren","hasChild","_","_nodeData","hasNoContent","transformer","existingNode","flatNode","set","treeFlattener","MatTreeFlattener","FlatTreeControl","dataSource","MatTreeFlatDataSource","subscribe","getDescendants","every","child","some","_a","_b","toggle","descendants","select","apply","__spread","deselect","checkAllParentsSelection","getParentNode","checkRootNodeSelection","nodeSelected","descAllSelected","currentLevel","i","dataNodes","indexOf","currentNode","parentNode","expand","itemValue","nestedNode","TreeChecklistExample_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","features","ɵɵProvidersFeature","decls","vars","consts","template","TreeChecklistExample_Template","ɵɵtemplate","directives","MatTree","MatTreeNodeDef","MatTreeNode","MatTreeNodeToggle","MatTreeNodePadding","MatButton","MatCheckbox","MatFormField","MatLabel","MatInput","MatIcon","styles","TreeDynamicExample_mat_tree_node_1_Template","node_r16","TreeDynamicExample_mat_tree_node_2_mat_progress_bar_5_Template","TreeDynamicExample_mat_tree_node_2_Template","node_r17","ctx_r15","isLoading","DynamicFlatNode","DynamicDatabase","dataMap","rootLevelNodes","initialData","map","has","DynamicDatabase_Factory","providedIn","DynamicDataSource","_treeControl","connect","collectionViewer","expansionModel","changed","change","added","removed","handleTreeControl","merge","viewChange","pipe","disconnect","forEach","toggleNode","slice","reverse","index","setTimeout","nodes","splice","count","length","TreeDynamicExample","database","TreeDynamicExample_Factory","TreeDynamicExample_Template","NgIf","MatProgressBar","TreeFlatOverviewExample_mat_tree_node_1_Template","node_r21","TreeFlatOverviewExample_mat_tree_node_2_Template","node_r22","ctx_r20","TREE_DATA$1","TreeFlatOverviewExample","_transformer","TreeFlatOverviewExample_Factory","TreeFlatOverviewExample_Template","TreeLoadmoreExample_mat_tree_node_1_Template","node_r26","TreeLoadmoreExample_mat_tree_node_2_Template","_r29","TreeLoadmoreExample_mat_tree_node_2_Template_button_click_1_listener","node_r27","loadChildren","ctx_r24","TreeLoadmoreExample_mat_tree_node_3_Template","_r32","TreeLoadmoreExample_mat_tree_node_3_Template_button_click_1_listener","node_r30","loadMore","loadMoreParentItem","LOAD_MORE","LoadmoreNode","hasChildren","childrenChange","LoadmoreFlatNode","LoadmoreDatabase","batchNumber","nodeMap","_generateNode","onlyFirstTime","newChildrenNumber","result","LoadmoreDatabase_Factory","TreeLoadmoreExample","newNode","isLoadMore","TreeLoadmoreExample_Factory","TreeLoadmoreExample_Template","TreeNestedOverviewExample_mat_tree_node_1_Template","node_r35","TreeNestedOverviewExample_mat_nested_tree_node_2_Template","ɵɵelementContainer","node_r36","ctx_r34","ɵɵclassProp","TREE_DATA$2","TreeNestedOverviewExample","NestedTreeControl","MatTreeNestedDataSource","TreeNestedOverviewExample_Factory","TreeNestedOverviewExample_Template","MatNestedTreeNode","MatTreeNodeOutlet","TreeExamplesModule","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","TreeExamplesModule_Factory","imports","CommonModule","MatButtonModule","MatCheckboxModule","MatIconModule","MatInputModule","MatProgressBarModule","MatTreeModule","ngJitMode","ɵɵsetNgModuleScope","declarations"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/material/button'), require('@angular/material/checkbox'), require('@angular/material/icon'), require('@angular/material/input'), require('@angular/material/progress-bar'), require('@angular/material/tree'), require('tslib'), require('@angular/cdk/collections'), require('@angular/cdk/tree'), require('rxjs'), require('@angular/material/form-field'), require('rxjs/operators')) :\n    typeof define === 'function' && define.amd ? define('@angular/components-examples/material/tree', ['exports', '@angular/common', '@angular/core', '@angular/material/button', '@angular/material/checkbox', '@angular/material/icon', '@angular/material/input', '@angular/material/progress-bar', '@angular/material/tree', 'tslib', '@angular/cdk/collections', '@angular/cdk/tree', 'rxjs', '@angular/material/form-field', 'rxjs/operators'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.componentsExamples = global.ng.componentsExamples || {}, global.ng.componentsExamples.material = global.ng.componentsExamples.material || {}, global.ng.componentsExamples.material.tree = {}), global.ng.common, global.ng.core, global.ng.material.button, global.ng.material.checkbox, global.ng.material.icon, global.ng.material.input, global.ng.material.progressBar, global.ng.material.tree, global.tslib, global.ng.cdk.collections, global.ng.cdk.tree, global.rxjs, global.ng.material.formField, global.rxjs.operators));\n}(this, (function (exports, i4, i0, i2, i3, i3$1, i5, i5$1, i1, tslib, collections, tree, rxjs, i4$1, operators) { 'use strict';\n\n    function TreeChecklistExample_mat_tree_node_1_Template(rf, ctx) { if (rf & 1) {\n        var _r5 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"mat-tree-node\", 3);\n        i0.ɵɵelement(1, \"button\", 4);\n        i0.ɵɵelementStart(2, \"mat-checkbox\", 5);\n        i0.ɵɵlistener(\"change\", function TreeChecklistExample_mat_tree_node_1_Template_mat_checkbox_change_2_listener($event) { i0.ɵɵrestoreView(_r5); var node_r3 = ctx.$implicit; var ctx_r4 = i0.ɵɵnextContext(); return ctx_r4.todoLeafItemSelectionToggle(node_r3); });\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var node_r3 = ctx.$implicit;\n        var ctx_r0 = i0.ɵɵnextContext();\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"checked\", ctx_r0.checklistSelection.isSelected(node_r3));\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(node_r3.item);\n    } }\n    function TreeChecklistExample_mat_tree_node_2_Template(rf, ctx) { if (rf & 1) {\n        var _r9 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"mat-tree-node\", 6);\n        i0.ɵɵelement(1, \"button\", 4);\n        i0.ɵɵelementStart(2, \"mat-form-field\");\n        i0.ɵɵelementStart(3, \"mat-label\");\n        i0.ɵɵtext(4, \"New item...\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"input\", 7, 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"button\", 9);\n        i0.ɵɵlistener(\"click\", function TreeChecklistExample_mat_tree_node_2_Template_button_click_7_listener($event) { i0.ɵɵrestoreView(_r9); var node_r6 = ctx.$implicit; var _r7 = i0.ɵɵreference(6); var ctx_r8 = i0.ɵɵnextContext(); return ctx_r8.saveNode(node_r6, _r7.value); });\n        i0.ɵɵtext(8, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } }\n    function TreeChecklistExample_mat_tree_node_3_Template(rf, ctx) { if (rf & 1) {\n        var _r12 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"mat-tree-node\", 6);\n        i0.ɵɵelementStart(1, \"button\", 10);\n        i0.ɵɵelementStart(2, \"mat-icon\", 11);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"mat-checkbox\", 12);\n        i0.ɵɵlistener(\"change\", function TreeChecklistExample_mat_tree_node_3_Template_mat_checkbox_change_4_listener($event) { i0.ɵɵrestoreView(_r12); var node_r10 = ctx.$implicit; var ctx_r11 = i0.ɵɵnextContext(); return ctx_r11.todoItemSelectionToggle(node_r10); });\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"button\", 13);\n        i0.ɵɵlistener(\"click\", function TreeChecklistExample_mat_tree_node_3_Template_button_click_6_listener($event) { i0.ɵɵrestoreView(_r12); var node_r10 = ctx.$implicit; var ctx_r13 = i0.ɵɵnextContext(); return ctx_r13.addNewItem(node_r10); });\n        i0.ɵɵelementStart(7, \"mat-icon\");\n        i0.ɵɵtext(8, \"add\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var node_r10 = ctx.$implicit;\n        var ctx_r2 = i0.ɵɵnextContext();\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"aria-label\", \"toggle \" + node_r10.filename);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx_r2.treeControl.isExpanded(node_r10) ? \"expand_more\" : \"chevron_right\", \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"checked\", ctx_r2.descendantsAllSelected(node_r10))(\"indeterminate\", ctx_r2.descendantsPartiallySelected(node_r10));\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(node_r10.item);\n    } }\n    /**\n     * Node for to-do item\n     */\n    var TodoItemNode = /** @class */ (function () {\n        function TodoItemNode() {\n        }\n        return TodoItemNode;\n    }());\n    /** Flat to-do item node with expandable and level information */\n    var TodoItemFlatNode = /** @class */ (function () {\n        function TodoItemFlatNode() {\n        }\n        return TodoItemFlatNode;\n    }());\n    /**\n     * The Json object for to-do list data.\n     */\n    var TREE_DATA = {\n        Groceries: {\n            'Almond Meal flour': null,\n            'Organic eggs': null,\n            'Protein Powder': null,\n            Fruits: {\n                Apple: null,\n                Berries: ['Blueberry', 'Raspberry'],\n                Orange: null\n            }\n        },\n        Reminders: [\n            'Cook dinner',\n            'Read the Material Design spec',\n            'Upgrade Application to Angular'\n        ]\n    };\n    /**\n     * Checklist database, it can build a tree structured Json object.\n     * Each node in Json object represents a to-do item or a category.\n     * If a node is a category, it has children items and new items can be added under the category.\n     */\n    var ChecklistDatabase = /** @class */ (function () {\n        function ChecklistDatabase() {\n            this.dataChange = new rxjs.BehaviorSubject([]);\n            this.initialize();\n        }\n        Object.defineProperty(ChecklistDatabase.prototype, \"data\", {\n            get: function () { return this.dataChange.value; },\n            enumerable: true,\n            configurable: true\n        });\n        ChecklistDatabase.prototype.initialize = function () {\n            // Build the tree nodes from Json object. The result is a list of `TodoItemNode` with nested\n            //     file node as children.\n            var data = this.buildFileTree(TREE_DATA, 0);\n            // Notify the change.\n            this.dataChange.next(data);\n        };\n        /**\n         * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n         * The return value is the list of `TodoItemNode`.\n         */\n        ChecklistDatabase.prototype.buildFileTree = function (obj, level) {\n            var _this = this;\n            return Object.keys(obj).reduce(function (accumulator, key) {\n                var value = obj[key];\n                var node = new TodoItemNode();\n                node.item = key;\n                if (value != null) {\n                    if (typeof value === 'object') {\n                        node.children = _this.buildFileTree(value, level + 1);\n                    }\n                    else {\n                        node.item = value;\n                    }\n                }\n                return accumulator.concat(node);\n            }, []);\n        };\n        /** Add an item to to-do list */\n        ChecklistDatabase.prototype.insertItem = function (parent, name) {\n            if (parent.children) {\n                parent.children.push({ item: name });\n                this.dataChange.next(this.data);\n            }\n        };\n        ChecklistDatabase.prototype.updateItem = function (node, name) {\n            node.item = name;\n            this.dataChange.next(this.data);\n        };\n        ChecklistDatabase.ɵfac = function ChecklistDatabase_Factory(t) { return new (t || ChecklistDatabase)(); };\n        ChecklistDatabase.ɵprov = i0.ɵɵdefineInjectable({ token: ChecklistDatabase, factory: ChecklistDatabase.ɵfac });\n        return ChecklistDatabase;\n    }());\n    /*@__PURE__*/ (function () { i0.ɵsetClassMetadata(ChecklistDatabase, [{\n            type: i0.Injectable\n        }], function () { return []; }, null); })();\n    /**\n     * @title Tree with checkboxes\n     */\n    var TreeChecklistExample = /** @class */ (function () {\n        function TreeChecklistExample(_database) {\n            var _this = this;\n            this._database = _database;\n            /** Map from flat node to nested node. This helps us finding the nested node to be modified */\n            this.flatNodeMap = new Map();\n            /** Map from nested node to flattened node. This helps us to keep the same object for selection */\n            this.nestedNodeMap = new Map();\n            /** A selected parent node to be inserted */\n            this.selectedParent = null;\n            /** The new item's name */\n            this.newItemName = '';\n            /** The selection for checklist */\n            this.checklistSelection = new collections.SelectionModel(true /* multiple */);\n            this.getLevel = function (node) { return node.level; };\n            this.isExpandable = function (node) { return node.expandable; };\n            this.getChildren = function (node) { return node.children; };\n            this.hasChild = function (_, _nodeData) { return _nodeData.expandable; };\n            this.hasNoContent = function (_, _nodeData) { return _nodeData.item === ''; };\n            /**\n             * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\n             */\n            this.transformer = function (node, level) {\n                var existingNode = _this.nestedNodeMap.get(node);\n                var flatNode = existingNode && existingNode.item === node.item\n                    ? existingNode\n                    : new TodoItemFlatNode();\n                flatNode.item = node.item;\n                flatNode.level = level;\n                flatNode.expandable = !!node.children;\n                _this.flatNodeMap.set(flatNode, node);\n                _this.nestedNodeMap.set(node, flatNode);\n                return flatNode;\n            };\n            this.treeFlattener = new i1.MatTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n            this.treeControl = new tree.FlatTreeControl(this.getLevel, this.isExpandable);\n            this.dataSource = new i1.MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n            _database.dataChange.subscribe(function (data) {\n                _this.dataSource.data = data;\n            });\n        }\n        /** Whether all the descendants of the node are selected. */\n        TreeChecklistExample.prototype.descendantsAllSelected = function (node) {\n            var _this = this;\n            var descendants = this.treeControl.getDescendants(node);\n            var descAllSelected = descendants.every(function (child) {\n                return _this.checklistSelection.isSelected(child);\n            });\n            return descAllSelected;\n        };\n        /** Whether part of the descendants are selected */\n        TreeChecklistExample.prototype.descendantsPartiallySelected = function (node) {\n            var _this = this;\n            var descendants = this.treeControl.getDescendants(node);\n            var result = descendants.some(function (child) { return _this.checklistSelection.isSelected(child); });\n            return result && !this.descendantsAllSelected(node);\n        };\n        /** Toggle the to-do item selection. Select/deselect all the descendants node */\n        TreeChecklistExample.prototype.todoItemSelectionToggle = function (node) {\n            var _a, _b;\n            var _this = this;\n            this.checklistSelection.toggle(node);\n            var descendants = this.treeControl.getDescendants(node);\n            this.checklistSelection.isSelected(node)\n                ? (_a = this.checklistSelection).select.apply(_a, tslib.__spread(descendants)) : (_b = this.checklistSelection).deselect.apply(_b, tslib.__spread(descendants));\n            // Force update for the parent\n            descendants.every(function (child) {\n                return _this.checklistSelection.isSelected(child);\n            });\n            this.checkAllParentsSelection(node);\n        };\n        /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\n        TreeChecklistExample.prototype.todoLeafItemSelectionToggle = function (node) {\n            this.checklistSelection.toggle(node);\n            this.checkAllParentsSelection(node);\n        };\n        /* Checks all the parents when a leaf node is selected/unselected */\n        TreeChecklistExample.prototype.checkAllParentsSelection = function (node) {\n            var parent = this.getParentNode(node);\n            while (parent) {\n                this.checkRootNodeSelection(parent);\n                parent = this.getParentNode(parent);\n            }\n        };\n        /** Check root node checked state and change it accordingly */\n        TreeChecklistExample.prototype.checkRootNodeSelection = function (node) {\n            var _this = this;\n            var nodeSelected = this.checklistSelection.isSelected(node);\n            var descendants = this.treeControl.getDescendants(node);\n            var descAllSelected = descendants.every(function (child) {\n                return _this.checklistSelection.isSelected(child);\n            });\n            if (nodeSelected && !descAllSelected) {\n                this.checklistSelection.deselect(node);\n            }\n            else if (!nodeSelected && descAllSelected) {\n                this.checklistSelection.select(node);\n            }\n        };\n        /* Get the parent node of a node */\n        TreeChecklistExample.prototype.getParentNode = function (node) {\n            var currentLevel = this.getLevel(node);\n            if (currentLevel < 1) {\n                return null;\n            }\n            var startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n            for (var i = startIndex; i >= 0; i--) {\n                var currentNode = this.treeControl.dataNodes[i];\n                if (this.getLevel(currentNode) < currentLevel) {\n                    return currentNode;\n                }\n            }\n            return null;\n        };\n        /** Select the category so we can insert the new item. */\n        TreeChecklistExample.prototype.addNewItem = function (node) {\n            var parentNode = this.flatNodeMap.get(node);\n            this._database.insertItem(parentNode, '');\n            this.treeControl.expand(node);\n        };\n        /** Save the node to database */\n        TreeChecklistExample.prototype.saveNode = function (node, itemValue) {\n            var nestedNode = this.flatNodeMap.get(node);\n            this._database.updateItem(nestedNode, itemValue);\n        };\n        TreeChecklistExample.ɵfac = function TreeChecklistExample_Factory(t) { return new (t || TreeChecklistExample)(i0.ɵɵdirectiveInject(ChecklistDatabase)); };\n        TreeChecklistExample.ɵcmp = i0.ɵɵdefineComponent({ type: TreeChecklistExample, selectors: [[\"tree-checklist-example\"]], features: [i0.ɵɵProvidersFeature([ChecklistDatabase])], decls: 4, vars: 4, consts: [[3, \"dataSource\", \"treeControl\"], [\"matTreeNodeToggle\", \"\", \"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [\"matTreeNodeToggle\", \"\", \"matTreeNodePadding\", \"\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [1, \"checklist-leaf-node\", 3, \"checked\", \"change\"], [\"matTreeNodePadding\", \"\"], [\"matInput\", \"\", \"placeholder\", \"Ex. Lettuce\"], [\"itemValue\", \"\"], [\"mat-button\", \"\", 3, \"click\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\"], [1, \"mat-icon-rtl-mirror\"], [3, \"checked\", \"indeterminate\", \"change\"], [\"mat-icon-button\", \"\", 3, \"click\"]], template: function TreeChecklistExample_Template(rf, ctx) { if (rf & 1) {\n                i0.ɵɵelementStart(0, \"mat-tree\", 0);\n                i0.ɵɵtemplate(1, TreeChecklistExample_mat_tree_node_1_Template, 4, 2, \"mat-tree-node\", 1);\n                i0.ɵɵtemplate(2, TreeChecklistExample_mat_tree_node_2_Template, 9, 0, \"mat-tree-node\", 2);\n                i0.ɵɵtemplate(3, TreeChecklistExample_mat_tree_node_3_Template, 9, 5, \"mat-tree-node\", 2);\n                i0.ɵɵelementEnd();\n            } if (rf & 2) {\n                i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n                i0.ɵɵadvance(2);\n                i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasNoContent);\n                i0.ɵɵadvance(1);\n                i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n            } }, directives: [i1.MatTree, i1.MatTreeNodeDef, i1.MatTreeNode, i1.MatTreeNodeToggle, i1.MatTreeNodePadding, i2.MatButton, i3.MatCheckbox, i4$1.MatFormField, i4$1.MatLabel, i5.MatInput, i3$1.MatIcon], styles: [\".mat-form-field[_ngcontent-%COMP%] {\\n  margin-right: 4px;\\n}\"] });\n        return TreeChecklistExample;\n    }());\n    /*@__PURE__*/ (function () { i0.ɵsetClassMetadata(TreeChecklistExample, [{\n            type: i0.Component,\n            args: [{\n                    selector: 'tree-checklist-example',\n                    templateUrl: 'tree-checklist-example.html',\n                    styleUrls: ['tree-checklist-example.css'],\n                    providers: [ChecklistDatabase]\n                }]\n        }], function () { return [{ type: ChecklistDatabase }]; }, null); })();\n\n    function TreeDynamicExample_mat_tree_node_1_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-tree-node\", 3);\n        i0.ɵɵelement(1, \"button\", 4);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var node_r16 = ctx.$implicit;\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", node_r16.item, \" \");\n    } }\n    function TreeDynamicExample_mat_tree_node_2_mat_progress_bar_5_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelement(0, \"mat-progress-bar\", 8);\n    } }\n    function TreeDynamicExample_mat_tree_node_2_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-tree-node\", 3);\n        i0.ɵɵelementStart(1, \"button\", 5);\n        i0.ɵɵelementStart(2, \"mat-icon\", 6);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(4);\n        i0.ɵɵtemplate(5, TreeDynamicExample_mat_tree_node_2_mat_progress_bar_5_Template, 1, 0, \"mat-progress-bar\", 7);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var node_r17 = ctx.$implicit;\n        var ctx_r15 = i0.ɵɵnextContext();\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"aria-label\", \"toggle \" + node_r17.filename);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx_r15.treeControl.isExpanded(node_r17) ? \"expand_more\" : \"chevron_right\", \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", node_r17.item, \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", node_r17.isLoading);\n    } }\n    /** Flat node with expandable and level information */\n    var DynamicFlatNode = /** @class */ (function () {\n        function DynamicFlatNode(item, level, expandable, isLoading) {\n            if (level === void 0) { level = 1; }\n            if (expandable === void 0) { expandable = false; }\n            if (isLoading === void 0) { isLoading = false; }\n            this.item = item;\n            this.level = level;\n            this.expandable = expandable;\n            this.isLoading = isLoading;\n        }\n        return DynamicFlatNode;\n    }());\n    /**\n     * Database for dynamic data. When expanding a node in the tree, the data source will need to fetch\n     * the descendants data from the database.\n     */\n    var DynamicDatabase = /** @class */ (function () {\n        function DynamicDatabase() {\n            this.dataMap = new Map([\n                ['Fruits', ['Apple', 'Orange', 'Banana']],\n                ['Vegetables', ['Tomato', 'Potato', 'Onion']],\n                ['Apple', ['Fuji', 'Macintosh']],\n                ['Onion', ['Yellow', 'White', 'Purple']]\n            ]);\n            this.rootLevelNodes = ['Fruits', 'Vegetables'];\n        }\n        /** Initial data from database */\n        DynamicDatabase.prototype.initialData = function () {\n            return this.rootLevelNodes.map(function (name) { return new DynamicFlatNode(name, 0, true); });\n        };\n        DynamicDatabase.prototype.getChildren = function (node) {\n            return this.dataMap.get(node);\n        };\n        DynamicDatabase.prototype.isExpandable = function (node) {\n            return this.dataMap.has(node);\n        };\n        DynamicDatabase.ɵfac = function DynamicDatabase_Factory(t) { return new (t || DynamicDatabase)(); };\n        DynamicDatabase.ɵprov = i0.ɵɵdefineInjectable({ token: DynamicDatabase, factory: DynamicDatabase.ɵfac, providedIn: 'root' });\n        return DynamicDatabase;\n    }());\n    /*@__PURE__*/ (function () { i0.ɵsetClassMetadata(DynamicDatabase, [{\n            type: i0.Injectable,\n            args: [{ providedIn: 'root' }]\n        }], null, null); })();\n    /**\n     * File database, it can build a tree structured Json object from string.\n     * Each node in Json object represents a file or a directory. For a file, it has filename and type.\n     * For a directory, it has filename and children (a list of files or directories).\n     * The input will be a json object string, and the output is a list of `FileNode` with nested\n     * structure.\n     */\n    var DynamicDataSource = /** @class */ (function () {\n        function DynamicDataSource(_treeControl, _database) {\n            this._treeControl = _treeControl;\n            this._database = _database;\n            this.dataChange = new rxjs.BehaviorSubject([]);\n        }\n        Object.defineProperty(DynamicDataSource.prototype, \"data\", {\n            get: function () { return this.dataChange.value; },\n            set: function (value) {\n                this._treeControl.dataNodes = value;\n                this.dataChange.next(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DynamicDataSource.prototype.connect = function (collectionViewer) {\n            var _this = this;\n            this._treeControl.expansionModel.changed.subscribe(function (change) {\n                if (change.added ||\n                    change.removed) {\n                    _this.handleTreeControl(change);\n                }\n            });\n            return rxjs.merge(collectionViewer.viewChange, this.dataChange).pipe(operators.map(function () { return _this.data; }));\n        };\n        DynamicDataSource.prototype.disconnect = function (collectionViewer) { };\n        /** Handle expand/collapse behaviors */\n        DynamicDataSource.prototype.handleTreeControl = function (change) {\n            var _this = this;\n            if (change.added) {\n                change.added.forEach(function (node) { return _this.toggleNode(node, true); });\n            }\n            if (change.removed) {\n                change.removed.slice().reverse().forEach(function (node) { return _this.toggleNode(node, false); });\n            }\n        };\n        /**\n         * Toggle the node, remove from display list\n         */\n        DynamicDataSource.prototype.toggleNode = function (node, expand) {\n            var _this = this;\n            var children = this._database.getChildren(node.item);\n            var index = this.data.indexOf(node);\n            if (!children || index < 0) { // If no children, or cannot find the node, no op\n                return;\n            }\n            node.isLoading = true;\n            setTimeout(function () {\n                var _a;\n                if (expand) {\n                    var nodes = children.map(function (name) {\n                        return new DynamicFlatNode(name, node.level + 1, _this._database.isExpandable(name));\n                    });\n                    (_a = _this.data).splice.apply(_a, tslib.__spread([index + 1, 0], nodes));\n                }\n                else {\n                    var count = 0;\n                    for (var i = index + 1; i < _this.data.length\n                        && _this.data[i].level > node.level; i++, count++) { }\n                    _this.data.splice(index + 1, count);\n                }\n                // notify the change\n                _this.dataChange.next(_this.data);\n                node.isLoading = false;\n            }, 1000);\n        };\n        return DynamicDataSource;\n    }());\n    /**\n     * @title Tree with dynamic data\n     */\n    var TreeDynamicExample = /** @class */ (function () {\n        function TreeDynamicExample(database) {\n            this.getLevel = function (node) { return node.level; };\n            this.isExpandable = function (node) { return node.expandable; };\n            this.hasChild = function (_, _nodeData) { return _nodeData.expandable; };\n            this.treeControl = new tree.FlatTreeControl(this.getLevel, this.isExpandable);\n            this.dataSource = new DynamicDataSource(this.treeControl, database);\n            this.dataSource.data = database.initialData();\n        }\n        TreeDynamicExample.ɵfac = function TreeDynamicExample_Factory(t) { return new (t || TreeDynamicExample)(i0.ɵɵdirectiveInject(DynamicDatabase)); };\n        TreeDynamicExample.ɵcmp = i0.ɵɵdefineComponent({ type: TreeDynamicExample, selectors: [[\"tree-dynamic-example\"]], decls: 3, vars: 3, consts: [[3, \"dataSource\", \"treeControl\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [\"matTreeNodePadding\", \"\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\"], [1, \"mat-icon-rtl-mirror\"], [\"mode\", \"indeterminate\", \"class\", \"example-tree-progress-bar\", 4, \"ngIf\"], [\"mode\", \"indeterminate\", 1, \"example-tree-progress-bar\"]], template: function TreeDynamicExample_Template(rf, ctx) { if (rf & 1) {\n                i0.ɵɵelementStart(0, \"mat-tree\", 0);\n                i0.ɵɵtemplate(1, TreeDynamicExample_mat_tree_node_1_Template, 3, 1, \"mat-tree-node\", 1);\n                i0.ɵɵtemplate(2, TreeDynamicExample_mat_tree_node_2_Template, 6, 4, \"mat-tree-node\", 2);\n                i0.ɵɵelementEnd();\n            } if (rf & 2) {\n                i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n                i0.ɵɵadvance(2);\n                i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n            } }, directives: [i1.MatTree, i1.MatTreeNodeDef, i1.MatTreeNode, i1.MatTreeNodePadding, i2.MatButton, i1.MatTreeNodeToggle, i3$1.MatIcon, i4.NgIf, i5$1.MatProgressBar], styles: [\".example-tree-progress-bar[_ngcontent-%COMP%] {\\n  margin-left: 30px;\\n}\"] });\n        return TreeDynamicExample;\n    }());\n    /*@__PURE__*/ (function () { i0.ɵsetClassMetadata(TreeDynamicExample, [{\n            type: i0.Component,\n            args: [{\n                    selector: 'tree-dynamic-example',\n                    templateUrl: 'tree-dynamic-example.html',\n                    styleUrls: ['tree-dynamic-example.css']\n                }]\n        }], function () { return [{ type: DynamicDatabase }]; }, null); })();\n\n    function TreeFlatOverviewExample_mat_tree_node_1_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-tree-node\", 3);\n        i0.ɵɵelement(1, \"button\", 4);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var node_r21 = ctx.$implicit;\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", node_r21.name, \" \");\n    } }\n    function TreeFlatOverviewExample_mat_tree_node_2_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-tree-node\", 3);\n        i0.ɵɵelementStart(1, \"button\", 5);\n        i0.ɵɵelementStart(2, \"mat-icon\", 6);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var node_r22 = ctx.$implicit;\n        var ctx_r20 = i0.ɵɵnextContext();\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"aria-label\", \"toggle \" + node_r22.name);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx_r20.treeControl.isExpanded(node_r22) ? \"expand_more\" : \"chevron_right\", \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", node_r22.name, \" \");\n    } }\n    var TREE_DATA$1 = [\n        {\n            name: 'Fruit',\n            children: [\n                { name: 'Apple' },\n                { name: 'Banana' },\n                { name: 'Fruit loops' },\n            ]\n        }, {\n            name: 'Vegetables',\n            children: [\n                {\n                    name: 'Green',\n                    children: [\n                        { name: 'Broccoli' },\n                        { name: 'Brussels sprouts' },\n                    ]\n                }, {\n                    name: 'Orange',\n                    children: [\n                        { name: 'Pumpkins' },\n                        { name: 'Carrots' },\n                    ]\n                },\n            ]\n        },\n    ];\n    /**\n     * @title Tree with flat nodes\n     */\n    var TreeFlatOverviewExample = /** @class */ (function () {\n        function TreeFlatOverviewExample() {\n            this._transformer = function (node, level) {\n                return {\n                    expandable: !!node.children && node.children.length > 0,\n                    name: node.name,\n                    level: level,\n                };\n            };\n            this.treeControl = new tree.FlatTreeControl(function (node) { return node.level; }, function (node) { return node.expandable; });\n            this.treeFlattener = new i1.MatTreeFlattener(this._transformer, function (node) { return node.level; }, function (node) { return node.expandable; }, function (node) { return node.children; });\n            this.dataSource = new i1.MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n            this.hasChild = function (_, node) { return node.expandable; };\n            this.dataSource.data = TREE_DATA$1;\n        }\n        TreeFlatOverviewExample.ɵfac = function TreeFlatOverviewExample_Factory(t) { return new (t || TreeFlatOverviewExample)(); };\n        TreeFlatOverviewExample.ɵcmp = i0.ɵɵdefineComponent({ type: TreeFlatOverviewExample, selectors: [[\"tree-flat-overview-example\"]], decls: 3, vars: 3, consts: [[3, \"dataSource\", \"treeControl\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [\"matTreeNodePadding\", \"\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\"], [1, \"mat-icon-rtl-mirror\"]], template: function TreeFlatOverviewExample_Template(rf, ctx) { if (rf & 1) {\n                i0.ɵɵelementStart(0, \"mat-tree\", 0);\n                i0.ɵɵtemplate(1, TreeFlatOverviewExample_mat_tree_node_1_Template, 3, 1, \"mat-tree-node\", 1);\n                i0.ɵɵtemplate(2, TreeFlatOverviewExample_mat_tree_node_2_Template, 5, 3, \"mat-tree-node\", 2);\n                i0.ɵɵelementEnd();\n            } if (rf & 2) {\n                i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n                i0.ɵɵadvance(2);\n                i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n            } }, directives: [i1.MatTree, i1.MatTreeNodeDef, i1.MatTreeNode, i1.MatTreeNodePadding, i2.MatButton, i1.MatTreeNodeToggle, i3$1.MatIcon], styles: [\"\"] });\n        return TreeFlatOverviewExample;\n    }());\n    /*@__PURE__*/ (function () { i0.ɵsetClassMetadata(TreeFlatOverviewExample, [{\n            type: i0.Component,\n            args: [{\n                    selector: 'tree-flat-overview-example',\n                    templateUrl: 'tree-flat-overview-example.html',\n                    styleUrls: ['tree-flat-overview-example.css'],\n                }]\n        }], function () { return []; }, null); })();\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function TreeLoadmoreExample_mat_tree_node_1_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-tree-node\", 4);\n        i0.ɵɵelement(1, \"button\", 5);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var node_r26 = ctx.$implicit;\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", node_r26.item, \" \");\n    } }\n    function TreeLoadmoreExample_mat_tree_node_2_Template(rf, ctx) { if (rf & 1) {\n        var _r29 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"mat-tree-node\", 4);\n        i0.ɵɵelementStart(1, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function TreeLoadmoreExample_mat_tree_node_2_Template_button_click_1_listener($event) { i0.ɵɵrestoreView(_r29); var node_r27 = ctx.$implicit; var ctx_r28 = i0.ɵɵnextContext(); return ctx_r28.loadChildren(node_r27); });\n        i0.ɵɵelementStart(2, \"mat-icon\", 7);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var node_r27 = ctx.$implicit;\n        var ctx_r24 = i0.ɵɵnextContext();\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"aria-label\", \"toggle \" + node_r27.filename);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx_r24.treeControl.isExpanded(node_r27) ? \"expand_more\" : \"chevron_right\", \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", node_r27.item, \" \");\n    } }\n    function TreeLoadmoreExample_mat_tree_node_3_Template(rf, ctx) { if (rf & 1) {\n        var _r32 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"mat-tree-node\");\n        i0.ɵɵelementStart(1, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function TreeLoadmoreExample_mat_tree_node_3_Template_button_click_1_listener($event) { i0.ɵɵrestoreView(_r32); var node_r30 = ctx.$implicit; var ctx_r31 = i0.ɵɵnextContext(); return ctx_r31.loadMore(node_r30.loadMoreParentItem); });\n        i0.ɵɵtext(2, \" Load more... \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } }\n    var LOAD_MORE = 'LOAD_MORE';\n    /** Nested node */\n    var LoadmoreNode = /** @class */ (function () {\n        function LoadmoreNode(item, hasChildren, loadMoreParentItem) {\n            if (hasChildren === void 0) { hasChildren = false; }\n            if (loadMoreParentItem === void 0) { loadMoreParentItem = null; }\n            this.item = item;\n            this.hasChildren = hasChildren;\n            this.loadMoreParentItem = loadMoreParentItem;\n            this.childrenChange = new rxjs.BehaviorSubject([]);\n        }\n        Object.defineProperty(LoadmoreNode.prototype, \"children\", {\n            get: function () {\n                return this.childrenChange.value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return LoadmoreNode;\n    }());\n    /** Flat node with expandable and level information */\n    var LoadmoreFlatNode = /** @class */ (function () {\n        function LoadmoreFlatNode(item, level, expandable, loadMoreParentItem) {\n            if (level === void 0) { level = 1; }\n            if (expandable === void 0) { expandable = false; }\n            if (loadMoreParentItem === void 0) { loadMoreParentItem = null; }\n            this.item = item;\n            this.level = level;\n            this.expandable = expandable;\n            this.loadMoreParentItem = loadMoreParentItem;\n        }\n        return LoadmoreFlatNode;\n    }());\n    /**\n     * A database that only load part of the data initially. After user clicks on the `Load more`\n     * button, more data will be loaded.\n     */\n    var LoadmoreDatabase = /** @class */ (function () {\n        function LoadmoreDatabase() {\n            this.batchNumber = 5;\n            this.dataChange = new rxjs.BehaviorSubject([]);\n            this.nodeMap = new Map();\n            /** The data */\n            this.rootLevelNodes = ['Vegetables', 'Fruits'];\n            this.dataMap = new Map([\n                ['Fruits', ['Apple', 'Orange', 'Banana']],\n                ['Vegetables', ['Tomato', 'Potato', 'Onion']],\n                ['Apple', ['Fuji', 'Macintosh']],\n                ['Onion', ['Yellow', 'White', 'Purple', 'Green', 'Shallot', 'Sweet', 'Red', 'Leek']],\n            ]);\n        }\n        LoadmoreDatabase.prototype.initialize = function () {\n            var _this = this;\n            var data = this.rootLevelNodes.map(function (name) { return _this._generateNode(name); });\n            this.dataChange.next(data);\n        };\n        /** Expand a node whose children are not loaded */\n        LoadmoreDatabase.prototype.loadMore = function (item, onlyFirstTime) {\n            var _this = this;\n            if (onlyFirstTime === void 0) { onlyFirstTime = false; }\n            if (!this.nodeMap.has(item) || !this.dataMap.has(item)) {\n                return;\n            }\n            var parent = this.nodeMap.get(item);\n            var children = this.dataMap.get(item);\n            if (onlyFirstTime && parent.children.length > 0) {\n                return;\n            }\n            var newChildrenNumber = parent.children.length + this.batchNumber;\n            var nodes = children.slice(0, newChildrenNumber)\n                .map(function (name) { return _this._generateNode(name); });\n            if (newChildrenNumber < children.length) {\n                // Need a new load more node\n                nodes.push(new LoadmoreNode(LOAD_MORE, false, item));\n            }\n            parent.childrenChange.next(nodes);\n            this.dataChange.next(this.dataChange.value);\n        };\n        LoadmoreDatabase.prototype._generateNode = function (item) {\n            if (this.nodeMap.has(item)) {\n                return this.nodeMap.get(item);\n            }\n            var result = new LoadmoreNode(item, this.dataMap.has(item));\n            this.nodeMap.set(item, result);\n            return result;\n        };\n        LoadmoreDatabase.ɵfac = function LoadmoreDatabase_Factory(t) { return new (t || LoadmoreDatabase)(); };\n        LoadmoreDatabase.ɵprov = i0.ɵɵdefineInjectable({ token: LoadmoreDatabase, factory: LoadmoreDatabase.ɵfac });\n        return LoadmoreDatabase;\n    }());\n    /*@__PURE__*/ (function () { i0.ɵsetClassMetadata(LoadmoreDatabase, [{\n            type: i0.Injectable\n        }], null, null); })();\n    /**\n     * @title Tree with partially loaded data\n     */\n    var TreeLoadmoreExample = /** @class */ (function () {\n        function TreeLoadmoreExample(_database) {\n            var _this = this;\n            this._database = _database;\n            this.nodeMap = new Map();\n            this.getChildren = function (node) { return node.childrenChange; };\n            this.transformer = function (node, level) {\n                var existingNode = _this.nodeMap.get(node.item);\n                if (existingNode) {\n                    return existingNode;\n                }\n                var newNode = new LoadmoreFlatNode(node.item, level, node.hasChildren, node.loadMoreParentItem);\n                _this.nodeMap.set(node.item, newNode);\n                return newNode;\n            };\n            this.getLevel = function (node) { return node.level; };\n            this.isExpandable = function (node) { return node.expandable; };\n            this.hasChild = function (_, _nodeData) { return _nodeData.expandable; };\n            this.isLoadMore = function (_, _nodeData) { return _nodeData.item === LOAD_MORE; };\n            this.treeFlattener = new i1.MatTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n            this.treeControl = new tree.FlatTreeControl(this.getLevel, this.isExpandable);\n            this.dataSource = new i1.MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n            _database.dataChange.subscribe(function (data) {\n                _this.dataSource.data = data;\n            });\n            _database.initialize();\n        }\n        /** Load more nodes from data source */\n        TreeLoadmoreExample.prototype.loadMore = function (item) {\n            this._database.loadMore(item);\n        };\n        TreeLoadmoreExample.prototype.loadChildren = function (node) {\n            this._database.loadMore(node.item, true);\n        };\n        TreeLoadmoreExample.ɵfac = function TreeLoadmoreExample_Factory(t) { return new (t || TreeLoadmoreExample)(i0.ɵɵdirectiveInject(LoadmoreDatabase)); };\n        TreeLoadmoreExample.ɵcmp = i0.ɵɵdefineComponent({ type: TreeLoadmoreExample, selectors: [[\"tree-loadmore-example\"]], features: [i0.ɵɵProvidersFeature([LoadmoreDatabase])], decls: 4, vars: 4, consts: [[3, \"dataSource\", \"treeControl\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [\"matTreeNodePadding\", \"\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\", 3, \"click\"], [1, \"mat-icon-rtl-mirror\"], [\"mat-button\", \"\", 3, \"click\"]], template: function TreeLoadmoreExample_Template(rf, ctx) { if (rf & 1) {\n                i0.ɵɵelementStart(0, \"mat-tree\", 0);\n                i0.ɵɵtemplate(1, TreeLoadmoreExample_mat_tree_node_1_Template, 3, 1, \"mat-tree-node\", 1);\n                i0.ɵɵtemplate(2, TreeLoadmoreExample_mat_tree_node_2_Template, 5, 3, \"mat-tree-node\", 2);\n                i0.ɵɵtemplate(3, TreeLoadmoreExample_mat_tree_node_3_Template, 3, 0, \"mat-tree-node\", 3);\n                i0.ɵɵelementEnd();\n            } if (rf & 2) {\n                i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n                i0.ɵɵadvance(2);\n                i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n                i0.ɵɵadvance(1);\n                i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.isLoadMore);\n            } }, directives: [i1.MatTree, i1.MatTreeNodeDef, i1.MatTreeNode, i1.MatTreeNodePadding, i2.MatButton, i1.MatTreeNodeToggle, i3$1.MatIcon], styles: [\"\"] });\n        return TreeLoadmoreExample;\n    }());\n    /*@__PURE__*/ (function () { i0.ɵsetClassMetadata(TreeLoadmoreExample, [{\n            type: i0.Component,\n            args: [{\n                    selector: 'tree-loadmore-example',\n                    templateUrl: 'tree-loadmore-example.html',\n                    styleUrls: ['tree-loadmore-example.css'],\n                    providers: [LoadmoreDatabase]\n                }]\n        }], function () { return [{ type: LoadmoreDatabase }]; }, null); })();\n\n    function TreeNestedOverviewExample_mat_tree_node_1_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-tree-node\", 3);\n        i0.ɵɵelementStart(1, \"li\", 4);\n        i0.ɵɵelement(2, \"button\", 5);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var node_r35 = ctx.$implicit;\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", node_r35.name, \" \");\n    } }\n    function TreeNestedOverviewExample_mat_nested_tree_node_2_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-nested-tree-node\");\n        i0.ɵɵelementStart(1, \"li\");\n        i0.ɵɵelementStart(2, \"div\", 4);\n        i0.ɵɵelementStart(3, \"button\", 6);\n        i0.ɵɵelementStart(4, \"mat-icon\", 7);\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"ul\");\n        i0.ɵɵelementContainer(8, 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var node_r36 = ctx.$implicit;\n        var ctx_r34 = i0.ɵɵnextContext();\n        i0.ɵɵadvance(3);\n        i0.ɵɵattribute(\"aria-label\", \"toggle \" + node_r36.name);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx_r34.treeControl.isExpanded(node_r36) ? \"expand_more\" : \"chevron_right\", \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", node_r36.name, \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"example-tree-invisible\", !ctx_r34.treeControl.isExpanded(node_r36));\n    } }\n    var TREE_DATA$2 = [\n        {\n            name: 'Fruit',\n            children: [\n                { name: 'Apple' },\n                { name: 'Banana' },\n                { name: 'Fruit loops' },\n            ]\n        }, {\n            name: 'Vegetables',\n            children: [\n                {\n                    name: 'Green',\n                    children: [\n                        { name: 'Broccoli' },\n                        { name: 'Brussels sprouts' },\n                    ]\n                }, {\n                    name: 'Orange',\n                    children: [\n                        { name: 'Pumpkins' },\n                        { name: 'Carrots' },\n                    ]\n                },\n            ]\n        },\n    ];\n    /**\n     * @title Tree with nested nodes\n     */\n    var TreeNestedOverviewExample = /** @class */ (function () {\n        function TreeNestedOverviewExample() {\n            this.treeControl = new tree.NestedTreeControl(function (node) { return node.children; });\n            this.dataSource = new i1.MatTreeNestedDataSource();\n            this.hasChild = function (_, node) { return !!node.children && node.children.length > 0; };\n            this.dataSource.data = TREE_DATA$2;\n        }\n        TreeNestedOverviewExample.ɵfac = function TreeNestedOverviewExample_Factory(t) { return new (t || TreeNestedOverviewExample)(); };\n        TreeNestedOverviewExample.ɵcmp = i0.ɵɵdefineComponent({ type: TreeNestedOverviewExample, selectors: [[\"tree-nested-overview-example\"]], decls: 3, vars: 3, consts: [[1, \"example-tree\", 3, \"dataSource\", \"treeControl\"], [\"matTreeNodeToggle\", \"\", 4, \"matTreeNodeDef\"], [4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [\"matTreeNodeToggle\", \"\"], [1, \"mat-tree-node\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\"], [1, \"mat-icon-rtl-mirror\"], [\"matTreeNodeOutlet\", \"\"]], template: function TreeNestedOverviewExample_Template(rf, ctx) { if (rf & 1) {\n                i0.ɵɵelementStart(0, \"mat-tree\", 0);\n                i0.ɵɵtemplate(1, TreeNestedOverviewExample_mat_tree_node_1_Template, 4, 1, \"mat-tree-node\", 1);\n                i0.ɵɵtemplate(2, TreeNestedOverviewExample_mat_nested_tree_node_2_Template, 9, 5, \"mat-nested-tree-node\", 2);\n                i0.ɵɵelementEnd();\n            } if (rf & 2) {\n                i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n                i0.ɵɵadvance(2);\n                i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n            } }, directives: [i1.MatTree, i1.MatTreeNodeDef, i1.MatTreeNode, i1.MatTreeNodeToggle, i2.MatButton, i1.MatNestedTreeNode, i3$1.MatIcon, i1.MatTreeNodeOutlet], styles: [\".example-tree-invisible[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.example-tree[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%], .example-tree[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\\n  margin-top: 0;\\n  margin-bottom: 0;\\n  list-style-type: none;\\n}\"] });\n        return TreeNestedOverviewExample;\n    }());\n    /*@__PURE__*/ (function () { i0.ɵsetClassMetadata(TreeNestedOverviewExample, [{\n            type: i0.Component,\n            args: [{\n                    selector: 'tree-nested-overview-example',\n                    templateUrl: 'tree-nested-overview-example.html',\n                    styleUrls: ['tree-nested-overview-example.css'],\n                }]\n        }], function () { return []; }, null); })();\n\n    var EXAMPLES = [\n        TreeChecklistExample,\n        TreeDynamicExample,\n        TreeFlatOverviewExample,\n        TreeLoadmoreExample,\n        TreeNestedOverviewExample,\n    ];\n    var TreeExamplesModule = /** @class */ (function () {\n        function TreeExamplesModule() {\n        }\n        TreeExamplesModule.ɵmod = i0.ɵɵdefineNgModule({ type: TreeExamplesModule });\n        TreeExamplesModule.ɵinj = i0.ɵɵdefineInjector({ factory: function TreeExamplesModule_Factory(t) { return new (t || TreeExamplesModule)(); }, imports: [[\n                    i4.CommonModule,\n                    i2.MatButtonModule,\n                    i3.MatCheckboxModule,\n                    i3$1.MatIconModule,\n                    i5.MatInputModule,\n                    i5$1.MatProgressBarModule,\n                    i1.MatTreeModule,\n                ]] });\n        return TreeExamplesModule;\n    }());\n    (function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(TreeExamplesModule, { declarations: [TreeChecklistExample,\n            TreeDynamicExample,\n            TreeFlatOverviewExample,\n            TreeLoadmoreExample,\n            TreeNestedOverviewExample], imports: [i4.CommonModule,\n            i2.MatButtonModule,\n            i3.MatCheckboxModule,\n            i3$1.MatIconModule,\n            i5.MatInputModule,\n            i5$1.MatProgressBarModule,\n            i1.MatTreeModule], exports: [TreeChecklistExample,\n            TreeDynamicExample,\n            TreeFlatOverviewExample,\n            TreeLoadmoreExample,\n            TreeNestedOverviewExample] }); })();\n    /*@__PURE__*/ (function () { i0.ɵsetClassMetadata(TreeExamplesModule, [{\n            type: i0.NgModule,\n            args: [{\n                    imports: [\n                        i4.CommonModule,\n                        i2.MatButtonModule,\n                        i3.MatCheckboxModule,\n                        i3$1.MatIconModule,\n                        i5.MatInputModule,\n                        i5$1.MatProgressBarModule,\n                        i1.MatTreeModule,\n                    ],\n                    declarations: EXAMPLES,\n                    exports: EXAMPLES,\n                }]\n        }], null, null); })();\n\n    exports.TreeChecklistExample = TreeChecklistExample;\n    exports.TreeDynamicExample = TreeDynamicExample;\n    exports.TreeExamplesModule = TreeExamplesModule;\n    exports.TreeFlatOverviewExample = TreeFlatOverviewExample;\n    exports.TreeLoadmoreExample = TreeLoadmoreExample;\n    exports.TreeNestedOverviewExample = TreeNestedOverviewExample;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=components-examples-material-tree.umd.js.map\n"]}