{"version":3,"sources":["src/material-examples/material-examples-cdk-tree.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","materialExamples","cdk","tree","core","material","button","icon","collections","this","TREE_DATA","name","expandable","level","CdkTreeFlatExample","treeControl","FlatTreeControl","node","dataSource","ArrayDataSource","hasChild","_","prototype","getParentNode","i","indexOf","shouldRender","parent","isExpanded","decorators","type","Component","args","selector","template","styles","TREE_DATA$1","children","CdkTreeNestedExample","NestedTreeControl","length","EXAMPLES","CdkTreeExamplesModule","NgModule","imports","CdkTreeModule","MatButtonModule","MatIconModule","declarations","Object","defineProperty","value"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/tree'), require('@angular/core'), require('@angular/material/button'), require('@angular/material/icon'), require('@angular/cdk/collections')) :\n    typeof define === 'function' && define.amd ? define('@angular/material-examples/cdk/tree', ['exports', '@angular/cdk/tree', '@angular/core', '@angular/material/button', '@angular/material/icon', '@angular/cdk/collections'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.materialExamples = global.ng.materialExamples || {}, global.ng.materialExamples.cdk = global.ng.materialExamples.cdk || {}, global.ng.materialExamples.cdk.tree = {}), global.ng.cdk.tree, global.ng.core, global.ng.material.button, global.ng.material.icon, global.ng.cdk.collections));\n}(this, function (exports, tree, core, button, icon, collections) { 'use strict';\n\n    var TREE_DATA = [\n        {\n            name: 'Fruit',\n            expandable: true,\n            level: 0,\n        }, {\n            name: 'Apple',\n            expandable: false,\n            level: 1,\n        }, {\n            name: 'Banana',\n            expandable: false,\n            level: 1,\n        }, {\n            name: 'Fruit loops',\n            expandable: false,\n            level: 1,\n        }, {\n            name: 'Vegetables',\n            expandable: true,\n            level: 0,\n        }, {\n            name: 'Green',\n            expandable: true,\n            level: 1,\n        }, {\n            name: 'Broccoli',\n            expandable: false,\n            level: 2,\n        }, {\n            name: 'Brussel sprouts',\n            expandable: false,\n            level: 2,\n        }, {\n            name: 'Orange',\n            expandable: true,\n            level: 1,\n        }, {\n            name: 'Pumpkins',\n            expandable: false,\n            level: 2,\n        }, {\n            name: 'Carrots',\n            expandable: false,\n            level: 2,\n        }\n    ];\n    /**\n     * @title Tree with flat nodes\n     */\n    var CdkTreeFlatExample = /** @class */ (function () {\n        function CdkTreeFlatExample() {\n            this.treeControl = new tree.FlatTreeControl(function (node) { return node.level; }, function (node) { return node.expandable; });\n            this.dataSource = new collections.ArrayDataSource(TREE_DATA);\n            this.hasChild = function (_, node) { return node.expandable; };\n        }\n        CdkTreeFlatExample.prototype.getParentNode = function (node) {\n            var nodeIndex = TREE_DATA.indexOf(node);\n            for (var i = nodeIndex - 1; i >= 0; i--) {\n                if (TREE_DATA[i].level === node.level - 1) {\n                    return TREE_DATA[i];\n                }\n            }\n            return null;\n        };\n        CdkTreeFlatExample.prototype.shouldRender = function (node) {\n            var parent = this.getParentNode(node);\n            return !parent || parent.isExpanded;\n        };\n        CdkTreeFlatExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'cdk-tree-flat-example',\n                        template: \"<cdk-tree [dataSource]=\\\"dataSource\\\" [treeControl]=\\\"treeControl\\\">\\n  <!-- This is the tree node template for leaf nodes -->\\n  <cdk-tree-node *cdkTreeNodeDef=\\\"let node\\\" cdkTreeNodePadding\\n                 [style.display]=\\\"shouldRender(node) ? 'flex' : 'none'\\\"\\n                 class=\\\"example-tree-node\\\">\\n    <!-- use a disabled button to provide padding for tree leaf -->\\n    <button mat-icon-button disabled></button>\\n    {{node.name}}\\n  </cdk-tree-node>\\n  <!-- This is the tree node template for expandable nodes -->\\n  <cdk-tree-node *cdkTreeNodeDef=\\\"let node; when: hasChild\\\" cdkTreeNodePadding\\n                 [style.display]=\\\"shouldRender(node) ? 'flex' : 'none'\\\"\\n                 class=\\\"example-tree-node\\\">\\n    <button mat-icon-button cdkTreeNodeToggle\\n            [attr.aria-label]=\\\"'toggle ' + node.filename\\\"\\n            (click)=\\\"node.isExpanded = !node.isExpanded\\\"\\n            [style.visibility]=\\\"node.expandable ? 'visible' : 'hidden'\\\">\\n      <mat-icon class=\\\"mat-icon-rtl-mirror\\\">\\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\\n      </mat-icon>\\n    </button>\\n    {{node.name}}\\n  </cdk-tree-node>\\n</cdk-tree>\\n\",\n                        styles: [\".example-tree-node {\\n  display: flex;\\n  align-items: center;\\n}\\n\"]\n                    }] }\n        ];\n        return CdkTreeFlatExample;\n    }());\n\n    var TREE_DATA$1 = [\n        {\n            name: 'Fruit',\n            children: [\n                { name: 'Apple' },\n                { name: 'Banana' },\n                { name: 'Fruit loops' },\n            ]\n        }, {\n            name: 'Vegetables',\n            children: [\n                {\n                    name: 'Green',\n                    children: [\n                        { name: 'Broccoli' },\n                        { name: 'Brussel sprouts' },\n                    ]\n                }, {\n                    name: 'Orange',\n                    children: [\n                        { name: 'Pumpkins' },\n                        { name: 'Carrots' },\n                    ]\n                },\n            ]\n        },\n    ];\n    /**\n     * @title Tree with nested nodes\n     */\n    var CdkTreeNestedExample = /** @class */ (function () {\n        function CdkTreeNestedExample() {\n            this.treeControl = new tree.NestedTreeControl(function (node) { return node.children; });\n            this.dataSource = new collections.ArrayDataSource(TREE_DATA$1);\n            this.hasChild = function (_, node) { return !!node.children && node.children.length > 0; };\n        }\n        CdkTreeNestedExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'cdk-tree-nested-example',\n                        template: \"<cdk-tree [dataSource]=\\\"dataSource\\\" [treeControl]=\\\"treeControl\\\">\\n  <!-- This is the tree node template for leaf nodes -->\\n  <cdk-nested-tree-node *cdkTreeNodeDef=\\\"let node\\\" class=\\\"example-tree-node\\\">\\n    <!-- use a disabled button to provide padding for tree leaf -->\\n    <button mat-icon-button disabled></button>\\n    {{node.name}}\\n  </cdk-nested-tree-node>\\n  <!-- This is the tree node template for expandable nodes -->\\n  <cdk-nested-tree-node *cdkTreeNodeDef=\\\"let node; when: hasChild\\\" class=\\\"example-tree-node\\\">\\n    <button mat-icon-button [attr.aria-label]=\\\"'toggle ' + node.name\\\" cdkTreeNodeToggle>\\n      <mat-icon class=\\\"mat-icon-rtl-mirror\\\">\\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\\n      </mat-icon>\\n    </button>\\n    {{node.name}}\\n    <div [class.example-tree-invisible]=\\\"!treeControl.isExpanded(node)\\\">\\n      <ng-container cdkTreeNodeOutlet></ng-container>\\n    </div>\\n  </cdk-nested-tree-node>\\n</cdk-tree>\\n\",\n                        styles: [\".example-tree-invisible {\\n  display: none;\\n}\\n\\n.example-tree ul,\\n.example-tree li {\\n  margin-top: 0;\\n  margin-bottom: 0;\\n  list-style-type: none;\\n}\\n.example-tree-node {\\n  display: block;\\n}\\n\\n.example-tree-node .example-tree-node {\\n  padding-left: 40px;\\n}\\n\"]\n                    }] }\n        ];\n        return CdkTreeNestedExample;\n    }());\n\n    var EXAMPLES = [\n        CdkTreeFlatExample,\n        CdkTreeNestedExample,\n    ];\n    var CdkTreeExamplesModule = /** @class */ (function () {\n        function CdkTreeExamplesModule() {\n        }\n        CdkTreeExamplesModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            tree.CdkTreeModule,\n                            button.MatButtonModule,\n                            icon.MatIconModule,\n                        ],\n                        declarations: EXAMPLES,\n                        exports: EXAMPLES,\n                    },] }\n        ];\n        return CdkTreeExamplesModule;\n    }());\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.CdkTreeFlatExample = CdkTreeFlatExample;\n    exports.CdkTreeNestedExample = CdkTreeNestedExample;\n    exports.CdkTreeExamplesModule = CdkTreeExamplesModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-examples-cdk-tree.umd.js.map\n"]}