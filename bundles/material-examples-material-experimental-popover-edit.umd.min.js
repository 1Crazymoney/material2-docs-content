!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/forms"),require("@angular/material-experimental/popover-edit"),require("@angular/material/button"),require("@angular/material/icon"),require("@angular/material/input"),require("@angular/material/snack-bar"),require("@angular/material/table"),require("tslib"),require("@angular/cdk/collections"),require("rxjs"),require("@angular/cdk-experimental/popover-edit")):"function"==typeof define&&define.amd?define("@angular/material-examples/material-experimental/popover-edit",["exports","@angular/core","@angular/forms","@angular/material-experimental/popover-edit","@angular/material/button","@angular/material/icon","@angular/material/input","@angular/material/snack-bar","@angular/material/table","tslib","@angular/cdk/collections","rxjs","@angular/cdk-experimental/popover-edit"],t):t(((e=e||self).ng=e.ng||{},e.ng.materialExamples=e.ng.materialExamples||{},e.ng.materialExamples.materialExperimental=e.ng.materialExamples.materialExperimental||{},e.ng.materialExamples.materialExperimental.popoverEdit={}),e.ng.core,e.ng.forms,e.ng.materialExperimental.popoverEdit,e.ng.material.button,e.ng.material.icon,e.ng.material.input,e.ng.material.snackBar,e.ng.material.table,e.tslib,e.ng.cdk.collections,e.rxjs,e.ng.cdkExperimental.popoverEdit)}(this,function(e,t,n,a,o,i,m,l,r,s,d,u,p){"use strict";var c=[{id:1,firstName:"Terra",middleName:"Maduin",lastName:"Branford"},{id:2,firstName:"Locke",middleName:"",lastName:"Cole"},{id:3,firstName:"Celes",middleName:"Gestahl",lastName:"Chere"},{id:4,firstName:"Edgar",middleName:"Roni",lastName:"Figaro"},{id:5,firstName:"Sabin",middleName:"Rene",lastName:"Figaro"},{id:6,firstName:"Clyde",middleName:'"Shadow"',lastName:"Arrowny"},{id:7,firstName:"Setzer",middleName:"",lastName:"Gabbiani"},{id:8,firstName:"Cid",middleName:"Del Norte",lastName:"Marquez"},{id:9,firstName:"Mog",middleName:"",lastName:"McMoogle"}],g=function(){function e(){this.displayedColumns=["id","firstName","middleName","lastName"],this.dataSource=new h,this.preservedValues=new WeakMap}return e.prototype.onSubmit=function(e,t){t.valid&&(e.firstName=t.value.firstName,e.middleName=t.value.middleName,e.lastName=t.value.lastName)},e.decorators=[{type:t.Component,args:[{selector:"popover-edit-cell-span-mat-table-example",template:'<table class="example-table" mat-table editable [dataSource]="dataSource">\n  <ng-template #nameEdit let-ctx>\n    <div>\n      <form #f="ngForm"\n          matEditLens\n          (ngSubmit)="onSubmit(ctx.person, f)"\n          [matEditLensPreservedFormValue]="preservedValues.get(ctx.person)"\n          (matEditLensPreservedFormValueChange)="preservedValues.set(ctx.person, $event)">\n        <div mat-edit-content class="example-input-container">\n          <mat-form-field>\n            <input matInput [ngModel]="ctx.person.firstName" name="firstName" required\n                [attr.cdkFocusInitial]="ctx.focus === \'firstName\' || null">\n          </mat-form-field>\n          <mat-form-field>\n            <input matInput [ngModel]="ctx.person.middleName" name="middleName"\n                [attr.cdkFocusInitial]="ctx.focus === \'middleName\' || null">\n          </mat-form-field>\n          <mat-form-field>\n            <input matInput [ngModel]="ctx.person.lastName" name="lastName" required\n                [attr.cdkFocusInitial]="ctx.focus === \'lastName\' || null">\n          </mat-form-field>\n        </div>\n\n        <div mat-edit-actions>\n          <button mat-button type="submit">Confirm</button>\n          <button mat-button cdkEditRevert>Revert</button>\n          <button mat-button cdkEditClose>Close</button>\n        </div>\n      </form>\n    </div>\n  </ng-template>\n\n  \x3c!-- Position Column --\x3e\n  <ng-container matColumnDef="id">\n    <th mat-header-cell *matHeaderCellDef> No. </th>\n    <td mat-cell *matCellDef="let person"> {{person.id}} </td>\n  </ng-container>\n\n  \x3c!-- Name Column --\x3e\n  <ng-container matColumnDef="firstName">\n    <th mat-header-cell *matHeaderCellDef> First Name </th>\n    <td mat-cell *matCellDef="let person"\n        [matPopoverEdit]="nameEdit"\n        [matPopoverEditContext]="{person: person, focus: \'firstName\'}"\n        [matPopoverEditColspan]="{after: 2}">\n      {{person.firstName}}\n\n      <span *matRowHoverContent>\n        <button mat-icon-button matEditOpen><mat-icon>edit</mat-icon></button>\n      </span>\n    </td>\n  </ng-container>\n\n  \x3c!-- Weight Column --\x3e\n  <ng-container matColumnDef="middleName">\n    <th mat-header-cell *matHeaderCellDef> Middle Name </th>\n    <td mat-cell *matCellDef="let person"\n        [matPopoverEdit]="nameEdit"\n        [matPopoverEditContext]="{person: person, focus: \'middleName\'}"\n        [matPopoverEditColspan]="{before:1 , after: 1}">\n      {{person.middleName}}\n\n      <span *matRowHoverContent>\n        <button mat-icon-button matEditOpen><mat-icon>edit</mat-icon></button>\n      </span>\n    </td>\n  </ng-container>\n\n  \x3c!-- Symbol Column --\x3e\n  <ng-container matColumnDef="lastName">\n    <th mat-header-cell *matHeaderCellDef> Last Name </th>\n    <td mat-cell *matCellDef="let person"\n        [matPopoverEdit]="nameEdit"\n        [matPopoverEditContext]="{person: person, focus: \'lastName\'}"\n        [matPopoverEditColspan]="{before: 2}">\n      {{person.lastName}}\n\n      <span *matRowHoverContent>\n        <button mat-icon-button matEditOpen><mat-icon>edit</mat-icon></button>\n      </span>\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>\n  <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>\n</table>\n',styles:[".example-table {\n  width: 100%;\n}\n\n.example-table th {\n  text-align: left;\n}\n\n.example-table td,\n.example-table th {\n  min-width: 300px;\n  width: 25%;\n}\n\n.example-input-container {\n  display: flex;\n  justify-content: stretch;\n}\n\n.example-input-container mat-form-field {\n  flex: 1;\n}\n"]}]}],e}(),h=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.data=new u.BehaviorSubject(c),t}return s.__extends(t,e),t.prototype.connect=function(){return this.data},t.prototype.disconnect=function(){},t}(d.DataSource),b=[{position:1,name:"Hydrogen",weight:1.0079,symbol:"H"},{position:2,name:"Helium",weight:4.0026,symbol:"He"},{position:3,name:"Lithium",weight:6.941,symbol:"Li"},{position:4,name:"Beryllium",weight:9.0122,symbol:"Be"},{position:5,name:"Boron",weight:10.811,symbol:"B"},{position:6,name:"Carbon",weight:12.0107,symbol:"C"},{position:7,name:"Nitrogen",weight:14.0067,symbol:"N"},{position:8,name:"Oxygen",weight:15.9994,symbol:"O"},{position:9,name:"Fluorine",weight:18.9984,symbol:"F"},{position:10,name:"Neon",weight:20.1797,symbol:"Ne"},{position:11,name:"Sodium",weight:22.9897,symbol:"Na"},{position:12,name:"Magnesium",weight:24.305,symbol:"Mg"},{position:13,name:"Aluminum",weight:26.9815,symbol:"Al"},{position:14,name:"Silicon",weight:28.0855,symbol:"Si"},{position:15,name:"Phosphorus",weight:30.9738,symbol:"P"},{position:16,name:"Sulfur",weight:32.065,symbol:"S"},{position:17,name:"Chlorine",weight:35.453,symbol:"Cl"},{position:18,name:"Argon",weight:39.948,symbol:"Ar"},{position:19,name:"Potassium",weight:39.0983,symbol:"K"},{position:20,name:"Calcium",weight:40.078,symbol:"Ca"}],f=function(){function e(){this.displayedColumns=["position","name","weight","symbol"],this.dataSource=new v,this.preservedNameValues=new WeakMap,this.preservedWeightValues=new WeakMap}return e.prototype.onSubmitName=function(e,t){t.valid&&(e.name=t.value.name)},e.prototype.onSubmitWeight=function(e,t){t.valid&&(e.weight=t.value.weight)},e.decorators=[{type:t.Component,args:[{selector:"popover-edit-mat-table-flex-example",template:'<mat-table class="example-table" editable [dataSource]="dataSource">\n  \x3c!--\n    This edit lens is specified outside of the cell and must explicitly declare\n    its context. It could be reused in multiple cells.\n  --\x3e\n  <ng-template #weightEdit let-element>\n    <div>\n      <form #f="ngForm"\n          matEditLens\n          (ngSubmit)="onSubmitWeight(element, f)"\n          [matEditLensPreservedFormValue]="preservedWeightValues.get(element)"\n          (matEditLensPreservedFormValueChange)="preservedWeightValues.set(element, $event)">\n        <div mat-edit-content>\n          <mat-form-field>\n            <input matInput type="number" [ngModel]="element.weight" name="weight" required>\n          </mat-form-field>\n        </div>\n      </form>\n    </div>\n  </ng-template>\n\n  \x3c!-- Position Column --\x3e\n  <ng-container matColumnDef="position">\n    <mat-header-cell *matHeaderCellDef> No. </mat-header-cell>\n    <mat-cell *matCellDef="let element"> {{element.position}} </mat-cell>\n  </ng-container>\n\n  \x3c!-- Name Column --\x3e\n  <ng-container matColumnDef="name">\n    <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\n    <mat-cell *matCellDef="let element"\n        [matPopoverEdit]="nameEdit">\n      {{element.name}}\n      \n      \x3c!-- This edit is defined in the cell and can implicitly access element --\x3e\n      <ng-template #nameEdit>\n        <div>\n          <form #f="ngForm"\n              matEditLens\n              (ngSubmit)="onSubmitName(element, f)"\n              [matEditLensPreservedFormValue]="preservedNameValues.get(element)"\n              (matEditLensPreservedFormValueChange)="preservedNameValues.set(element, $event)">\n            <h2 mat-edit-title>Name</h2>\n            <div mat-edit-content>\n              <mat-form-field>\n                <input matInput [ngModel]="element.name" name="name" required>\n              </mat-form-field>\n            </div>\n            <div mat-edit-actions>\n              <button mat-button type="submit">Confirm</button>\n              <button mat-button matEditRevert>Revert</button>\n              <button mat-button matEditClose>Close</button>\n            </div>\n          </form>\n        </div>\n      </ng-template>\n\n      <span *matRowHoverContent>\n        <button mat-icon-button matEditOpen><mat-icon>edit</mat-icon></button>\n      </span>\n    </mat-cell>\n  </ng-container>\n\n  \x3c!-- Weight Column --\x3e\n  <ng-container matColumnDef="weight">\n    <mat-header-cell *matHeaderCellDef> Weight </mat-header-cell>\n    <mat-cell *matCellDef="let element"\n        [matPopoverEdit]="weightEdit" [matPopoverEditContext]="element">\n      {{element.weight}}\n      \n      <span *matRowHoverContent>\n        <button mat-icon-button matEditOpen><mat-icon>edit</mat-icon></button>\n      </span>\n      </mat-cell>\n  </ng-container>\n\n  \x3c!-- Symbol Column --\x3e\n  <ng-container matColumnDef="symbol">\n    <mat-header-cell *matHeaderCellDef> Symbol </mat-header-cell>\n    <mat-cell *matCellDef="let element"> {{element.symbol}} </mat-cell>\n  </ng-container>\n\n  <mat-header-row *matHeaderRowDef="displayedColumns"></mat-header-row>\n  <mat-row *matRowDef="let row; columns: displayedColumns;"></mat-row>\n</mat-table>\n',styles:[".example-table {\n  width: 100%;\n}\n\n/*.example-table th {\n  text-align: left;\n}\n\n.example-table td,\n.example-table th {\n  width: 25%;\n}*/\n"]}]}],e}(),v=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.data=new u.BehaviorSubject(b),t}return s.__extends(t,e),t.prototype.connect=function(){return this.data},t.prototype.disconnect=function(){},t}(d.DataSource),w=[{position:1,name:"Hydrogen",weight:1.0079,symbol:"H"},{position:2,name:"Helium",weight:4.0026,symbol:"He"},{position:3,name:"Lithium",weight:6.941,symbol:"Li"},{position:4,name:"Beryllium",weight:9.0122,symbol:"Be"},{position:5,name:"Boron",weight:10.811,symbol:"B"},{position:6,name:"Carbon",weight:12.0107,symbol:"C"},{position:7,name:"Nitrogen",weight:14.0067,symbol:"N"},{position:8,name:"Oxygen",weight:15.9994,symbol:"O"},{position:9,name:"Fluorine",weight:18.9984,symbol:"F"},{position:10,name:"Neon",weight:20.1797,symbol:"Ne"},{position:11,name:"Sodium",weight:22.9897,symbol:"Na"},{position:12,name:"Magnesium",weight:24.305,symbol:"Mg"},{position:13,name:"Aluminum",weight:26.9815,symbol:"Al"},{position:14,name:"Silicon",weight:28.0855,symbol:"Si"},{position:15,name:"Phosphorus",weight:30.9738,symbol:"P"},{position:16,name:"Sulfur",weight:32.065,symbol:"S"},{position:17,name:"Chlorine",weight:35.453,symbol:"Cl"},{position:18,name:"Argon",weight:39.948,symbol:"Ar"},{position:19,name:"Potassium",weight:39.0983,symbol:"K"},{position:20,name:"Calcium",weight:40.078,symbol:"Ca"}],y=function(){function e(e){this._snackBar=e,this.displayedColumns=["position","name","weight","symbol"],this.dataSource=new C,this.nameValues=new p.FormValueContainer,this.weightValues=new p.FormValueContainer}return e.prototype.onSubmitName=function(e,t){t.valid&&(e.name=t.value.name)},e.prototype.onSubmitWeight=function(e,t){t.valid&&(e.weight=t.value.weight)},e.prototype.goodJob=function(e){this._snackBar.open("Way to go, "+e.name+"!",void 0,{duration:2e3})},e.prototype.badJob=function(e){this._snackBar.open("You have failed me for the last time, #"+e.position+".",void 0,{duration:2e3})},e.decorators=[{type:t.Component,args:[{selector:"popover-edit-mat-table-example",template:'<table class="example-table" mat-table editable [dataSource]="dataSource">\n  \x3c!--\n    This edit lens is specified outside of the cell and must explicitly declare\n    its context. It could be reused in multiple cells.\n  --\x3e\n  <ng-template #weightEdit let-element>\n    <div>\n      <form #f="ngForm"\n          matEditLens\n          (ngSubmit)="onSubmitWeight(element, f)"\n          [(matEditLensPreservedFormValue)]="weightValues.for(element).value">\n        <div mat-edit-content>\n          <mat-form-field>\n            <input matInput type="number" [ngModel]="element.weight" name="weight" required>\n          </mat-form-field>\n        </div>\n      </form>\n    </div>\n  </ng-template>\n\n  \x3c!-- Position Column --\x3e\n  <ng-container matColumnDef="position">\n    <th mat-header-cell *matHeaderCellDef> No. </th>\n    <td mat-cell *matCellDef="let element">\n      {{element.position}}\n\n      \x3c!-- Row hover content in a non-edit cell. --\x3e\n      <span *matRowHoverContent>\n        <button mat-icon-button (click)="goodJob(element)">\n          <mat-icon>thumb_up</mat-icon>\n        </button>\n        <button mat-icon-button (click)="badJob(element)">\n          <mat-icon>thumb_down</mat-icon>\n        </button>\n      </span>\n    </td>\n  </ng-container>\n\n  \x3c!-- Name Column --\x3e\n  <ng-container matColumnDef="name">\n    <th mat-header-cell *matHeaderCellDef> Name </th>\n    <td mat-cell *matCellDef="let element"\n        [matPopoverEdit]="nameEdit">\n      {{element.name}}\n      \n      \x3c!-- This edit is defined in the cell and can implicitly access element --\x3e\n      <ng-template #nameEdit>\n        <div>\n          <form #f="ngForm"\n              matEditLens\n              (ngSubmit)="onSubmitName(element, f)"\n              [(matEditLensPreservedFormValue)]="nameValues.for(element).value">\n            <h2 mat-edit-title>Name</h2>\n            <div mat-edit-content>\n              <mat-form-field>\n                <input matInput [ngModel]="element.name" name="name" required>\n              </mat-form-field>\n            </div>\n            <div mat-edit-actions>\n              <button mat-button type="submit">Confirm</button>\n              <button mat-button matEditRevert>Revert</button>\n              <button mat-button matEditClose>Close</button>\n            </div>\n          </form>\n        </div>\n      </ng-template>\n\n      <span *matRowHoverContent>\n        <button mat-icon-button matEditOpen><mat-icon>edit</mat-icon></button>\n      </span>\n    </td>\n  </ng-container>\n\n  \x3c!-- Weight Column --\x3e\n  <ng-container matColumnDef="weight">\n    <th mat-header-cell *matHeaderCellDef> Weight </th>\n    <td mat-cell *matCellDef="let element"\n        [matPopoverEdit]="weightEdit" [matPopoverEditContext]="element">\n      {{element.weight}}\n      \n      <span *matRowHoverContent>\n        <button mat-icon-button matEditOpen><mat-icon>edit</mat-icon></button>\n      </span>\n    </td>\n  </ng-container>\n\n  \x3c!-- Symbol Column --\x3e\n  <ng-container matColumnDef="symbol">\n    <th mat-header-cell *matHeaderCellDef> Symbol </th>\n    <td mat-cell *matCellDef="let element"> {{element.symbol}} </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>\n  <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>\n</table>\n',styles:[".example-table {\n  width: 100%;\n}\n\n.example-table th {\n  text-align: left;\n}\n\n.example-table td,\n.example-table th {\n  width: 25%;\n}\n"]}]}],e.ctorParameters=function(){return[{type:l.MatSnackBar}]},e}(),C=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.data=new u.BehaviorSubject(w),t}return s.__extends(t,e),t.prototype.connect=function(){return this.data},t.prototype.disconnect=function(){},t}(d.DataSource),x=[{position:1,name:"Hydrogen",weight:1.0079,symbol:"H"},{position:2,name:"Helium",weight:4.0026,symbol:"He"},{position:3,name:"Lithium",weight:6.941,symbol:"Li"},{position:4,name:"Beryllium",weight:9.0122,symbol:"Be"},{position:5,name:"Boron",weight:10.811,symbol:"B"},{position:6,name:"Carbon",weight:12.0107,symbol:"C"},{position:7,name:"Nitrogen",weight:14.0067,symbol:"N"},{position:8,name:"Oxygen",weight:15.9994,symbol:"O"},{position:9,name:"Fluorine",weight:18.9984,symbol:"F"},{position:10,name:"Neon",weight:20.1797,symbol:"Ne"},{position:11,name:"Sodium",weight:22.9897,symbol:"Na"},{position:12,name:"Magnesium",weight:24.305,symbol:"Mg"},{position:13,name:"Aluminum",weight:26.9815,symbol:"Al"},{position:14,name:"Silicon",weight:28.0855,symbol:"Si"},{position:15,name:"Phosphorus",weight:30.9738,symbol:"P"},{position:16,name:"Sulfur",weight:32.065,symbol:"S"},{position:17,name:"Chlorine",weight:35.453,symbol:"Cl"},{position:18,name:"Argon",weight:39.948,symbol:"Ar"},{position:19,name:"Potassium",weight:39.0983,symbol:"K"},{position:20,name:"Calcium",weight:40.078,symbol:"Ca"}],N=function(){function e(){this.displayedColumns=["position","name","weight","symbol"],this.dataSource=new E,this.preservedNameValues=new WeakMap,this.preservedWeightValues=new WeakMap}return e.prototype.onSubmitName=function(e,t){t.valid&&(e.name=t.value.name)},e.prototype.onSubmitWeight=function(e,t){t.valid&&(e.weight=t.value.weight)},e.decorators=[{type:t.Component,args:[{selector:"popover-edit-tab-out-mat-table-example",template:'<table class="example-table" mat-table editable [dataSource]="dataSource">\n  \x3c!--\n    This edit lens is specified outside of the cell and must explicitly declare\n    its context. It could be reused in multiple cells.\n  --\x3e\n  <ng-template #weightEdit let-element>\n    <div>\n      <form #f="ngForm"\n          matEditLens\n          matEditLensClickOutBehavior="submit"\n          (ngSubmit)="onSubmitWeight(element, f)"\n          [matEditLensPreservedFormValue]="preservedWeightValues.get(element)"\n          (matEditLensPreservedFormValueChange)="preservedWeightValues.set(element, $event)">\n        <div mat-edit-content>\n          <mat-form-field>\n            <input matInput type="number" [ngModel]="element.weight" name="weight" required>\n          </mat-form-field>\n        </div>\n      </form>\n    </div>\n  </ng-template>\n\n  \x3c!-- Position Column --\x3e\n  <ng-container matColumnDef="position">\n    <th mat-header-cell *matHeaderCellDef> No. </th>\n    <td mat-cell *matCellDef="let element"> {{element.position}} </td>\n  </ng-container>\n\n  \x3c!-- Name Column --\x3e\n  <ng-container matColumnDef="name">\n    <th mat-header-cell *matHeaderCellDef> Name </th>\n    <td mat-cell *matCellDef="let element"\n        [matPopoverEdit]="nameEdit" matPopoverEditTabOut\n        matEditOpen>\n      {{element.name}}\n      \n      \x3c!-- This edit is defined in the cell and can implicitly access element --\x3e\n      <ng-template #nameEdit>\n        <div>\n          <form #f="ngForm"\n              matEditLens\n              matEditLensClickOutBehavior="submit"\n              (ngSubmit)="onSubmitName(element, f)"\n              [matEditLensPreservedFormValue]="preservedNameValues.get(element)"\n              (matEditLensPreservedFormValueChange)="preservedNameValues.set(element, $event)">\n            <div mat-edit-content>\n              <mat-form-field>\n                <input matInput [ngModel]="element.name" name="name" required>\n              </mat-form-field>\n            </div>\n          </form>\n        </div>\n      </ng-template>\n\n      <span *matRowHoverContent>\n        <mat-icon>edit</mat-icon>\n      </span>\n    </td>\n  </ng-container>\n\n  \x3c!-- Weight Column --\x3e\n  <ng-container matColumnDef="weight">\n    <th mat-header-cell *matHeaderCellDef> Weight </th>\n    <td mat-cell *matCellDef="let element"\n        [matPopoverEdit]="weightEdit" matPopoverEditTabOut\n        [matPopoverEditContext]="element"\n        matEditOpen>\n      {{element.weight}}\n      \n      <span *matRowHoverContent>\n        <mat-icon>edit</mat-icon>\n      </span>\n    </td>\n  </ng-container>\n\n  \x3c!-- Symbol Column --\x3e\n  <ng-container matColumnDef="symbol">\n    <th mat-header-cell *matHeaderCellDef> Symbol </th>\n    <td mat-cell *matCellDef="let element"> {{element.symbol}} </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>\n  <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>\n</table>\n',styles:[".example-table {\n  width: 100%;\n}\n\n.example-table th {\n  text-align: left;\n}\n\n.example-table td,\n.example-table th {\n  width: 25%;\n}\n"]}]}],e}(),E=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.data=new u.BehaviorSubject(x),t}return s.__extends(t,e),t.prototype.connect=function(){return this.data},t.prototype.disconnect=function(){},t}(d.DataSource),S=[g,y,f,N],D=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{imports:[o.MatButtonModule,i.MatIconModule,m.MatInputModule,a.MatPopoverEditModule,l.MatSnackBarModule,r.MatTableModule,n.FormsModule],declarations:S,exports:S}]}],e}();e.PopoverEditCellSpanMatTableExample=g,e.PopoverEditMatTableExample=y,e.PopoverEditMatTableFlexExample=f,e.PopoverEditTabOutMatTableExample=N,e.PopoverEditExamplesModule=D,Object.defineProperty(e,"__esModule",{value:!0})});