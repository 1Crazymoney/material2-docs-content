{"version":3,"sources":["src/material-examples/material-examples-material-table.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","materialExamples","material","table","common","core","button","buttonToggle","checkbox","icon","input","paginator","progressSpinner","sort","animations","http","rxjs","operators","cdk","collections","this","ELEMENT_DATA","position","name","weight","symbol","TableBasicFlexExample","displayedColumns","dataSource","decorators","type","Component","args","selector","template","styles","ELEMENT_DATA$1","TableBasicExample","ELEMENT_DATA$2","TableDynamicColumnsExample","columnsToDisplay","slice","data","prototype","addColumn","randomColumn","Math","floor","random","length","push","removeColumn","pop","shuffle","currentIndex","randomIndex","temp","TableExpandableRowsExample","ELEMENT_DATA$3","trigger","state","style","height","minHeight","transition","animate","description","ELEMENT_DATA$4","TableFilteringExample","MatTableDataSource","applyFilter","filterValue","filter","trim","toLowerCase","TableFooterRowExample","transactions","item","cost","getTotalCost","map","t","reduce","acc","value","TableHttpExample","_httpClient","resultsLength","isLoadingResults","isRateLimitReached","ngAfterViewInit","_this","exampleDatabase","ExampleHttpDatabase","sortChange","subscribe","pageIndex","merge","page","pipe","startWith","switchMap","getRepoIssues","active","direction","total_count","items","catchError","of","ctorParameters","HttpClient","propDecorators","ViewChild","MatPaginator","static","MatSort","order","get","href","TableMultipleHeaderFooterExample","COLORS","NAMES","TableOverviewExample","users","Array","from","_","k","createNewUser","id","round","charAt","toString","progress","color","ngOnInit","firstPage","TablePaginationExample","ELEMENT_DATA$5","TableRowContextExample","ELEMENT_DATA$6","TableSelectionExample","selection","SelectionModel","isAllSelected","selected","masterToggle","clear","forEach","row","select","checkboxLabel","isSelected","ELEMENT_DATA$7","TableSortingExample","TableStickyColumnsExample","ELEMENT_DATA$8","TableStickyComplexFlexExample","ELEMENT_DATA$9","tables","fill","isSticky","buttonToggleGroup","indexOf","TableStickyComplexExample","ELEMENT_DATA$a","TableStickyFooterExample","TableStickyHeaderExample","ELEMENT_DATA$b","ELEMENT_DATA$c","TableTextColumnAdvancedExample","decimalPipe","DecimalPipe","getWeight","transform","ELEMENT_DATA$d","TableTextColumnExample","ELEMENT_DATA$e","TableWrappedExample","WrapperTable","ngAfterContentInit","columnDefs","columnDef","addColumnDef","rowDefs","rowDef","addRowDef","headerRowDefs","headerRowDef","addHeaderRowDef","ContentChildren","MatHeaderRowDef","MatRowDef","MatColumnDef","MatTable","columns","Input","EXAMPLES","TableExamplesModule","NgModule","imports","CommonModule","MatButtonModule","MatButtonToggleModule","MatCheckboxModule","MatIconModule","MatInputModule","MatPaginatorModule","MatProgressSpinnerModule","MatSortModule","MatTableModule","declarations","Object","defineProperty"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/material/button'), require('@angular/material/button-toggle'), require('@angular/material/checkbox'), require('@angular/material/icon'), require('@angular/material/input'), require('@angular/material/paginator'), require('@angular/material/progress-spinner'), require('@angular/material/sort'), require('@angular/material/table'), require('@angular/animations'), require('@angular/common/http'), require('rxjs'), require('rxjs/operators'), require('@angular/cdk/collections')) :\n    typeof define === 'function' && define.amd ? define('@angular/material-examples/material/table', ['exports', '@angular/common', '@angular/core', '@angular/material/button', '@angular/material/button-toggle', '@angular/material/checkbox', '@angular/material/icon', '@angular/material/input', '@angular/material/paginator', '@angular/material/progress-spinner', '@angular/material/sort', '@angular/material/table', '@angular/animations', '@angular/common/http', 'rxjs', 'rxjs/operators', '@angular/cdk/collections'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.materialExamples = global.ng.materialExamples || {}, global.ng.materialExamples.material = global.ng.materialExamples.material || {}, global.ng.materialExamples.material.table = {}), global.ng.common, global.ng.core, global.ng.material.button, global.ng.material.buttonToggle, global.ng.material.checkbox, global.ng.material.icon, global.ng.material.input, global.ng.material.paginator, global.ng.material.progressSpinner, global.ng.material.sort, global.ng.material.table, global.ng.animations, global.ng.common.http, global.rxjs, global.rxjs.operators, global.ng.cdk.collections));\n}(this, function (exports, common, core, button, buttonToggle, checkbox, icon, input, paginator, progressSpinner, sort, table, animations, http, rxjs, operators, collections) { 'use strict';\n\n    var ELEMENT_DATA = [\n        { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n        { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n        { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n        { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n        { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n        { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n        { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n        { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n        { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n        { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n    ];\n    /**\n     * @title Basic use of `<mat-table>` (uses display flex)\n     */\n    var TableBasicFlexExample = /** @class */ (function () {\n        function TableBasicFlexExample() {\n            this.displayedColumns = ['position', 'name', 'weight', 'symbol'];\n            this.dataSource = ELEMENT_DATA;\n        }\n        TableBasicFlexExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'table-basic-flex-example',\n                        template: \"<mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8\\\">\\n  <!-- Position Column -->\\n  <ng-container matColumnDef=\\\"position\\\">\\n    <mat-header-cell *matHeaderCellDef> No. </mat-header-cell>\\n    <mat-cell *matCellDef=\\\"let element\\\"> {{element.position}} </mat-cell>\\n  </ng-container>\\n\\n  <!-- Name Column -->\\n  <ng-container matColumnDef=\\\"name\\\">\\n    <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\\n    <mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </mat-cell>\\n  </ng-container>\\n\\n  <!-- Weight Column -->\\n  <ng-container matColumnDef=\\\"weight\\\">\\n    <mat-header-cell *matHeaderCellDef> Weight </mat-header-cell>\\n    <mat-cell *matCellDef=\\\"let element\\\"> {{element.weight}} </mat-cell>\\n  </ng-container>\\n\\n  <!-- Symbol Column -->\\n  <ng-container matColumnDef=\\\"symbol\\\">\\n    <mat-header-cell *matHeaderCellDef> Symbol </mat-header-cell>\\n    <mat-cell *matCellDef=\\\"let element\\\"> {{element.symbol}} </mat-cell>\\n  </ng-container>\\n\\n  <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n  <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\n</mat-table>\",\n                        styles: [\"table {\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        return TableBasicFlexExample;\n    }());\n\n    var ELEMENT_DATA$1 = [\n        { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n        { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n        { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n        { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n        { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n        { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n        { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n        { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n        { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n        { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n    ];\n    /**\n     * @title Basic use of `<table mat-table>`\n     */\n    var TableBasicExample = /** @class */ (function () {\n        function TableBasicExample() {\n            this.displayedColumns = ['position', 'name', 'weight', 'symbol'];\n            this.dataSource = ELEMENT_DATA$1;\n        }\n        TableBasicExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'table-basic-example',\n                        template: \"<table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8\\\">\\n\\n  <!--- Note that these columns can be defined in any order.\\n        The actual rendered columns are set as a property on the row definition\\\" -->\\n\\n  <!-- Position Column -->\\n  <ng-container matColumnDef=\\\"position\\\">\\n    <th mat-header-cell *matHeaderCellDef> No. </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.position}} </td>\\n  </ng-container>\\n\\n  <!-- Name Column -->\\n  <ng-container matColumnDef=\\\"name\\\">\\n    <th mat-header-cell *matHeaderCellDef> Name </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\n  </ng-container>\\n\\n  <!-- Weight Column -->\\n  <ng-container matColumnDef=\\\"weight\\\">\\n    <th mat-header-cell *matHeaderCellDef> Weight </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.weight}} </td>\\n  </ng-container>\\n\\n  <!-- Symbol Column -->\\n  <ng-container matColumnDef=\\\"symbol\\\">\\n    <th mat-header-cell *matHeaderCellDef> Symbol </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.symbol}} </td>\\n  </ng-container>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n</table>\\n\\n\",\n                        styles: [\"table {\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        return TableBasicExample;\n    }());\n\n    var ELEMENT_DATA$2 = [\n        { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n        { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n        { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n        { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n        { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n        { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n        { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n        { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n        { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n        { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n    ];\n    /**\n     * @title Table dynamically changing the columns displayed\n     */\n    var TableDynamicColumnsExample = /** @class */ (function () {\n        function TableDynamicColumnsExample() {\n            this.displayedColumns = ['name', 'weight', 'symbol', 'position'];\n            this.columnsToDisplay = this.displayedColumns.slice();\n            this.data = ELEMENT_DATA$2;\n        }\n        TableDynamicColumnsExample.prototype.addColumn = function () {\n            var randomColumn = Math.floor(Math.random() * this.displayedColumns.length);\n            this.columnsToDisplay.push(this.displayedColumns[randomColumn]);\n        };\n        TableDynamicColumnsExample.prototype.removeColumn = function () {\n            if (this.columnsToDisplay.length) {\n                this.columnsToDisplay.pop();\n            }\n        };\n        TableDynamicColumnsExample.prototype.shuffle = function () {\n            var currentIndex = this.columnsToDisplay.length;\n            while (0 !== currentIndex) {\n                var randomIndex = Math.floor(Math.random() * currentIndex);\n                currentIndex -= 1;\n                // Swap\n                var temp = this.columnsToDisplay[currentIndex];\n                this.columnsToDisplay[currentIndex] = this.columnsToDisplay[randomIndex];\n                this.columnsToDisplay[randomIndex] = temp;\n            }\n        };\n        TableDynamicColumnsExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'table-dynamic-columns-example',\n                        template: \"<button mat-raised-button (click)=\\\"addColumn()\\\"> Add column </button>\\n<button mat-raised-button (click)=\\\"removeColumn()\\\"> Remove column </button>\\n<button mat-raised-button (click)=\\\"shuffle()\\\"> Shuffle </button>\\n\\n<table mat-table [dataSource]=\\\"data\\\" class=\\\"mat-elevation-z8\\\">\\n  <ng-container [matColumnDef]=\\\"column\\\" *ngFor=\\\"let column of displayedColumns\\\">\\n    <th mat-header-cell *matHeaderCellDef> {{column}} </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element[column]}} </td>\\n  </ng-container>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"columnsToDisplay\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: columnsToDisplay;\\\"></tr>\\n</table>\\n\",\n                        styles: [\"table {\\n  width: 100%;\\n}\\n\\nbutton {\\n  margin: 16px 8px;\\n}\\n\"]\n                    }] }\n        ];\n        return TableDynamicColumnsExample;\n    }());\n\n    /**\n     * @title Table with expandable rows\n     */\n    var TableExpandableRowsExample = /** @class */ (function () {\n        function TableExpandableRowsExample() {\n            this.dataSource = ELEMENT_DATA$3;\n            this.columnsToDisplay = ['name', 'weight', 'symbol', 'position'];\n        }\n        TableExpandableRowsExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'table-expandable-rows-example',\n                        template: \"<table mat-table\\n       [dataSource]=\\\"dataSource\\\" multiTemplateDataRows\\n       class=\\\"mat-elevation-z8\\\">\\n  <ng-container matColumnDef=\\\"{{column}}\\\" *ngFor=\\\"let column of columnsToDisplay\\\">\\n    <th mat-header-cell *matHeaderCellDef> {{column}} </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element[column]}} </td>\\n  </ng-container>\\n\\n  <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\\n  <ng-container matColumnDef=\\\"expandedDetail\\\">\\n    <td mat-cell *matCellDef=\\\"let element\\\" [attr.colspan]=\\\"columnsToDisplay.length\\\">\\n      <div class=\\\"example-element-detail\\\"\\n           [@detailExpand]=\\\"element == expandedElement ? 'expanded' : 'collapsed'\\\">\\n        <div class=\\\"example-element-diagram\\\">\\n          <div class=\\\"example-element-position\\\"> {{element.position}} </div>\\n          <div class=\\\"example-element-symbol\\\"> {{element.symbol}} </div>\\n          <div class=\\\"example-element-name\\\"> {{element.name}} </div>\\n          <div class=\\\"example-element-weight\\\"> {{element.weight}} </div>\\n        </div>\\n        <div class=\\\"example-element-description\\\">\\n          {{element.description}}\\n          <span class=\\\"example-element-description-attribution\\\"> -- Wikipedia </span>\\n        </div>\\n      </div>\\n    </td>\\n  </ng-container>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"columnsToDisplay\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let element; columns: columnsToDisplay;\\\"\\n      class=\\\"example-element-row\\\"\\n      [class.example-expanded-row]=\\\"expandedElement === element\\\"\\n      (click)=\\\"expandedElement = expandedElement === element ? null : element\\\">\\n  </tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: ['expandedDetail']\\\" class=\\\"example-detail-row\\\"></tr>\\n</table>\\n\",\n                        animations: [\n                            animations.trigger('detailExpand', [\n                                animations.state('collapsed', animations.style({ height: '0px', minHeight: '0' })),\n                                animations.state('expanded', animations.style({ height: '*' })),\n                                animations.transition('expanded <=> collapsed', animations.animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n                            ]),\n                        ],\n                        styles: [\"table {\\n  width: 100%;\\n}\\n\\ntr.example-detail-row {\\n  height: 0;\\n}\\n\\ntr.example-element-row:not(.example-expanded-row):hover {\\n  background: #777;\\n}\\n\\ntr.example-element-row:not(.example-expanded-row):active {\\n  background: #efefef;\\n}\\n\\n.example-element-row td {\\n  border-bottom-width: 0;\\n}\\n\\n.example-element-detail {\\n  overflow: hidden;\\n  display: flex;\\n}\\n\\n.example-element-diagram {\\n  min-width: 80px;\\n  border: 2px solid black;\\n  padding: 8px;\\n  font-weight: lighter;\\n  margin: 8px 0;\\n  height: 104px;\\n}\\n\\n.example-element-symbol {\\n  font-weight: bold;\\n  font-size: 40px;\\n  line-height: normal;\\n}\\n\\n.example-element-description {\\n  padding: 16px;\\n}\\n\\n.example-element-description-attribution {\\n  opacity: 0.5;\\n}\\n\"]\n                    }] }\n        ];\n        return TableExpandableRowsExample;\n    }());\n    var ELEMENT_DATA$3 = [\n        {\n            position: 1,\n            name: 'Hydrogen',\n            weight: 1.0079,\n            symbol: 'H',\n            description: \"Hydrogen is a chemical element with symbol H and atomic number 1. With a standard\\n        atomic weight of 1.008, hydrogen is the lightest element on the periodic table.\"\n        }, {\n            position: 2,\n            name: 'Helium',\n            weight: 4.0026,\n            symbol: 'He',\n            description: \"Helium is a chemical element with symbol He and atomic number 2. It is a\\n        colorless, odorless, tasteless, non-toxic, inert, monatomic gas, the first in the noble gas\\n        group in the periodic table. Its boiling point is the lowest among all the elements.\"\n        }, {\n            position: 3,\n            name: 'Lithium',\n            weight: 6.941,\n            symbol: 'Li',\n            description: \"Lithium is a chemical element with symbol Li and atomic number 3. It is a soft,\\n        silvery-white alkali metal. Under standard conditions, it is the lightest metal and the\\n        lightest solid element.\"\n        }, {\n            position: 4,\n            name: 'Beryllium',\n            weight: 9.0122,\n            symbol: 'Be',\n            description: \"Beryllium is a chemical element with symbol Be and atomic number 4. It is a\\n        relatively rare element in the universe, usually occurring as a product of the spallation of\\n        larger atomic nuclei that have collided with cosmic rays.\"\n        }, {\n            position: 5,\n            name: 'Boron',\n            weight: 10.811,\n            symbol: 'B',\n            description: \"Boron is a chemical element with symbol B and atomic number 5. Produced entirely\\n        by cosmic ray spallation and supernovae and not by stellar nucleosynthesis, it is a\\n        low-abundance element in the Solar system and in the Earth's crust.\"\n        }, {\n            position: 6,\n            name: 'Carbon',\n            weight: 12.0107,\n            symbol: 'C',\n            description: \"Carbon is a chemical element with symbol C and atomic number 6. It is nonmetallic\\n        and tetravalent\\u2014making four electrons available to form covalent chemical bonds. It belongs\\n        to group 14 of the periodic table.\"\n        }, {\n            position: 7,\n            name: 'Nitrogen',\n            weight: 14.0067,\n            symbol: 'N',\n            description: \"Nitrogen is a chemical element with symbol N and atomic number 7. It was first\\n        discovered and isolated by Scottish physician Daniel Rutherford in 1772.\"\n        }, {\n            position: 8,\n            name: 'Oxygen',\n            weight: 15.9994,\n            symbol: 'O',\n            description: \"Oxygen is a chemical element with symbol O and atomic number 8. It is a member of\\n         the chalcogen group on the periodic table, a highly reactive nonmetal, and an oxidizing\\n         agent that readily forms oxides with most elements as well as with other compounds.\"\n        }, {\n            position: 9,\n            name: 'Fluorine',\n            weight: 18.9984,\n            symbol: 'F',\n            description: \"Fluorine is a chemical element with symbol F and atomic number 9. It is the\\n        lightest halogen and exists as a highly toxic pale yellow diatomic gas at standard\\n        conditions.\"\n        }, {\n            position: 10,\n            name: 'Neon',\n            weight: 20.1797,\n            symbol: 'Ne',\n            description: \"Neon is a chemical element with symbol Ne and atomic number 10. It is a noble gas.\\n        Neon is a colorless, odorless, inert monatomic gas under standard conditions, with about\\n        two-thirds the density of air.\"\n        },\n    ];\n\n    var ELEMENT_DATA$4 = [\n        { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n        { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n        { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n        { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n        { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n        { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n        { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n        { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n        { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n        { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n    ];\n    /**\n     * @title Table with filtering\n     */\n    var TableFilteringExample = /** @class */ (function () {\n        function TableFilteringExample() {\n            this.displayedColumns = ['position', 'name', 'weight', 'symbol'];\n            this.dataSource = new table.MatTableDataSource(ELEMENT_DATA$4);\n        }\n        TableFilteringExample.prototype.applyFilter = function (filterValue) {\n            this.dataSource.filter = filterValue.trim().toLowerCase();\n        };\n        TableFilteringExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'table-filtering-example',\n                        template: \"<mat-form-field>\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n</mat-form-field>\\n\\n<table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8\\\">\\n\\n  <!-- Position Column -->\\n  <ng-container matColumnDef=\\\"position\\\">\\n    <th mat-header-cell *matHeaderCellDef> No. </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.position}} </td>\\n  </ng-container>\\n\\n  <!-- Name Column -->\\n  <ng-container matColumnDef=\\\"name\\\">\\n    <th mat-header-cell *matHeaderCellDef> Name </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\n  </ng-container>\\n\\n  <!-- Weight Column -->\\n  <ng-container matColumnDef=\\\"weight\\\">\\n    <th mat-header-cell *matHeaderCellDef> Weight </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.weight}} </td>\\n  </ng-container>\\n\\n  <!-- Symbol Column -->\\n  <ng-container matColumnDef=\\\"symbol\\\">\\n    <th mat-header-cell *matHeaderCellDef> Symbol </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.symbol}} </td>\\n  </ng-container>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n</table>\\n\",\n                        styles: [\"/* Structure */\\ntable {\\n  width: 100%;\\n}\\n\\n.mat-form-field {\\n  font-size: 14px;\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        return TableFilteringExample;\n    }());\n\n    /**\n     * @title Footer row table\n     */\n    var TableFooterRowExample = /** @class */ (function () {\n        function TableFooterRowExample() {\n            this.displayedColumns = ['item', 'cost'];\n            this.transactions = [\n                { item: 'Beach ball', cost: 4 },\n                { item: 'Towel', cost: 5 },\n                { item: 'Frisbee', cost: 2 },\n                { item: 'Sunscreen', cost: 4 },\n                { item: 'Cooler', cost: 25 },\n                { item: 'Swim suit', cost: 15 },\n            ];\n        }\n        /** Gets the total cost of all transactions. */\n        TableFooterRowExample.prototype.getTotalCost = function () {\n            return this.transactions.map(function (t) { return t.cost; }).reduce(function (acc, value) { return acc + value; }, 0);\n        };\n        TableFooterRowExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'table-footer-row-example',\n                        template: \"<table mat-table [dataSource]=\\\"transactions\\\" class=\\\"mat-elevation-z8\\\">\\n  <!-- Item Column -->\\n  <ng-container matColumnDef=\\\"item\\\">\\n    <th mat-header-cell *matHeaderCellDef> Item </th>\\n    <td mat-cell *matCellDef=\\\"let transaction\\\"> {{transaction.item}} </td>\\n    <td mat-footer-cell *matFooterCellDef> Total </td>\\n  </ng-container>\\n\\n  <!-- Cost Column -->\\n  <ng-container matColumnDef=\\\"cost\\\">\\n    <th mat-header-cell *matHeaderCellDef> Cost </th>\\n    <td mat-cell *matCellDef=\\\"let transaction\\\"> {{transaction.cost | currency}} </td>\\n    <td mat-footer-cell *matFooterCellDef> {{getTotalCost() | currency}} </td>\\n  </ng-container>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  <tr mat-footer-row *matFooterRowDef=\\\"displayedColumns\\\"></tr>\\n</table>\\n\",\n                        styles: [\"table {\\n  width: 100%;\\n}\\n\\ntr.mat-footer-row {\\n  font-weight: bold;\\n}\\n\"]\n                    }] }\n        ];\n        return TableFooterRowExample;\n    }());\n\n    /**\n     * @title Table retrieving data through HTTP\n     */\n    var TableHttpExample = /** @class */ (function () {\n        function TableHttpExample(_httpClient) {\n            this._httpClient = _httpClient;\n            this.displayedColumns = ['created', 'state', 'number', 'title'];\n            this.data = [];\n            this.resultsLength = 0;\n            this.isLoadingResults = true;\n            this.isRateLimitReached = false;\n        }\n        TableHttpExample.prototype.ngAfterViewInit = function () {\n            var _this = this;\n            this.exampleDatabase = new ExampleHttpDatabase(this._httpClient);\n            // If the user changes the sort order, reset back to the first page.\n            this.sort.sortChange.subscribe(function () { return _this.paginator.pageIndex = 0; });\n            rxjs.merge(this.sort.sortChange, this.paginator.page)\n                .pipe(operators.startWith({}), operators.switchMap(function () {\n                _this.isLoadingResults = true;\n                return _this.exampleDatabase.getRepoIssues(_this.sort.active, _this.sort.direction, _this.paginator.pageIndex);\n            }), operators.map(function (data) {\n                // Flip flag to show that loading has finished.\n                _this.isLoadingResults = false;\n                _this.isRateLimitReached = false;\n                _this.resultsLength = data.total_count;\n                return data.items;\n            }), operators.catchError(function () {\n                _this.isLoadingResults = false;\n                // Catch if the GitHub API has reached its rate limit. Return empty data.\n                _this.isRateLimitReached = true;\n                return rxjs.of([]);\n            })).subscribe(function (data) { return _this.data = data; });\n        };\n        TableHttpExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'table-http-example',\n                        template: \"<div class=\\\"example-container mat-elevation-z8\\\">\\n  <div class=\\\"example-loading-shade\\\"\\n       *ngIf=\\\"isLoadingResults || isRateLimitReached\\\">\\n    <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\n    <div class=\\\"example-rate-limit-reached\\\" *ngIf=\\\"isRateLimitReached\\\">\\n      GitHub's API rate limit has been reached. It will be reset in one minute.\\n    </div>\\n  </div>\\n\\n  <div class=\\\"example-table-container\\\">\\n\\n    <table mat-table [dataSource]=\\\"data\\\" class=\\\"example-table\\\"\\n           matSort matSortActive=\\\"created\\\" matSortDisableClear matSortDirection=\\\"desc\\\">\\n      <!-- Number Column -->\\n      <ng-container matColumnDef=\\\"number\\\">\\n        <th mat-header-cell *matHeaderCellDef>#</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.number}}</td>\\n      </ng-container>\\n\\n      <!-- Title Column -->\\n      <ng-container matColumnDef=\\\"title\\\">\\n        <th mat-header-cell *matHeaderCellDef>Title</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.title}}</td>\\n      </ng-container>\\n\\n      <!-- State Column -->\\n      <ng-container matColumnDef=\\\"state\\\">\\n        <th mat-header-cell *matHeaderCellDef>State</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.state}}</td>\\n      </ng-container>\\n\\n      <!-- Created Column -->\\n      <ng-container matColumnDef=\\\"created\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\\n          Created\\n        </th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.created_at | date}}</td>\\n      </ng-container>\\n\\n      <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n      <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n    </table>\\n  </div>\\n\\n  <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"30\\\"></mat-paginator>\\n</div>\\n\",\n                        styles: [\"/* Structure */\\n.example-container {\\n  position: relative;\\n  min-height: 200px;\\n}\\n\\n.example-table-container {\\n  position: relative;\\n  max-height: 400px;\\n  overflow: auto;\\n}\\n\\ntable {\\n  width: 100%;\\n}\\n\\n.example-loading-shade {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  bottom: 56px;\\n  right: 0;\\n  background: rgba(0, 0, 0, 0.15);\\n  z-index: 1;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n}\\n\\n.example-rate-limit-reached {\\n  color: #980000;\\n  max-width: 360px;\\n  text-align: center;\\n}\\n\\n/* Column Widths */\\n.mat-column-number,\\n.mat-column-state {\\n  max-width: 64px;\\n}\\n\\n.mat-column-created {\\n  max-width: 124px;\\n}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        TableHttpExample.ctorParameters = function () { return [\n            { type: http.HttpClient }\n        ]; };\n        TableHttpExample.propDecorators = {\n            paginator: [{ type: core.ViewChild, args: [paginator.MatPaginator, { static: false },] }],\n            sort: [{ type: core.ViewChild, args: [sort.MatSort, { static: false },] }]\n        };\n        return TableHttpExample;\n    }());\n    /** An example database that the data source uses to retrieve data for the table. */\n    var ExampleHttpDatabase = /** @class */ (function () {\n        function ExampleHttpDatabase(_httpClient) {\n            this._httpClient = _httpClient;\n        }\n        ExampleHttpDatabase.prototype.getRepoIssues = function (sort, order, page) {\n            var href = 'https://api.github.com/search/issues';\n            var requestUrl = href + \"?q=repo:angular/components&sort=\" + sort + \"&order=\" + order + \"&page=\" + (page + 1);\n            return this._httpClient.get(requestUrl);\n        };\n        return ExampleHttpDatabase;\n    }());\n\n    /**\n     * @title Table with multiple header and footer rows\n     */\n    var TableMultipleHeaderFooterExample = /** @class */ (function () {\n        function TableMultipleHeaderFooterExample() {\n            this.displayedColumns = ['item', 'cost'];\n            this.transactions = [\n                { item: 'Beach ball', cost: 4 },\n                { item: 'Towel', cost: 5 },\n                { item: 'Frisbee', cost: 2 },\n                { item: 'Sunscreen', cost: 4 },\n                { item: 'Cooler', cost: 25 },\n                { item: 'Swim suit', cost: 15 },\n            ];\n        }\n        /** Gets the total cost of all transactions. */\n        TableMultipleHeaderFooterExample.prototype.getTotalCost = function () {\n            return this.transactions.map(function (t) { return t.cost; }).reduce(function (acc, value) { return acc + value; }, 0);\n        };\n        TableMultipleHeaderFooterExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'table-multiple-header-footer-example',\n                        template: \"<table mat-table [dataSource]=\\\"transactions\\\" class=\\\"mat-elevation-z8\\\">\\n  <!-- Item Column -->\\n  <ng-container matColumnDef=\\\"item\\\">\\n    <th mat-header-cell *matHeaderCellDef> Item </th>\\n    <td mat-cell *matCellDef=\\\"let transaction\\\"> {{transaction.item}} </td>\\n    <td mat-footer-cell *matFooterCellDef> Total </td>\\n  </ng-container>\\n\\n  <!-- Cost Column -->\\n  <ng-container matColumnDef=\\\"cost\\\">\\n    <th mat-header-cell *matHeaderCellDef> Cost </th>\\n    <td mat-cell *matCellDef=\\\"let transaction\\\"> {{transaction.cost | currency}} </td>\\n    <td mat-footer-cell *matFooterCellDef> {{getTotalCost() | currency}} </td>\\n  </ng-container>\\n\\n  <!-- Item Description Column -->\\n  <ng-container matColumnDef=\\\"item-description\\\">\\n    <th mat-header-cell *matHeaderCellDef> Name of the item purchased </th>\\n  </ng-container>\\n\\n  <!-- Cost Description Column -->\\n  <ng-container matColumnDef=\\\"cost-description\\\">\\n    <th mat-header-cell *matHeaderCellDef> Cost of the item in USD </th>\\n  </ng-container>\\n\\n  <!-- Disclaimer column -->\\n  <ng-container matColumnDef=\\\"disclaimer\\\">\\n    <td mat-footer-cell *matFooterCellDef colspan=\\\"2\\\">\\n      Please note that the cost of items displayed are completely and totally made up.\\n    </td>\\n  </ng-container>\\n\\n  <!-- The table will render two header rows, one data row per data object, and two footer rows. -->\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"\\n      class=\\\"example-first-header-row\\\">\\n  </tr>\\n  <tr mat-header-row *matHeaderRowDef=\\\"['item-description', 'cost-description']\\\"\\n      class=\\\"example-second-header-row\\\">\\n  </tr>\\n\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n\\n  <tr mat-footer-row *matFooterRowDef=\\\"displayedColumns\\\" class=\\\"example-first-footer-row\\\"></tr>\\n  <tr mat-footer-row *matFooterRowDef=\\\"['disclaimer']\\\" class=\\\"example-second-footer-row\\\"></tr>\\n</table>\\n\",\n                        styles: [\"table {\\n  width: 100%;\\n}\\n\\n.example-first-header-row th {\\n  border-bottom: none;\\n}\\n\\n.example-second-header-row {\\n  font-style: italic;\\n}\\n\\n.example-first-footer-row {\\n  font-weight: bold;\\n}\\n\\n.example-second-footer-row td {\\n  color: #900000;\\n}\\n\"]\n                    }] }\n        ];\n        return TableMultipleHeaderFooterExample;\n    }());\n\n    /** Constants used to fill up our data base. */\n    var COLORS = [\n        'maroon', 'red', 'orange', 'yellow', 'olive', 'green', 'purple', 'fuchsia', 'lime', 'teal',\n        'aqua', 'blue', 'navy', 'black', 'gray'\n    ];\n    var NAMES = [\n        'Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack', 'Charlotte', 'Theodore', 'Isla', 'Oliver',\n        'Isabella', 'Jasper', 'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'\n    ];\n    /**\n     * @title Data table with sorting, pagination, and filtering.\n     */\n    var TableOverviewExample = /** @class */ (function () {\n        function TableOverviewExample() {\n            this.displayedColumns = ['id', 'name', 'progress', 'color'];\n            // Create 100 users\n            var users = Array.from({ length: 100 }, function (_, k) { return createNewUser(k + 1); });\n            // Assign the data to the data source for the table to render\n            this.dataSource = new table.MatTableDataSource(users);\n        }\n        TableOverviewExample.prototype.ngOnInit = function () {\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n        };\n        TableOverviewExample.prototype.applyFilter = function (filterValue) {\n            this.dataSource.filter = filterValue.trim().toLowerCase();\n            if (this.dataSource.paginator) {\n                this.dataSource.paginator.firstPage();\n            }\n        };\n        TableOverviewExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'table-overview-example',\n                        template: \"<mat-form-field>\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n</mat-form-field>\\n\\n<div class=\\\"mat-elevation-z8\\\">\\n  <table mat-table [dataSource]=\\\"dataSource\\\" matSort>\\n\\n    <!-- ID Column -->\\n    <ng-container matColumnDef=\\\"id\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> ID </th>\\n      <td mat-cell *matCellDef=\\\"let row\\\"> {{row.id}} </td>\\n    </ng-container>\\n\\n    <!-- Progress Column -->\\n    <ng-container matColumnDef=\\\"progress\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Progress </th>\\n      <td mat-cell *matCellDef=\\\"let row\\\"> {{row.progress}}% </td>\\n    </ng-container>\\n\\n    <!-- Name Column -->\\n    <ng-container matColumnDef=\\\"name\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\\n      <td mat-cell *matCellDef=\\\"let row\\\"> {{row.name}} </td>\\n    </ng-container>\\n\\n    <!-- Color Column -->\\n    <ng-container matColumnDef=\\\"color\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Color </th>\\n      <td mat-cell *matCellDef=\\\"let row\\\" [style.color]=\\\"row.color\\\"> {{row.color}} </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\">\\n    </tr>\\n  </table>\\n\\n  <mat-paginator [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\"></mat-paginator>\\n</div>\\n\",\n                        styles: [\"table {\\n  width: 100%;\\n}\\n\\n.mat-form-field {\\n  font-size: 14px;\\n  width: 100%;\\n}\\n\\ntd, th {\\n  width: 25%;\\n}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        TableOverviewExample.ctorParameters = function () { return []; };\n        TableOverviewExample.propDecorators = {\n            paginator: [{ type: core.ViewChild, args: [paginator.MatPaginator, { static: true },] }],\n            sort: [{ type: core.ViewChild, args: [sort.MatSort, { static: true },] }]\n        };\n        return TableOverviewExample;\n    }());\n    /** Builds and returns a new User. */\n    function createNewUser(id) {\n        var name = NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ' +\n            NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) + '.';\n        return {\n            id: id.toString(),\n            name: name,\n            progress: Math.round(Math.random() * 100).toString(),\n            color: COLORS[Math.round(Math.random() * (COLORS.length - 1))]\n        };\n    }\n\n    /**\n     * @title Table with pagination\n     */\n    var TablePaginationExample = /** @class */ (function () {\n        function TablePaginationExample() {\n            this.displayedColumns = ['position', 'name', 'weight', 'symbol'];\n            this.dataSource = new table.MatTableDataSource(ELEMENT_DATA$5);\n        }\n        TablePaginationExample.prototype.ngOnInit = function () {\n            this.dataSource.paginator = this.paginator;\n        };\n        TablePaginationExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'table-pagination-example',\n                        template: \"<div class=\\\"mat-elevation-z8\\\">\\n  <table mat-table [dataSource]=\\\"dataSource\\\">\\n\\n    <!-- Position Column -->\\n    <ng-container matColumnDef=\\\"position\\\">\\n      <th mat-header-cell *matHeaderCellDef> No. </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.position}} </td>\\n    </ng-container>\\n\\n    <!-- Name Column -->\\n    <ng-container matColumnDef=\\\"name\\\">\\n      <th mat-header-cell *matHeaderCellDef> Name </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\n    </ng-container>\\n\\n    <!-- Weight Column -->\\n    <ng-container matColumnDef=\\\"weight\\\">\\n      <th mat-header-cell *matHeaderCellDef> Weight </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.weight}} </td>\\n    </ng-container>\\n\\n    <!-- Symbol Column -->\\n    <ng-container matColumnDef=\\\"symbol\\\">\\n      <th mat-header-cell *matHeaderCellDef> Symbol </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.symbol}} </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  </table>\\n\\n  <mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\n</div>\\n\",\n                        styles: [\"table {\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        TablePaginationExample.propDecorators = {\n            paginator: [{ type: core.ViewChild, args: [paginator.MatPaginator, { static: true },] }]\n        };\n        return TablePaginationExample;\n    }());\n    var ELEMENT_DATA$5 = [\n        { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n        { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n        { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n        { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n        { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n        { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n        { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n        { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n        { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n        { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n        { position: 11, name: 'Sodium', weight: 22.9897, symbol: 'Na' },\n        { position: 12, name: 'Magnesium', weight: 24.305, symbol: 'Mg' },\n        { position: 13, name: 'Aluminum', weight: 26.9815, symbol: 'Al' },\n        { position: 14, name: 'Silicon', weight: 28.0855, symbol: 'Si' },\n        { position: 15, name: 'Phosphorus', weight: 30.9738, symbol: 'P' },\n        { position: 16, name: 'Sulfur', weight: 32.065, symbol: 'S' },\n        { position: 17, name: 'Chlorine', weight: 35.453, symbol: 'Cl' },\n        { position: 18, name: 'Argon', weight: 39.948, symbol: 'Ar' },\n        { position: 19, name: 'Potassium', weight: 39.0983, symbol: 'K' },\n        { position: 20, name: 'Calcium', weight: 40.078, symbol: 'Ca' },\n    ];\n\n    /**\n     * @title Table showing each row context properties.\n     */\n    var TableRowContextExample = /** @class */ (function () {\n        function TableRowContextExample() {\n            this.displayedColumns = ['$implicit', 'index', 'count', 'first', 'last', 'even', 'odd'];\n            this.data = ['one', 'two', 'three', 'four', 'five'];\n        }\n        TableRowContextExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'table-row-context-example',\n                        template: \"<table mat-table [dataSource]=\\\"data\\\" class=\\\"mat-elevation-z8\\\">\\n  <!-- Index Column -->\\n  <ng-container matColumnDef=\\\"$implicit\\\">\\n    <th mat-header-cell *matHeaderCellDef> $implicit </th>\\n    <td mat-cell *matCellDef=\\\"let data\\\"> {{data}} </td>\\n  </ng-container>\\n\\n  <!-- Index Column -->\\n  <ng-container matColumnDef=\\\"index\\\">\\n    <th mat-header-cell *matHeaderCellDef> index </th>\\n    <td mat-cell *matCellDef=\\\"let index = index\\\"> {{index}} </td>\\n  </ng-container>\\n\\n  <!-- Index Column -->\\n  <ng-container matColumnDef=\\\"count\\\">\\n    <th mat-header-cell *matHeaderCellDef> count </th>\\n    <td mat-cell *matCellDef=\\\"let count = count\\\"> {{count}} </td>\\n  </ng-container>\\n\\n  <!-- Index Column -->\\n  <ng-container matColumnDef=\\\"first\\\">\\n    <th mat-header-cell *matHeaderCellDef> first </th>\\n    <td mat-cell *matCellDef=\\\"let first = first\\\"> {{first}} </td>\\n  </ng-container>\\n\\n  <!-- Index Column -->\\n  <ng-container matColumnDef=\\\"last\\\">\\n    <th mat-header-cell *matHeaderCellDef> last </th>\\n    <td mat-cell *matCellDef=\\\"let last = last\\\"> {{last}} </td>\\n  </ng-container>\\n\\n  <!-- Index Column -->\\n  <ng-container matColumnDef=\\\"even\\\">\\n    <th mat-header-cell *matHeaderCellDef> even </th>\\n    <td mat-cell *matCellDef=\\\"let even = even\\\"> {{even}} </td>\\n  </ng-container>\\n\\n  <!-- Index Column -->\\n  <ng-container matColumnDef=\\\"odd\\\">\\n    <th mat-header-cell *matHeaderCellDef> odd </th>\\n    <td mat-cell *matCellDef=\\\"let odd = odd\\\"> {{odd}} </td>\\n  </ng-container>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n</table>\\n\",\n                        styles: [\"table {\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        return TableRowContextExample;\n    }());\n\n    var ELEMENT_DATA$6 = [\n        { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n        { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n        { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n        { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n        { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n        { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n        { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n        { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n        { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n        { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n    ];\n    /**\n     * @title Table with selection\n     */\n    var TableSelectionExample = /** @class */ (function () {\n        function TableSelectionExample() {\n            this.displayedColumns = ['select', 'position', 'name', 'weight', 'symbol'];\n            this.dataSource = new table.MatTableDataSource(ELEMENT_DATA$6);\n            this.selection = new collections.SelectionModel(true, []);\n        }\n        /** Whether the number of selected elements matches the total number of rows. */\n        TableSelectionExample.prototype.isAllSelected = function () {\n            var numSelected = this.selection.selected.length;\n            var numRows = this.dataSource.data.length;\n            return numSelected === numRows;\n        };\n        /** Selects all rows if they are not all selected; otherwise clear selection. */\n        TableSelectionExample.prototype.masterToggle = function () {\n            var _this = this;\n            this.isAllSelected() ?\n                this.selection.clear() :\n                this.dataSource.data.forEach(function (row) { return _this.selection.select(row); });\n        };\n        /** The label for the checkbox on the passed row */\n        TableSelectionExample.prototype.checkboxLabel = function (row) {\n            if (!row) {\n                return (this.isAllSelected() ? 'select' : 'deselect') + \" all\";\n            }\n            return (this.selection.isSelected(row) ? 'deselect' : 'select') + \" row \" + (row.position + 1);\n        };\n        TableSelectionExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'table-selection-example',\n                        template: \"<table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8\\\">\\n\\n  <!-- Checkbox Column -->\\n  <ng-container matColumnDef=\\\"select\\\">\\n    <th mat-header-cell *matHeaderCellDef>\\n      <mat-checkbox (change)=\\\"$event ? masterToggle() : null\\\"\\n                    [checked]=\\\"selection.hasValue() && isAllSelected()\\\"\\n                    [indeterminate]=\\\"selection.hasValue() && !isAllSelected()\\\"\\n                    [aria-label]=\\\"checkboxLabel()\\\">\\n      </mat-checkbox>\\n    </th>\\n    <td mat-cell *matCellDef=\\\"let row\\\">\\n      <mat-checkbox (click)=\\\"$event.stopPropagation()\\\"\\n                    (change)=\\\"$event ? selection.toggle(row) : null\\\"\\n                    [checked]=\\\"selection.isSelected(row)\\\"\\n                    [aria-label]=\\\"checkboxLabel(row)\\\">\\n      </mat-checkbox>\\n    </td>\\n  </ng-container>\\n\\n  <!-- Position Column -->\\n  <ng-container matColumnDef=\\\"position\\\">\\n    <th mat-header-cell *matHeaderCellDef> No. </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.position}} </td>\\n  </ng-container>\\n\\n  <!-- Name Column -->\\n  <ng-container matColumnDef=\\\"name\\\">\\n    <th mat-header-cell *matHeaderCellDef> Name </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\n  </ng-container>\\n\\n  <!-- Weight Column -->\\n  <ng-container matColumnDef=\\\"weight\\\">\\n    <th mat-header-cell *matHeaderCellDef> Weight </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.weight}} </td>\\n  </ng-container>\\n\\n  <!-- Symbol Column -->\\n  <ng-container matColumnDef=\\\"symbol\\\">\\n    <th mat-header-cell *matHeaderCellDef> Symbol </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.symbol}} </td>\\n  </ng-container>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"\\n      (click)=\\\"selection.toggle(row)\\\">\\n  </tr>\\n</table>\\n\",\n                        styles: [\"table {\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        return TableSelectionExample;\n    }());\n\n    var ELEMENT_DATA$7 = [\n        { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n        { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n        { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n        { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n        { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n        { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n        { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n        { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n        { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n        { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n    ];\n    /**\n     * @title Table with sorting\n     */\n    var TableSortingExample = /** @class */ (function () {\n        function TableSortingExample() {\n            this.displayedColumns = ['position', 'name', 'weight', 'symbol'];\n            this.dataSource = new table.MatTableDataSource(ELEMENT_DATA$7);\n        }\n        TableSortingExample.prototype.ngOnInit = function () {\n            this.dataSource.sort = this.sort;\n        };\n        TableSortingExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'table-sorting-example',\n                        template: \"<table mat-table [dataSource]=\\\"dataSource\\\" matSort class=\\\"mat-elevation-z8\\\">\\n\\n  <!-- Position Column -->\\n  <ng-container matColumnDef=\\\"position\\\">\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> No. </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.position}} </td>\\n  </ng-container>\\n\\n  <!-- Name Column -->\\n  <ng-container matColumnDef=\\\"name\\\">\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\n  </ng-container>\\n\\n  <!-- Weight Column -->\\n  <ng-container matColumnDef=\\\"weight\\\">\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Weight </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.weight}} </td>\\n  </ng-container>\\n\\n  <!-- Symbol Column -->\\n  <ng-container matColumnDef=\\\"symbol\\\">\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Symbol </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.symbol}} </td>\\n  </ng-container>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n</table>\\n\",\n                        styles: [\"table {\\n  width: 100%;\\n}\\n\\nth.mat-sort-header-sorted {\\n  color: black;\\n}\\n\"]\n                    }] }\n        ];\n        TableSortingExample.propDecorators = {\n            sort: [{ type: core.ViewChild, args: [sort.MatSort, { static: true },] }]\n        };\n        return TableSortingExample;\n    }());\n\n    /**\n     * @title Table with sticky columns\n     */\n    var TableStickyColumnsExample = /** @class */ (function () {\n        function TableStickyColumnsExample() {\n            this.displayedColumns = ['name', 'position', 'weight', 'symbol', 'position', 'weight', 'symbol', 'star'];\n            this.dataSource = ELEMENT_DATA$8;\n        }\n        TableStickyColumnsExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'table-sticky-columns-example',\n                        template: \"<div class=\\\"example-container mat-elevation-z8\\\">\\n  <table mat-table [dataSource]=\\\"dataSource\\\">\\n\\n    <!-- Name Column -->\\n    <ng-container matColumnDef=\\\"name\\\" sticky>\\n      <th mat-header-cell *matHeaderCellDef> Name </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\n    </ng-container>\\n\\n    <!-- Position Column -->\\n    <ng-container matColumnDef=\\\"position\\\">\\n      <th mat-header-cell *matHeaderCellDef> No. </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.position}} </td>\\n    </ng-container>\\n\\n    <!-- Weight Column -->\\n    <ng-container matColumnDef=\\\"weight\\\">\\n      <th mat-header-cell *matHeaderCellDef> Weight </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.weight}} </td>\\n    </ng-container>\\n\\n    <!-- Symbol Column -->\\n    <ng-container matColumnDef=\\\"symbol\\\">\\n      <th mat-header-cell *matHeaderCellDef> Symbol </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.symbol}} </td>\\n    </ng-container>\\n\\n    <!-- Star Column -->\\n    <ng-container matColumnDef=\\\"star\\\" stickyEnd>\\n      <th mat-header-cell *matHeaderCellDef></th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n        <mat-icon>more_vert</mat-icon>\\n      </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  </table>\\n</div>\\n\",\n                        styles: [\".example-container {\\n  height: 400px;\\n  width: 550px;\\n  overflow: auto;\\n}\\n\\ntable {\\n  width: 800px;\\n}\\n\\ntd.mat-column-star {\\n  width: 20px;\\n  padding-right: 8px;\\n}\\n\\nth.mat-column-position, td.mat-column-position {\\n  padding-left: 8px;\\n}\\n\\n.mat-table-sticky:first-child {\\n  border-right: 1px solid #e0e0e0;\\n}\\n\\n.mat-table-sticky:last-child {\\n  border-left: 1px solid #e0e0e0;\\n}\\n\"]\n                    }] }\n        ];\n        return TableStickyColumnsExample;\n    }());\n    var ELEMENT_DATA$8 = [\n        { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n        { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n        { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n        { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n        { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n        { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n        { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n        { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n        { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n        { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n    ];\n\n    /**\n     * @title Flex-layout tables with toggle-able sticky headers, footers, and columns\n     */\n    var TableStickyComplexFlexExample = /** @class */ (function () {\n        function TableStickyComplexFlexExample() {\n            this.displayedColumns = [];\n            this.dataSource = ELEMENT_DATA$9;\n            this.tables = [0];\n            this.displayedColumns.length = 24;\n            this.displayedColumns.fill('filler');\n            // The first two columns should be position and name; the last two columns: weight, symbol\n            this.displayedColumns[0] = 'position';\n            this.displayedColumns[1] = 'name';\n            this.displayedColumns[22] = 'weight';\n            this.displayedColumns[23] = 'symbol';\n        }\n        /** Whether the button toggle group contains the id as an active value. */\n        TableStickyComplexFlexExample.prototype.isSticky = function (buttonToggleGroup, id) {\n            return (buttonToggleGroup.value || []).indexOf(id) !== -1;\n        };\n        TableStickyComplexFlexExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'table-sticky-complex-flex-example',\n                        template: \"<div>\\n  <button mat-raised-button (click)=\\\"tables.push(tables.length)\\\">Add table</button>\\n  <button mat-raised-button (click)=\\\"tables.pop()\\\">Remove table</button>\\n</div>\\n\\n<div>\\n  Sticky Headers:\\n  <mat-button-toggle-group multiple [value]=\\\"['header-1']\\\"\\n                           #stickyHeaders=\\\"matButtonToggleGroup\\\"\\n                           class=\\\"example-sticky-toggle-group\\\">\\n    <mat-button-toggle value=\\\"header-1\\\"> Row 1 </mat-button-toggle>\\n    <mat-button-toggle value=\\\"header-2\\\"> Row 2 </mat-button-toggle>\\n  </mat-button-toggle-group>\\n</div>\\n\\n<div>\\n  Sticky Footers:\\n  <mat-button-toggle-group multiple [value]=\\\"['footer-1']\\\"\\n                           #stickyFooters=\\\"matButtonToggleGroup\\\"\\n                           class=\\\"example-sticky-toggle-group\\\">\\n    <mat-button-toggle value=\\\"footer-1\\\"> Row 1 </mat-button-toggle>\\n    <mat-button-toggle value=\\\"footer-2\\\"> Row 2 </mat-button-toggle>\\n  </mat-button-toggle-group>\\n</div>\\n\\n<div>\\n  Sticky Columns:\\n  <mat-button-toggle-group multiple [value]=\\\"['position', 'symbol']\\\"\\n                           #stickyColumns=\\\"matButtonToggleGroup\\\"\\n                           class=\\\"example-sticky-toggle-group\\\">\\n    <mat-button-toggle value=\\\"position\\\"> Position </mat-button-toggle>\\n    <mat-button-toggle value=\\\"name\\\"> Name </mat-button-toggle>\\n    <mat-button-toggle value=\\\"weight\\\"> Weight </mat-button-toggle>\\n    <mat-button-toggle value=\\\"symbol\\\"> Symbol </mat-button-toggle>\\n  </mat-button-toggle-group>\\n</div>\\n\\n<div class=\\\"example-container mat-elevation-z8\\\">\\n  <mat-table [dataSource]=\\\"dataSource\\\" *ngFor=\\\"let table of tables\\\">\\n    <ng-container matColumnDef=\\\"position\\\" [sticky]=\\\"isSticky(stickyColumns, 'position')\\\">\\n      <mat-header-cell *matHeaderCellDef> Position </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\"> {{element.position}} </mat-cell>\\n      <mat-footer-cell *matFooterCellDef> Position Footer </mat-footer-cell>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"name\\\" [sticky]=\\\"isSticky(stickyColumns, 'name')\\\">\\n      <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </mat-cell>\\n      <mat-footer-cell *matFooterCellDef> Name Footer </mat-footer-cell>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"weight\\\" [stickyEnd]=\\\"isSticky(stickyColumns, 'weight')\\\">\\n      <mat-header-cell *matHeaderCellDef> Weight </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\"> {{element.weight}} </mat-cell>\\n      <mat-footer-cell *matFooterCellDef> Weight Footer </mat-footer-cell>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"symbol\\\" [stickyEnd]=\\\"isSticky(stickyColumns, 'symbol')\\\">\\n      <mat-header-cell *matHeaderCellDef> Symbol </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\"> {{element.symbol}} </mat-cell>\\n      <mat-footer-cell *matFooterCellDef> Symbol Footer </mat-footer-cell>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"filler\\\">\\n      <mat-header-cell *matHeaderCellDef> Filler header cell </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\"> Filler data cell </mat-cell>\\n      <mat-footer-cell *matFooterCellDef> Filler footer cell </mat-footer-cell>\\n    </ng-container>\\n\\n    <mat-header-row *matHeaderRowDef=\\\"displayedColumns; sticky: isSticky(stickyHeaders, 'header-1')\\\"></mat-header-row>\\n    <mat-header-row *matHeaderRowDef=\\\"displayedColumns; sticky: isSticky(stickyHeaders, 'header-2')\\\"></mat-header-row>\\n\\n    <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\n\\n    <mat-footer-row *matFooterRowDef=\\\"displayedColumns; sticky: isSticky(stickyFooters, 'footer-1')\\\"></mat-footer-row>\\n    <mat-footer-row *matFooterRowDef=\\\"displayedColumns; sticky: isSticky(stickyFooters, 'footer-2')\\\"></mat-footer-row>\\n  </mat-table>\\n</div>\\n\",\n                        styles: [\".example-container {\\n  height: 400px;\\n  overflow: auto;\\n}\\n\\n.mat-table-sticky {\\n  background: #59abfd;\\n  opacity: 1;\\n}\\n\\n.example-sticky-toggle-group {\\n  margin: 8px;\\n}\\n\\n.mat-column-filler {\\n  padding: 0 8px;\\n  font-size: 10px;\\n  text-align: center;\\n}\\n\\n.mat-header-cell, .mat-footer-cell, .mat-cell {\\n  min-width: 80px;\\n  box-sizing: border-box;\\n}\\n\\n.mat-header-row, .mat-footer-row, .mat-row {\\n  min-width: 1920px; /* 24 columns, 80px each */\\n}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        TableStickyComplexFlexExample.ctorParameters = function () { return []; };\n        return TableStickyComplexFlexExample;\n    }());\n    var ELEMENT_DATA$9 = [\n        { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n        { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n        { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n        { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n        { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n        { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n        { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n        { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n        { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n        { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n    ];\n\n    /**\n     * @title Tables with toggle-able sticky headers, footers, and columns\n     */\n    var TableStickyComplexExample = /** @class */ (function () {\n        function TableStickyComplexExample() {\n            this.displayedColumns = [];\n            this.dataSource = ELEMENT_DATA$a;\n            this.tables = [0];\n            this.displayedColumns.length = 24;\n            this.displayedColumns.fill('filler');\n            // The first two columns should be position and name; the last two columns: weight, symbol\n            this.displayedColumns[0] = 'position';\n            this.displayedColumns[1] = 'name';\n            this.displayedColumns[22] = 'weight';\n            this.displayedColumns[23] = 'symbol';\n        }\n        /** Whether the button toggle group contains the id as an active value. */\n        TableStickyComplexExample.prototype.isSticky = function (buttonToggleGroup, id) {\n            return (buttonToggleGroup.value || []).indexOf(id) !== -1;\n        };\n        TableStickyComplexExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'table-sticky-complex-example',\n                        template: \"<div>\\n  <button mat-raised-button (click)=\\\"tables.push(tables.length)\\\">Add table</button>\\n  <button mat-raised-button (click)=\\\"tables.pop()\\\">Remove table</button>\\n</div>\\n\\n<div>\\n  Sticky Headers:\\n  <mat-button-toggle-group multiple [value]=\\\"['header-1']\\\"\\n                           #stickyHeaders=\\\"matButtonToggleGroup\\\"\\n                           class=\\\"example-sticky-toggle-group\\\">\\n    <mat-button-toggle value=\\\"header-1\\\"> Row 1 </mat-button-toggle>\\n    <mat-button-toggle value=\\\"header-2\\\"> Row 2 </mat-button-toggle>\\n  </mat-button-toggle-group>\\n</div>\\n\\n<div>\\n  Sticky Footers:\\n  <mat-button-toggle-group multiple [value]=\\\"['footer-1']\\\"\\n                           #stickyFooters=\\\"matButtonToggleGroup\\\"\\n                           class=\\\"example-sticky-toggle-group\\\">\\n    <mat-button-toggle value=\\\"footer-1\\\"> Row 1 </mat-button-toggle>\\n    <mat-button-toggle value=\\\"footer-2\\\"> Row 2 </mat-button-toggle>\\n  </mat-button-toggle-group>\\n</div>\\n\\n<div>\\n  Sticky Columns:\\n  <mat-button-toggle-group multiple [value]=\\\"['position', 'symbol']\\\"\\n                           #stickyColumns=\\\"matButtonToggleGroup\\\"\\n                           class=\\\"example-sticky-toggle-group\\\">\\n    <mat-button-toggle value=\\\"position\\\"> Position </mat-button-toggle>\\n    <mat-button-toggle value=\\\"name\\\"> Name </mat-button-toggle>\\n    <mat-button-toggle value=\\\"weight\\\"> Weight </mat-button-toggle>\\n    <mat-button-toggle value=\\\"symbol\\\"> Symbol </mat-button-toggle>\\n  </mat-button-toggle-group>\\n</div>\\n\\n<div class=\\\"example-container mat-elevation-z8\\\">\\n  <table mat-table [dataSource]=\\\"dataSource\\\" *ngFor=\\\"let table of tables\\\">\\n    <ng-container matColumnDef=\\\"position\\\" [sticky]=\\\"isSticky(stickyColumns, 'position')\\\">\\n      <th mat-header-cell *matHeaderCellDef> Position </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.position}} </td>\\n      <td mat-footer-cell *matFooterCellDef> Position Footer </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"name\\\" [sticky]=\\\"isSticky(stickyColumns, 'name')\\\">\\n      <th mat-header-cell *matHeaderCellDef> Name </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\n      <td mat-footer-cell *matFooterCellDef> Name Footer </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"weight\\\" [stickyEnd]=\\\"isSticky(stickyColumns, 'weight')\\\">\\n      <th mat-header-cell *matHeaderCellDef> Weight </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.weight}} </td>\\n      <td mat-footer-cell *matFooterCellDef> Weight Footer </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"symbol\\\" [stickyEnd]=\\\"isSticky(stickyColumns, 'symbol')\\\">\\n      <th mat-header-cell *matHeaderCellDef> Symbol </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.symbol}} </td>\\n      <td mat-footer-cell *matFooterCellDef> Symbol Footer </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"filler\\\">\\n      <th mat-header-cell *matHeaderCellDef> Filler header cell </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> Filler data cell </td>\\n      <td mat-footer-cell *matFooterCellDef> Filler footer cell </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns; sticky: isSticky(stickyHeaders, 'header-1')\\\"></tr>\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns; sticky: isSticky(stickyHeaders, 'header-2')\\\"></tr>\\n\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n\\n    <tr mat-footer-row *matFooterRowDef=\\\"displayedColumns; sticky: isSticky(stickyFooters, 'footer-1')\\\"></tr>\\n    <tr mat-footer-row *matFooterRowDef=\\\"displayedColumns; sticky: isSticky(stickyFooters, 'footer-2')\\\"></tr>\\n  </table>\\n</div>\\n\",\n                        styles: [\".example-container {\\n  height: 400px;\\n  overflow: auto;\\n}\\n\\n.mat-table-sticky {\\n  background: #59abfd;\\n  opacity: 1;\\n}\\n\\n.example-sticky-toggle-group {\\n  margin: 8px;\\n}\\n\\n.mat-column-filler {\\n  padding: 0 8px;\\n  font-size: 10px;\\n  text-align: center;\\n}\\n\\n.mat-header-cell, .mat-footer-cell, .mat-cell {\\n  min-width: 80px;\\n  box-sizing: border-box;\\n}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        TableStickyComplexExample.ctorParameters = function () { return []; };\n        return TableStickyComplexExample;\n    }());\n    var ELEMENT_DATA$a = [\n        { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n        { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n        { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n        { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n        { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n        { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n        { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n        { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n        { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n        { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n    ];\n\n    /**\n     * @title Table with a sticky footer\n     */\n    var TableStickyFooterExample = /** @class */ (function () {\n        function TableStickyFooterExample() {\n            this.displayedColumns = ['item', 'cost'];\n            this.transactions = [\n                { item: 'Beach ball', cost: 4 },\n                { item: 'Towel', cost: 5 },\n                { item: 'Frisbee', cost: 2 },\n                { item: 'Sunscreen', cost: 4 },\n                { item: 'Cooler', cost: 25 },\n                { item: 'Swim suit', cost: 15 },\n            ];\n        }\n        /** Gets the total cost of all transactions. */\n        TableStickyFooterExample.prototype.getTotalCost = function () {\n            return this.transactions.map(function (t) { return t.cost; }).reduce(function (acc, value) { return acc + value; }, 0);\n        };\n        TableStickyFooterExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'table-sticky-footer-example',\n                        template: \"<div class=\\\"example-container mat-elevation-z8\\\">\\n  <table mat-table [dataSource]=\\\"transactions\\\">\\n    <!-- Item Column -->\\n    <ng-container matColumnDef=\\\"item\\\">\\n      <th mat-header-cell *matHeaderCellDef> Item </th>\\n      <td mat-cell *matCellDef=\\\"let transaction\\\"> {{transaction.item}} </td>\\n      <td mat-footer-cell *matFooterCellDef> Total </td>\\n    </ng-container>\\n\\n    <!-- Cost Column -->\\n    <ng-container matColumnDef=\\\"cost\\\">\\n      <th mat-header-cell *matHeaderCellDef> Cost </th>\\n      <td mat-cell *matCellDef=\\\"let transaction\\\"> {{transaction.cost | currency}} </td>\\n      <td mat-footer-cell *matFooterCellDef> {{getTotalCost() | currency}} </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n    <tr mat-footer-row *matFooterRowDef=\\\"displayedColumns; sticky: true\\\"></tr>\\n  </table>\\n</div>\\n\",\n                        styles: [\".example-container {\\n  height: 270px;\\n  overflow: auto;\\n}\\n\\ntable {\\n  width: 100%;\\n}\\n\\ntr.mat-footer-row {\\n  font-weight: bold;\\n}\\n\\n.mat-table-sticky {\\n  border-top: 1px solid #e0e0e0;\\n}\\n\"]\n                    }] }\n        ];\n        return TableStickyFooterExample;\n    }());\n\n    /**\n     * @title Table with sticky header\n     */\n    var TableStickyHeaderExample = /** @class */ (function () {\n        function TableStickyHeaderExample() {\n            this.displayedColumns = ['position', 'name', 'weight', 'symbol'];\n            this.dataSource = ELEMENT_DATA$b;\n        }\n        TableStickyHeaderExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'table-sticky-header-example',\n                        template: \"<div class=\\\"example-container mat-elevation-z8\\\">\\n  <table mat-table [dataSource]=\\\"dataSource\\\">\\n\\n    <!-- Position Column -->\\n    <ng-container matColumnDef=\\\"position\\\">\\n      <th mat-header-cell *matHeaderCellDef> No. </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.position}} </td>\\n    </ng-container>\\n\\n    <!-- Name Column -->\\n    <ng-container matColumnDef=\\\"name\\\">\\n      <th mat-header-cell *matHeaderCellDef> Name </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\n    </ng-container>\\n\\n    <!-- Weight Column -->\\n    <ng-container matColumnDef=\\\"weight\\\">\\n      <th mat-header-cell *matHeaderCellDef> Weight </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.weight}} </td>\\n    </ng-container>\\n\\n    <!-- Symbol Column -->\\n    <ng-container matColumnDef=\\\"symbol\\\">\\n      <th mat-header-cell *matHeaderCellDef> Symbol </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.symbol}} </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns; sticky: true\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  </table>\\n</div>\",\n                        styles: [\".example-container {\\n  height: 400px;\\n  overflow: auto;\\n}\\n\\ntable {\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        return TableStickyHeaderExample;\n    }());\n    var ELEMENT_DATA$b = [\n        { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n        { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n        { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n        { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n        { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n        { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n        { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n        { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n        { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n        { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n    ];\n\n    var ELEMENT_DATA$c = [\n        { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n        { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n        { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n        { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n        { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n        { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n        { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n        { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n        { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n        { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n    ];\n    /**\n     * @title Use of 'mat-text-column' with various configurations of the interface.\n     */\n    var TableTextColumnAdvancedExample = /** @class */ (function () {\n        function TableTextColumnAdvancedExample() {\n            var _this = this;\n            this.displayedColumns = ['position', 'name', 'weight', 'symbol'];\n            this.dataSource = new table.MatTableDataSource(ELEMENT_DATA$c);\n            this.decimalPipe = new common.DecimalPipe('en-US');\n            /** Data accessor function that transforms the weight value to have at most 2 decimal digits. */\n            this.getWeight = function (data) { return _this.decimalPipe.transform(data.weight, '1.0-2'); };\n        }\n        TableTextColumnAdvancedExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'table-text-column-advanced-example',\n                        template: \"<table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8\\\">\\n  <mat-text-column name=\\\"position\\\" [headerText]=\\\"headerText\\\"></mat-text-column>\\n\\n  <!-- Change the header text. -->\\n  <mat-text-column name=\\\"name\\\" headerText=\\\"Element\\\"></mat-text-column>\\n\\n  <!-- Provide a data accessor for getting the cell text values. -->\\n  <mat-text-column name=\\\"weight\\\" [dataAccessor]=\\\"getWeight\\\"></mat-text-column>\\n\\n  <!-- Justify the content of the cells to the cell end. -->\\n  <mat-text-column name=\\\"symbol\\\" justify=\\\"end\\\"></mat-text-column>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n</table>\\n\",\n                        styles: [\"table {\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        return TableTextColumnAdvancedExample;\n    }());\n\n    var ELEMENT_DATA$d = [\n        { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n        { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n        { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n        { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n        { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n        { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n        { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n        { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n        { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n        { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n    ];\n    /**\n     * @title Use of `mat-text-column` which can be used for simple columns that only need to display\n     * a text value for the header and cells.\n     */\n    var TableTextColumnExample = /** @class */ (function () {\n        function TableTextColumnExample() {\n            this.displayedColumns = ['position', 'name', 'weight', 'symbol'];\n            this.dataSource = ELEMENT_DATA$d;\n        }\n        TableTextColumnExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'table-text-column-example',\n                        template: \"<table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8\\\">\\n  <mat-text-column name=\\\"position\\\"></mat-text-column>\\n  <mat-text-column name=\\\"name\\\"></mat-text-column>\\n  <mat-text-column name=\\\"weight\\\"></mat-text-column>\\n  <mat-text-column name=\\\"symbol\\\"></mat-text-column>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n</table>\\n\",\n                        styles: [\"table {\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        return TableTextColumnExample;\n    }());\n\n    var ELEMENT_DATA$e = [\n        { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n        { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n        { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n        { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n        { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n        { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n        { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n        { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n        { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n        { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n    ];\n    /**\n     * @title Table example that shows how to wrap a table component for definition and behavior reuse.\n     */\n    var TableWrappedExample = /** @class */ (function () {\n        function TableWrappedExample() {\n            this.displayedColumns = ['position', 'name', 'weight', 'symbol'];\n            this.dataSource = new table.MatTableDataSource(ELEMENT_DATA$e);\n        }\n        TableWrappedExample.prototype.ngOnInit = function () {\n            this.dataSource.sort = this.sort;\n        };\n        TableWrappedExample.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'table-wrapped-example',\n                        template: \"<wrapper-table [dataSource]=\\\"dataSource\\\" [columns]=\\\"displayedColumns\\\"\\n               matSort #sort=\\\"matSort\\\">\\n  <!-- Custom column definition to be provided to the wrapper table. -->\\n  <ng-container matColumnDef=\\\"name\\\">\\n    <th mat-header-cell *matHeaderCellDef> Name </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\n  </ng-container>\\n\\n  <!-- Custom row definitions to be provided to the wrapper table. -->\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns; \\\"></tr>\\n</wrapper-table>\\n\",\n                        styles: [\"table {\\n  width: 100%;\\n}\\n\"]\n                    }] }\n        ];\n        TableWrappedExample.propDecorators = {\n            sort: [{ type: core.ViewChild, args: ['sort', { static: true },] }]\n        };\n        return TableWrappedExample;\n    }());\n    /**\n     * Table component that accepts column and row definitions in its content to be registered to the\n     * table.\n     */\n    var WrapperTable = /** @class */ (function () {\n        function WrapperTable() {\n        }\n        WrapperTable.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            this.columnDefs.forEach(function (columnDef) { return _this.table.addColumnDef(columnDef); });\n            this.rowDefs.forEach(function (rowDef) { return _this.table.addRowDef(rowDef); });\n            this.headerRowDefs.forEach(function (headerRowDef) { return _this.table.addHeaderRowDef(headerRowDef); });\n        };\n        WrapperTable.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'wrapper-table',\n                        template: \"<table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8\\\">\\n  <ng-content></ng-content>\\n\\n  <!-- Position Column -->\\n  <ng-container matColumnDef=\\\"position\\\">\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> No. </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.position}} </td>\\n  </ng-container>\\n\\n  <!-- Weight Column -->\\n  <ng-container matColumnDef=\\\"weight\\\">\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Weight </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.weight}} </td>\\n  </ng-container>\\n\\n  <!-- Color Column -->\\n  <ng-container matColumnDef=\\\"symbol\\\">\\n    <th mat-header-cell *matHeaderCellDef> Symbol </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.symbol}} </td>\\n  </ng-container>\\n</table>\\n\",\n                        styles: [\"\\n    table {\\n      width: 100%;\\n    }\\n  \"]\n                    }] }\n        ];\n        WrapperTable.propDecorators = {\n            headerRowDefs: [{ type: core.ContentChildren, args: [table.MatHeaderRowDef,] }],\n            rowDefs: [{ type: core.ContentChildren, args: [table.MatRowDef,] }],\n            columnDefs: [{ type: core.ContentChildren, args: [table.MatColumnDef,] }],\n            table: [{ type: core.ViewChild, args: [table.MatTable, { static: true },] }],\n            columns: [{ type: core.Input }],\n            dataSource: [{ type: core.Input }]\n        };\n        return WrapperTable;\n    }());\n\n    var EXAMPLES = [\n        TableBasicExample, TableBasicFlexExample,\n        TableDynamicColumnsExample, TableExpandableRowsExample,\n        TableFilteringExample, TableFooterRowExample,\n        TableHttpExample, TableMultipleHeaderFooterExample,\n        TableOverviewExample, TablePaginationExample,\n        TableRowContextExample, TableSelectionExample,\n        TableSortingExample, TableStickyColumnsExample,\n        TableStickyComplexExample, TableStickyComplexFlexExample,\n        TableStickyFooterExample, TableStickyHeaderExample,\n        TableTextColumnExample, TableTextColumnAdvancedExample,\n        TableWrappedExample, WrapperTable,\n    ];\n    var TableExamplesModule = /** @class */ (function () {\n        function TableExamplesModule() {\n        }\n        TableExamplesModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            common.CommonModule,\n                            button.MatButtonModule,\n                            buttonToggle.MatButtonToggleModule,\n                            checkbox.MatCheckboxModule,\n                            icon.MatIconModule,\n                            input.MatInputModule,\n                            paginator.MatPaginatorModule,\n                            progressSpinner.MatProgressSpinnerModule,\n                            sort.MatSortModule,\n                            table.MatTableModule,\n                        ],\n                        declarations: EXAMPLES,\n                        exports: EXAMPLES,\n                    },] }\n        ];\n        return TableExamplesModule;\n    }());\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.TableBasicExample = TableBasicExample;\n    exports.TableBasicFlexExample = TableBasicFlexExample;\n    exports.TableDynamicColumnsExample = TableDynamicColumnsExample;\n    exports.TableExpandableRowsExample = TableExpandableRowsExample;\n    exports.TableFilteringExample = TableFilteringExample;\n    exports.TableFooterRowExample = TableFooterRowExample;\n    exports.TableHttpExample = TableHttpExample;\n    exports.TableMultipleHeaderFooterExample = TableMultipleHeaderFooterExample;\n    exports.TableOverviewExample = TableOverviewExample;\n    exports.TablePaginationExample = TablePaginationExample;\n    exports.TableRowContextExample = TableRowContextExample;\n    exports.TableSelectionExample = TableSelectionExample;\n    exports.TableSortingExample = TableSortingExample;\n    exports.TableStickyColumnsExample = TableStickyColumnsExample;\n    exports.TableStickyComplexExample = TableStickyComplexExample;\n    exports.TableStickyComplexFlexExample = TableStickyComplexFlexExample;\n    exports.TableStickyFooterExample = TableStickyFooterExample;\n    exports.TableStickyHeaderExample = TableStickyHeaderExample;\n    exports.TableTextColumnExample = TableTextColumnExample;\n    exports.TableTextColumnAdvancedExample = TableTextColumnAdvancedExample;\n    exports.TableWrappedExample = TableWrappedExample;\n    exports.WrapperTable = WrapperTable;\n    exports.TableExamplesModule = TableExamplesModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-examples-material-table.umd.js.map\n"]}