import { __awaiter } from "tslib";
import { TestBed, waitForAsync } from '@angular/core/testing';
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
import { MatChipHarness, MatChipListHarness } from '@angular/material/chips/testing';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { ChipsHarnessExample } from './chips-harness-example';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
import { MatChipsModule } from '@angular/material/chips';
describe('ChipsHarnessExample', () => {
    let fixture;
    let loader;
    beforeAll(() => {
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    });
    beforeEach(waitForAsync(() => {
        TestBed.configureTestingModule({
            imports: [MatChipsModule, NoopAnimationsModule],
            declarations: [ChipsHarnessExample]
        }).compileComponents();
        fixture = TestBed.createComponent(ChipsHarnessExample);
        fixture.detectChanges();
        loader = TestbedHarnessEnvironment.loader(fixture);
    }));
    it('should get whether a chip list is disabled', () => __awaiter(void 0, void 0, void 0, function* () {
        const chipList = yield loader.getHarness(MatChipListHarness);
        expect(yield chipList.isDisabled()).toBeFalse();
        fixture.componentInstance.isDisabled = true;
        fixture.detectChanges();
        expect(yield chipList.isDisabled()).toBeTrue();
    }));
    it('should get the orientation of a chip list', () => __awaiter(void 0, void 0, void 0, function* () {
        const chipList = yield loader.getHarness(MatChipListHarness);
        expect(yield chipList.getOrientation()).toEqual('horizontal');
    }));
    it('should be able to get the selected chips in a list', () => __awaiter(void 0, void 0, void 0, function* () {
        const chipList = yield loader.getHarness(MatChipListHarness);
        const chips = yield chipList.getChips();
        expect((yield chipList.getChips({ selected: true })).length).toBe(0);
        yield chips[1].select();
        const selectedChips = yield chipList.getChips({ selected: true });
        expect(yield Promise.all(selectedChips.map(chip => chip.getText()))).toEqual(['Chip 2']);
    }));
    it('should be able to trigger chip removal', () => __awaiter(void 0, void 0, void 0, function* () {
        const chip = yield loader.getHarness(MatChipHarness);
        expect(fixture.componentInstance.remove).not.toHaveBeenCalled();
        yield chip.remove();
        expect(fixture.componentInstance.remove).toHaveBeenCalled();
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hpcHMtaGFybmVzcy1leGFtcGxlLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy1leGFtcGxlcy9tYXRlcmlhbC9jaGlwcy9jaGlwcy1oYXJuZXNzL2NoaXBzLWhhcm5lc3MtZXhhbXBsZS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsT0FBTyxFQUFvQixZQUFZLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUM5RSxPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUN2RSxPQUFPLEVBQUMsY0FBYyxFQUFFLGtCQUFrQixFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFFbkYsT0FBTyxFQUFDLDJCQUEyQixFQUFFLDZCQUE2QixFQUFDLE1BQzVELDJDQUEyQyxDQUFDO0FBQ25ELE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQzVELE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLHNDQUFzQyxDQUFDO0FBQzFFLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUV2RCxRQUFRLENBQUMscUJBQXFCLEVBQUUsR0FBRyxFQUFFO0lBQ25DLElBQUksT0FBOEMsQ0FBQztJQUNuRCxJQUFJLE1BQXFCLENBQUM7SUFDMUIsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQywyQkFBMkIsRUFBRSw2QkFBNkIsRUFBRSxDQUFDLENBQUM7SUFDNUYsQ0FBQyxDQUFDLENBQUM7SUFDSCxVQUFVLENBQ1IsWUFBWSxDQUFDLEdBQUcsRUFBRTtRQUNoQixPQUFPLENBQUMsc0JBQXNCLENBQUM7WUFDN0IsT0FBTyxFQUFFLENBQUMsY0FBYyxFQUFFLG9CQUFvQixDQUFDO1lBQy9DLFlBQVksRUFBRSxDQUFDLG1CQUFtQixDQUFDO1NBQ3BDLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3ZCLE9BQU8sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDdkQsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3hCLE1BQU0sR0FBRyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckQsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUVGLEVBQUUsQ0FBQyw0Q0FBNEMsRUFBRSxHQUFTLEVBQUU7UUFDMUQsTUFBTSxRQUFRLEdBQUcsTUFBTSxNQUFNLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFFN0QsTUFBTSxDQUFDLE1BQU0sUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFaEQsT0FBTyxDQUFDLGlCQUFpQixDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDNUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBRXhCLE1BQU0sQ0FBQyxNQUFNLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2pELENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsMkNBQTJDLEVBQUUsR0FBUyxFQUFFO1FBQ3pELE1BQU0sUUFBUSxHQUFHLE1BQU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBRTdELE1BQU0sQ0FBQyxNQUFNLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNoRSxDQUFDLENBQUEsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG9EQUFvRCxFQUFFLEdBQVMsRUFBRTtRQUNsRSxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUM3RCxNQUFNLEtBQUssR0FBRyxNQUFNLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUV4QyxNQUFNLENBQUMsQ0FBQyxNQUFNLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuRSxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUV4QixNQUFNLGFBQWEsR0FBRyxNQUFNLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztRQUNoRSxNQUFNLENBQUMsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUMzRixDQUFDLENBQUEsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHdDQUF3QyxFQUFFLEdBQVMsRUFBRTtRQUN0RCxNQUFNLElBQUksR0FBRyxNQUFNLE1BQU0sQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDckQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNoRSxNQUFNLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNwQixNQUFNLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDOUQsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUZXN0QmVkLCBDb21wb25lbnRGaXh0dXJlLCB3YWl0Rm9yQXN5bmN9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQge1Rlc3RiZWRIYXJuZXNzRW52aXJvbm1lbnR9IGZyb20gJ0Bhbmd1bGFyL2Nkay90ZXN0aW5nL3Rlc3RiZWQnO1xuaW1wb3J0IHtNYXRDaGlwSGFybmVzcywgTWF0Q2hpcExpc3RIYXJuZXNzfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jaGlwcy90ZXN0aW5nJztcbmltcG9ydCB7SGFybmVzc0xvYWRlcn0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcnO1xuaW1wb3J0IHtCcm93c2VyRHluYW1pY1Rlc3RpbmdNb2R1bGUsIHBsYXRmb3JtQnJvd3NlckR5bmFtaWNUZXN0aW5nfVxuICBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMvdGVzdGluZyc7XG5pbXBvcnQge0NoaXBzSGFybmVzc0V4YW1wbGV9IGZyb20gJy4vY2hpcHMtaGFybmVzcy1leGFtcGxlJztcbmltcG9ydCB7Tm9vcEFuaW1hdGlvbnNNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQge01hdENoaXBzTW9kdWxlfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jaGlwcyc7XG5cbmRlc2NyaWJlKCdDaGlwc0hhcm5lc3NFeGFtcGxlJywgKCkgPT4ge1xuICBsZXQgZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxDaGlwc0hhcm5lc3NFeGFtcGxlPjtcbiAgbGV0IGxvYWRlcjogSGFybmVzc0xvYWRlcjtcbiAgYmVmb3JlQWxsKCgpID0+IHtcbiAgICBUZXN0QmVkLmluaXRUZXN0RW52aXJvbm1lbnQoQnJvd3NlckR5bmFtaWNUZXN0aW5nTW9kdWxlLCBwbGF0Zm9ybUJyb3dzZXJEeW5hbWljVGVzdGluZygpKTtcbiAgfSk7XG4gIGJlZm9yZUVhY2goXG4gICAgd2FpdEZvckFzeW5jKCgpID0+IHtcbiAgICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICAgIGltcG9ydHM6IFtNYXRDaGlwc01vZHVsZSwgTm9vcEFuaW1hdGlvbnNNb2R1bGVdLFxuICAgICAgICBkZWNsYXJhdGlvbnM6IFtDaGlwc0hhcm5lc3NFeGFtcGxlXVxuICAgICAgfSkuY29tcGlsZUNvbXBvbmVudHMoKTtcbiAgICAgIGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChDaGlwc0hhcm5lc3NFeGFtcGxlKTtcbiAgICAgIGZpeHR1cmUuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgbG9hZGVyID0gVGVzdGJlZEhhcm5lc3NFbnZpcm9ubWVudC5sb2FkZXIoZml4dHVyZSk7XG4gICAgfSlcbiAgKTtcblxuICBpdCgnc2hvdWxkIGdldCB3aGV0aGVyIGEgY2hpcCBsaXN0IGlzIGRpc2FibGVkJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGNoaXBMaXN0ID0gYXdhaXQgbG9hZGVyLmdldEhhcm5lc3MoTWF0Q2hpcExpc3RIYXJuZXNzKTtcblxuICAgIGV4cGVjdChhd2FpdCBjaGlwTGlzdC5pc0Rpc2FibGVkKCkpLnRvQmVGYWxzZSgpO1xuXG4gICAgZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZS5pc0Rpc2FibGVkID0gdHJ1ZTtcbiAgICBmaXh0dXJlLmRldGVjdENoYW5nZXMoKTtcblxuICAgIGV4cGVjdChhd2FpdCBjaGlwTGlzdC5pc0Rpc2FibGVkKCkpLnRvQmVUcnVlKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZ2V0IHRoZSBvcmllbnRhdGlvbiBvZiBhIGNoaXAgbGlzdCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBjaGlwTGlzdCA9IGF3YWl0IGxvYWRlci5nZXRIYXJuZXNzKE1hdENoaXBMaXN0SGFybmVzcyk7XG5cbiAgICBleHBlY3QoYXdhaXQgY2hpcExpc3QuZ2V0T3JpZW50YXRpb24oKSkudG9FcXVhbCgnaG9yaXpvbnRhbCcpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gZ2V0IHRoZSBzZWxlY3RlZCBjaGlwcyBpbiBhIGxpc3QnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgY2hpcExpc3QgPSBhd2FpdCBsb2FkZXIuZ2V0SGFybmVzcyhNYXRDaGlwTGlzdEhhcm5lc3MpO1xuICAgIGNvbnN0IGNoaXBzID0gYXdhaXQgY2hpcExpc3QuZ2V0Q2hpcHMoKTtcblxuICAgIGV4cGVjdCgoYXdhaXQgY2hpcExpc3QuZ2V0Q2hpcHMoe3NlbGVjdGVkOiB0cnVlfSkpLmxlbmd0aCkudG9CZSgwKTtcbiAgICBhd2FpdCBjaGlwc1sxXS5zZWxlY3QoKTtcblxuICAgIGNvbnN0IHNlbGVjdGVkQ2hpcHMgPSBhd2FpdCBjaGlwTGlzdC5nZXRDaGlwcyh7c2VsZWN0ZWQ6IHRydWV9KTtcbiAgICBleHBlY3QoYXdhaXQgUHJvbWlzZS5hbGwoc2VsZWN0ZWRDaGlwcy5tYXAoY2hpcCA9PiBjaGlwLmdldFRleHQoKSkpKS50b0VxdWFsKFsnQ2hpcCAyJ10pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gdHJpZ2dlciBjaGlwIHJlbW92YWwnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgY2hpcCA9IGF3YWl0IGxvYWRlci5nZXRIYXJuZXNzKE1hdENoaXBIYXJuZXNzKTtcbiAgICBleHBlY3QoZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZS5yZW1vdmUpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgYXdhaXQgY2hpcC5yZW1vdmUoKTtcbiAgICBleHBlY3QoZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZS5yZW1vdmUpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG59KTtcbiJdfQ==